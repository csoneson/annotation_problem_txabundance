
R version 3.4.0 (2017-04-21) -- "You Stupid Darkness"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> args <- (commandArgs(trailingOnly = TRUE))
> for (i in 1:length(args)) {
+   eval(parse(text = args[[i]]))
+ }
> 
> print(gene)
[1] "ENSG00000151067"
> print(bam)
[1] "STAR/20151016.A-Cortex_RNA/20151016.A-Cortex_RNA_Aligned.sortedByCoord.out.bam"
> print(bw)
[1] "STARbigwig/20151016.A-Cortex_RNA_Aligned.sortedByCoord.out.bw"
> print(gtf)
[1] "/home/Shared/data/annotation/Human/Ensembl_GRCh38.90/gtf/Homo_sapiens.GRCh38.90.gtf"
> print(quantsf)
[1] "salmon/cDNA/20151016.A-Cortex_RNA/quant.sf"
> print(junctioncov)
[1] "STAR/20151016.A-Cortex_RNA/20151016.A-Cortex_RNA_SJ.out.tab"
> print(biasmodels)
[1] "alpine/alpine_fitbiasmodel.rds"
> print(outrds)
[1] "alpine_out/ENSG00000151067.rds"
> 
> suppressPackageStartupMessages(library(dplyr))
> suppressPackageStartupMessages(library(alpine))
> suppressPackageStartupMessages(library(GenomicAlignments))
> suppressPackageStartupMessages(library(BSgenome.Hsapiens.NCBI.GRCh38))
> suppressPackageStartupMessages(library(ggplot2))
> suppressPackageStartupMessages(library(cowplot))
> suppressPackageStartupMessages(library(ggrepel))
> suppressPackageStartupMessages(library(grid))
> suppressPackageStartupMessages(library(gridExtra))
> 
> source("Rscripts/plot_tracks.R")
> 
> ## Create gene models for Gviz visualization
> options(ucscChromosomeNames = FALSE)
> genemodels_exon <- create_genemodels(gtf, seltype = "exon")
> genemodels_cds <- create_genemodels(gtf, seltype = "CDS")
> 
> ## Read bias model parameters and gene models
> biasmodels <- readRDS(biasmodels)
> fitpar <- biasmodels$fitpar
> ebt0 <- biasmodels$ebt0
> txps <- biasmodels$txps
> 
> ## Estimate average fragment length
> avefraglength <- sum(fitpar$`1`$fraglen.density$x * fitpar$`1`$fraglen.density$y/sum(fitpar$`1`$fraglen.density$y))
> 
> ## Get transcripts for gene of interest
> txlist <- names(subset(txps, gene_id == gene))
> stopifnot(length(txlist) > 0)
> names(txlist) <- txlist
> 
> ## Load bam file 
> bam.files <- bam
> names(bam.files) <- "1"
> 
> ## Read Salmon quantifications
> quantsf <- read.delim(quantsf, header = TRUE, as.is = TRUE)
> quantsf$Name <- gsub("\\.[0-9]+", "", quantsf$Name)
> 
> ## Get number of reads overlapping each transcript in the gene model
> # generange <- range(unlist(ebt0[txlist]))
> # strand(generange) <- "*"
> # ga <- alpine:::readGAlignAlpine(bam.files, generange)
> # ga <- keepSeqlevels(ga, as.character(seqnames(unlist(ebt0[txlist]))[1]))
> # fco <- findCompatibleOverlaps(ga, GRangesList(ebt0[txlist]))
> # tmp <- subjectHits(fco)
> # tmp <- names(ebt0[txlist])[tmp]
> # nreads <- table(tmp)
> # if (length(setdiff(names(ebt0[txlist]), names(nreads))) > 0) {
> #   for (i in setdiff(names(ebt0[txlist]), names(nreads))) {
> #     nreads[i] <- 0
> #   }
> # }
> 
> ## Predict coverage for each transcript
> pred.cov <- lapply(txlist, function(tx) {
+   message(tx)
+   ## Get transcript model
+   txmod <- ebt0[[tx]]
+   
+   pc <- predictCoverage(gene = txmod,
+                         bam.files = bam.files,
+                         fitpar = fitpar,
+                         genome = Hsapiens,
+                         model.names = "all")
+   # if (nreads[tx] != 0)
+   ## Scale predicted coverage to agree with Salmon's estimated count
+   # pc$`1`$pred.cov$all <- pc$`1`$pred.cov$all/as.numeric(nreads[tx]) * quantsf$NumReads[quantsf$Name == tx]
+   pc$`1`$pred.cov$all <- pc$`1`$pred.cov$all/sum(pc$`1`$pred.cov$all) * quantsf$NumReads[quantsf$Name == tx] * avefraglength
+   pc
+ })
ENST00000543114
ENST00000335762
ENST00000399655
ENST00000480911
ENST00000399595
ENST00000399644
ENST00000399638
ENST00000399597
ENST00000399621
ENST00000399637
ENST00000399591
ENST00000399641
ENST00000347598
ENST00000399606
ENST00000399601
ENST00000344100
ENST00000399629
ENST00000327702
ENST00000399649
ENST00000402845
ENST00000399603
ENST00000399634
ENST00000399617
ENST00000406454
ENST00000491104
ENST00000465278
ENST00000496818
ENST00000483136
ENST00000616390
ENST00000492150
ENST00000465934
> 
> junctionlist <- lapply(txlist, function(tx) {
+   txmod <- ebt0[[tx]]
+   junctions <- GenomicRanges::setdiff(range(txmod), txmod)
+   if (all(strand(txmod) == "+")) {
+     junctionpos <- cumsum(width(txmod))
+     junctionpos <- junctionpos[-length(junctionpos)]
+     junctioncov <- as.numeric(pred.cov[[tx]]$"1"$pred.cov$all)[junctionpos]
+   } else if (all(strand(txmod) == "-")) {
+     junctionpos <- cumsum(width(rev(txmod)))
+     junctionpos <- junctionpos[-length(junctionpos)]
+     junctioncov <- as.numeric(pred.cov[[tx]]$"1"$pred.cov$all)[junctionpos]
+     junctioncov <- rev(junctioncov)
+   } else {
+     stop("Unknown or mixed strand")
+   }
+   mcols(junctions)$coverage <- junctioncov
+   junctions
+ })
> 
> jl <- do.call(rbind, lapply(junctionlist, as.data.frame)) %>% 
+   dplyr::group_by(seqnames, start, end, width, strand) %>%
+   dplyr::summarize(coverage = sum(coverage)) %>% ungroup()
> 
> ## Read junction coverages
> jcov <- read.delim(junctioncov, 
+                    header = FALSE, as.is = TRUE)
> colnames(jcov) <- c("seqnames", "start", "end", "strand", "motif", "annot", 
+                     "uniqreads", "mmreads", "maxoverhang")
> jcov <- jcov %>% dplyr::mutate(strand = replace(strand, strand == 1, "+")) %>%
+   dplyr::mutate(strand = replace(strand, strand == 2, "-")) %>%
+   dplyr::select(-motif, -annot, -maxoverhang)
> 
> jl <- dplyr::left_join(jl, jcov) %>%
+   dplyr::mutate(uniqreads = replace(uniqreads, is.na(uniqreads), 0),
+                 mmreads = replace(mmreads, is.na(mmreads), 0)) %>%
+   dplyr::mutate(scaledcoverage = coverage/sum(coverage) * sum(uniqreads)) %>%
+   dplyr::mutate(junctionid = paste0("J", seq_len(length(scaledcoverage)))) %>%
+   dplyr::select(junctionid, everything())
Joining, by = c("seqnames", "start", "end", "strand")
Warning messages:
1: Column `seqnames` joining factor and character vector, coercing into character vector 
2: Column `strand` joining factor and character vector, coercing into character vector 
> 
> pdf(gsub("rds$", "pdf", outrds), width = 12, height = 10)
> tryCatch({
+   plot_tracks(mygene = gene, genemodels = genemodels_exon, 
+               genemodels2 = genemodels_cds, 
+               gtf_file = NULL, rnaseq_datafiles = structure(bw, names = "s1"), 
+               rnaseq_condition = structure("g1", names = "s1"), show_chr = NULL, 
+               min_coord = NULL, max_coord = NULL, 
+               pdf_filename = NULL, pdf_width = 7, pdf_height = 7)
+ }, error = function(e) message(e))
> 
> grid.newpage()
> grid.table(quantsf %>% dplyr::filter(Name %in% txlist))
> 
> grid.newpage()
> grid.table(jl %>% dplyr::select(junctionid, seqnames, start, end, width, strand, 
+                                 uniqreads, mmreads, scaledcoverage))
> 
> print(ggplot(jl, aes(x = scaledcoverage, y = uniqreads, label = junctionid)) + 
+         geom_point(size = 4) + geom_label_repel() + 
+         geom_abline(intercept = 0, slope = 1) + 
+         ggtitle(paste0("score = ", round(sum(abs(jl$uniqreads - jl$scaledcoverage))/sum(jl$uniqreads), 2))) + 
+         xlab("Scaled predicted coverage") + ylab("Number of uniquely mapped reads"))
Warning messages:
1: Removed 71 rows containing missing values (geom_point). 
2: Removed 71 rows containing missing values (geom_label_repel). 
> dev.off()
null device 
          1 
> 
> # print(sort(fit$residuals))
> write.table(jl %>% dplyr::mutate(difference = uniqreads - scaledcoverage) %>%
+   dplyr::mutate(ranking = order(order(difference))) %>%
+     dplyr::mutate(coverage = round(coverage, 2),
+                   scaledcoverage = round(scaledcoverage, 2),
+                   difference = round(difference, 2)), file = gsub("rds$", "txt", outrds),
+   quote = FALSE, row.names = FALSE, col.names = TRUE, sep = "\t")
> print(as.data.frame(jl))
   junctionid seqnames   start     end  width strand     coverage uniqreads
1          J1       12 1971202 2115223 144022      +          NaN         0
2          J2       12 2053612 2115223  61612      +  11.16380040         7
3          J3       12 2115546 2120324   4779      +  41.84571039         0
4          J4       12 2120431 2448975 328545      +  42.89238350        31
5          J5       12 2449116 2457566   8451      +  35.96468018        17
6          J6       12 2457707 2486103  28397      +  31.76380890        17
7          J7       12 2486263 2493189   6927      +  35.57543629         5
8          J8       12 2493387 2504435  11049      +   4.92902428        15
9          J9       12 2493387 2504841  11455      +  37.97788097         2
10        J10       12 2504540 2512811   8272      +  10.21925638        31
11        J11       12 2504946 2512811   7866      +  48.43390067         4
12        J12       12 2512985 2547449  34465      +   0.08789788         0
13        J13       12 2512985 2549942  36958      +  66.29834444        29
14        J14       12 2547525 2549942   2418      +   0.07618123         0
15        J15       12 2550034 2550543    510      +   7.65351601         2
16        J16       12 2550034 2556950   6917      +  46.78616857        12
17        J17       12 2550657 2556950   6294      +   6.11848714         0
18        J18       12 2556978 2566421   9444      +  57.66433225        15
19        J19       12 2566583 2567568    986      +  56.07938549        17
20        J20       12 2567795 2581589  13795      +  47.66863564        31
21        J21       12 2581798 2582821   1024      + 105.96425237        36
22        J22       12 2582943 2584502   1560      + 128.36970037        31
23        J23       12 2584618 2585375    758      + 123.44694124        37
24        J24       12 2585497 2585834    338      + 144.62167933        63
25        J25       12 2585905 2593212   7308      +  88.46936557        53
26        J26       12 2593346 2595873   2528      +  67.45817030        51
27        J27       12 2596004 2597229   1226      +  64.16709357         0
28        J28       12 2596004 2597436   1433      +   7.82257759        50
29        J29       12 2597290 2597436    147      +   0.00000000         0
30        J30       12 2597290 2601853   4564      +  49.69351136         5
31        J31       12 2597497 2601853   4357      +   7.02195821        37
32        J32       12 2601961 2605080   3120      +  55.66677288        40
33        J33       12 2605169 2605678    510      +  67.53389413        37
34        J34       12 2605787 2606610    824      +  82.77829846        47
35        J35       12 2606664 2606983    320      +  88.41893725        47
36        J36       12 2607131 2608510   1380      +  92.24936979        53
37        J37       12 2608064 2608510    447      +   0.00000000         0
38        J38       12 2608713 2610540   1828      + 106.66954536        28
39        J39       12 2610700 2611902   1203      +  88.40652305        56
40        J40       12 2612014 2633628  21615      +   1.23405912         5
41        J41       12 2612014 2634296  22283      +  74.70048621        58
42        J42       12 2633713 2634296    584      +   0.00000000         0
43        J43       12 2633713 2648474  14762      +   1.06163085         4
44        J44       12 2634375 2651639  17265      +   0.00000000         0
45        J45       12 2634381 2648474  14094      +  62.78403424        42
46        J46       12 2634381 2651639  17259      +   0.00000000         0
47        J47       12 2641760 2646383   4624      +   1.52308433         0
48        J48       12 2641760 2651639   9880      +   0.00000000         0
49        J49       12 2646533 2648474   1942      +   0.87243440         0
50        J50       12 2648508 2651573   3066      +   0.07786145         0
51        J51       12 2648508 2651639   3132      +  61.17444420        50
52        J52       12 2651769 2653834   2066      +  64.99696205        17
53        J53       12 2653901 2655146   1246      +  59.63135746        23
54        J54       12 2655239 2664824   9586      +  69.19922575        12
55        J55       12 2664991 2665580    590      +  91.29822247        66
56        J56       12 2665709 2666685    977      +  84.63862180        56
57        J57       12 2666783 2668932   2150      +  93.52593359        36
58        J58       12 2669036 2674483   5448      +   1.24416801         4
59        J59       12 2669036 2674540   5505      +  78.58051897        55
60        J60       12 2674643 2677093   2451      +  61.78605356        34
61        J61       12 2677222 2677732    511      +  41.75959318        12
62        J62       12 2677868 2679443   1576      +  18.43889910        18
63        J63       12 2679797 2680362    566      +   0.12702005         0
64        J64       12 2679797 2681949   2153      +   0.80785209         0
65        J65       12 2679797 2682549   2753      +  22.58497613        14
66        J66       12 2680576 2682549   1974      +   0.47599293         2
67        J67       12 2682055 2682549    495      +   1.85146317         3
68        J68       12 2682679 2685735   3057      +  51.17543148        58
69        J69       12 2685843 2686165    323      +  52.99713607        44
70        J70       12 2686270 2688446   2177      +  31.68576732        40
71        J71       12 2688780 2690899   2120      +  13.11898652        11
   mmreads scaledcoverage
1        0            NaN
2        0            NaN
3        0            NaN
4        0            NaN
5        0            NaN
6        0            NaN
7        0            NaN
8        0            NaN
9        0            NaN
10       0            NaN
11       0            NaN
12       0            NaN
13       0            NaN
14       0            NaN
15       0            NaN
16       0            NaN
17       0            NaN
18       0            NaN
19       0            NaN
20       0            NaN
21       0            NaN
22       0            NaN
23       0            NaN
24       0            NaN
25       0            NaN
26       0            NaN
27       0            NaN
28       0            NaN
29       0            NaN
30       1            NaN
31       1            NaN
32       1            NaN
33       0            NaN
34       0            NaN
35       0            NaN
36       0            NaN
37       0            NaN
38       0            NaN
39       0            NaN
40       0            NaN
41       0            NaN
42       0            NaN
43       0            NaN
44       0            NaN
45       0            NaN
46       0            NaN
47       0            NaN
48       0            NaN
49       0            NaN
50       0            NaN
51       0            NaN
52       0            NaN
53       0            NaN
54       0            NaN
55       0            NaN
56       0            NaN
57       0            NaN
58       0            NaN
59       0            NaN
60       0            NaN
61       0            NaN
62       0            NaN
63       0            NaN
64       0            NaN
65       0            NaN
66       0            NaN
67       0            NaN
68       0            NaN
69       0            NaN
70       3            NaN
71       0            NaN
> 
> sessionInfo()
R version 3.4.0 (2017-04-21)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 14.04.5 LTS

Matrix products: default
BLAS: /usr/local/R/R-3.4.0/lib/libRblas.so
LAPACK: /usr/local/R/R-3.4.0/lib/libRlapack.so

locale:
 [1] LC_CTYPE=en_CA.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_CA.UTF-8        LC_COLLATE=en_CA.UTF-8    
 [5] LC_MONETARY=en_CA.UTF-8    LC_MESSAGES=en_CA.UTF-8   
 [7] LC_PAPER=en_CA.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_CA.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
 [1] grid      stats4    parallel  stats     graphics  grDevices utils    
 [8] datasets  methods   base     

other attached packages:
 [1] bindrcpp_0.2                          
 [2] Gviz_1.20.0                           
 [3] gridExtra_2.3                         
 [4] ggrepel_0.7.0                         
 [5] cowplot_0.8.0                         
 [6] ggplot2_2.2.1                         
 [7] BSgenome.Hsapiens.NCBI.GRCh38_1.3.1000
 [8] BSgenome_1.44.2                       
 [9] rtracklayer_1.36.4                    
[10] GenomicAlignments_1.12.2              
[11] Rsamtools_1.28.0                      
[12] Biostrings_2.44.2                     
[13] XVector_0.16.0                        
[14] SummarizedExperiment_1.6.5            
[15] DelayedArray_0.2.7                    
[16] matrixStats_0.52.2                    
[17] Biobase_2.36.2                        
[18] GenomicRanges_1.28.5                  
[19] GenomeInfoDb_1.12.2                   
[20] IRanges_2.10.3                        
[21] S4Vectors_0.14.5                      
[22] BiocGenerics_0.22.0                   
[23] alpine_1.2.0                          
[24] dplyr_0.7.4                           

loaded via a namespace (and not attached):
 [1] ProtGenerics_1.8.0            bitops_1.0-6                 
 [3] bit64_0.9-7                   RColorBrewer_1.1-2           
 [5] httr_1.3.1                    tools_3.4.0                  
 [7] backports_1.1.1               R6_2.2.2                     
 [9] rpart_4.1-11                  Hmisc_4.0-3                  
[11] DBI_0.7                       lazyeval_0.2.0               
[13] colorspace_1.3-2              nnet_7.3-12                  
[15] curl_2.8.1                    bit_1.1-12                   
[17] compiler_3.4.0                graph_1.54.0                 
[19] htmlTable_1.9                 labeling_0.3                 
[21] scales_0.5.0                  checkmate_1.8.4              
[23] RBGL_1.52.0                   speedglm_0.3-2               
[25] stringr_1.2.0                 digest_0.6.12                
[27] foreign_0.8-69                base64enc_0.1-3              
[29] dichromat_2.0-0               pkgconfig_2.0.1              
[31] htmltools_0.3.6               ensembldb_2.0.4              
[33] htmlwidgets_0.9               rlang_0.1.2                  
[35] RSQLite_2.0                   BiocInstaller_1.26.1         
[37] shiny_1.0.5                   bindr_0.1                    
[39] BiocParallel_1.10.1           acepack_1.4.1                
[41] VariantAnnotation_1.22.3      RCurl_1.95-4.8               
[43] magrittr_1.5                  GenomeInfoDbData_0.99.0      
[45] Formula_1.2-2                 Matrix_1.2-11                
[47] Rcpp_0.12.13                  munsell_0.4.3                
[49] stringi_1.1.5                 yaml_2.1.14                  
[51] MASS_7.3-47                   zlibbioc_1.22.0              
[53] plyr_1.8.4                    AnnotationHub_2.8.2          
[55] blob_1.1.0                    lattice_0.20-35              
[57] splines_3.4.0                 GenomicFeatures_1.28.5       
[59] knitr_1.17                    biomaRt_2.32.1               
[61] XML_3.98-1.9                  glue_1.1.1                   
[63] biovizBase_1.24.0             latticeExtra_0.6-28          
[65] data.table_1.10.4             httpuv_1.3.5                 
[67] gtable_0.2.0                  assertthat_0.2.0             
[69] mime_0.5                      xtable_1.8-2                 
[71] AnnotationFilter_1.0.0        survival_2.41-3              
[73] tibble_1.3.4                  AnnotationDbi_1.38.2         
[75] memoise_1.1.0                 cluster_2.0.6                
[77] interactiveDisplayBase_1.14.0
> date()
[1] "Wed Nov  1 15:11:53 2017"
> 
> 
> proc.time()
    user   system  elapsed 
1317.974   97.280 1419.904 
