
R Under development (unstable) (2017-12-14 r73916) -- "Unsuffered Consequences"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> args <- (commandArgs(trailingOnly = TRUE))
> for (i in 1:length(args)) {
+   eval(parse(text = args[[i]]))
+ }
> 
> print(covrds)
[1] "alpine/20170918.A-WT_4/alpine_combined_coverages.rds"
> print(gexrds)  ## gene expression
[1] "alpine/20170918.A-WT_4/alpine_gene_expression.rds"
> print(geneinfords)  ## gene information
[1] "output/characterize_genes.rds"
> print(exoncountstxt)
[1] "featureCounts/20170918.A-WT_4/20170918.A-WT_4_STAR_exons.txt"
> print(introncountstxt)
[1] "featureCounts/20170918.A-WT_4/20170918.A-WT_4_STAR_introns.txt"
> print(outrds)  ## output file
[1] "alpine/20170918.A-WT_4/20170918.A-WT_4_gene_scores.rds"
> 
> suppressPackageStartupMessages({
+   library(dplyr)
+   library(ggplot2)
+ })
> 
> cov <- readRDS(covrds)
> gex <- readRDS(gexrds)
> geneinfo <- readRDS(geneinfords)
> exoncounts <- read.delim(exoncountstxt, skip = 1, header = TRUE, as.is = TRUE) %>%
+   dplyr::select(-Chr, -Start, -End, -Strand, -Length) %>%
+   setNames(c("gene", "exoncount"))
> introncounts <- read.delim(introncountstxt, skip = 1, header = TRUE, as.is = TRUE) %>%
+   dplyr::select(-Chr, -Start, -End, -Strand, -Length) %>%
+   setNames(c("gene", "introncount"))
> 
> jcovscaled <- cov$jcovscaled
> 
> ## Define colors
> method_colors <- c("#DC050C", "#7BAFDE", "#B17BA6", "#F1932D",
+                    "#4EB265", "#CAEDAB", "#777777", "#E8601C",
+                    "#1965B0", "#882E72", "#F6C141", "#F7EE55",
+                    "#90C987")[seq_len(length(unique(jcovscaled$method)))]
> names(method_colors) <- unique(jcovscaled$method)
> 
> ## Calculate the fraction of multimapping junction reads for each gene
> mmfrac <- jcovscaled %>% dplyr::select(junctionid, gene, uniqreads, mmreads) %>%
+   dplyr::distinct() %>% dplyr::group_by(gene) %>% 
+   dplyr::summarize(mmreads = sum(mmreads), uniqreads = sum(uniqreads)) %>% 
+   dplyr::mutate(mmfraction = mmreads/(mmreads + uniqreads)) %>%
+   dplyr::select(gene, mmfraction)
> 
> ## Get the score for each gene
> gene_scores <- jcovscaled %>% dplyr::select(gene, method, score) %>% 
+   dplyr::distinct() %>%
+   dplyr::left_join(mmfrac, by = "gene") %>%
+   dplyr::left_join(geneinfo, by = c("gene" = "gene_id")) %>%
+   dplyr::left_join(gex) %>%
+   dplyr::group_by(gene) %>%
+   dplyr::left_join(gex %>% dplyr::filter(method == "Salmon") %>% 
+                      dplyr::select(gene, count) %>% dplyr::rename(salmon_count = count))
Joining, by = c("gene", "method")
Joining, by = "gene"
> 
> ## Add ratio between intron and exon reads
> intron_exon_ratio <- dplyr::full_join(exoncounts, introncounts) %>% 
+   dplyr::mutate(introncounts = replace(introncount, is.na(introncount), 0)) %>%
+   dplyr::mutate(intron_exon_ratio = introncount/exoncount) %>%
+   dplyr::mutate(intron_exon_ratio = replace(intron_exon_ratio, exoncount==0 & introncount==0, 0))
Joining, by = "gene"
> gene_scores <- dplyr::left_join(gene_scores, intron_exon_ratio)
Joining, by = "gene"
> 
> pdf(gsub("rds$", "pdf", outrds), width = 10)
> 
> ## Plot score distribution
> print(ggplot(gene_scores, aes(x = 1, y = score, color = method)) + 
+         geom_violin() + theme_bw() + facet_wrap(~ method) + 
+         scale_color_manual(values = method_colors))
Warning message:
Removed 134395 rows containing non-finite values (stat_ydensity). 
> 
> ## Plot score distribution by fraction multimapping reads
> print(ggplot(gene_scores, aes(x = mmfraction, y = score, color = method)) + 
+         geom_point(alpha = 0.5, size = 0.5) + theme_bw() + facet_wrap(~ method) + 
+         geom_smooth(color = "black") + xlab("Fraction multimapping reads") + 
+         scale_color_manual(values = method_colors))
`geom_smooth()` using method = 'gam'
Warning messages:
1: Removed 134395 rows containing non-finite values (stat_smooth). 
2: Removed 134395 rows containing missing values (geom_point). 
> 
> print(ggplot(gene_scores %>% dplyr::filter(!is.na(mmfraction)), 
+              aes(x = mmfraction > 0.5, y = score, color = method)) + 
+         geom_violin() + theme_bw() + facet_wrap(~ method) + 
+         xlab("Fraction multimapping reads > 50%") + 
+         scale_color_manual(values = method_colors))
Warning message:
Removed 1989 rows containing non-finite values (stat_ydensity). 
> 
> ## For reads with few multimapping reads, plot score distribution by intron/exon ratio
> print(ggplot(gene_scores %>% dplyr::filter(!is.na(mmfraction) & mmfraction <= 0.5 & 
+                                              !is.na(intron_exon_ratio)),
+              aes(x = intron_exon_ratio, y = score, color = method)) + 
+         geom_point(alpha = 0.5, size = 0.5) + theme_bw() + facet_wrap(~ method) + 
+         geom_smooth(color = "black") + xlab("Intron/exon count ratio") + 
+         scale_color_manual(values = method_colors))
`geom_smooth()` using method = 'gam'
Warning messages:
1: Removed 184 rows containing non-finite values (stat_smooth). 
2: Removed 148 rows containing missing values (geom_point). 
> 
> print(ggplot(gene_scores %>% dplyr::filter(!is.na(mmfraction) & mmfraction <= 0.5 & 
+                                              !is.na(intron_exon_ratio)),
+              aes(x = intron_exon_ratio > 1, y = score, color = method)) + 
+         geom_violin() + theme_bw() + facet_wrap(~ method) + 
+         xlab("Intron/exon count ratio > 1") + 
+         scale_color_manual(values = method_colors))
Warning message:
Removed 148 rows containing non-finite values (stat_ydensity). 
> 
> ## For reads with few multimapping reads and low intron/exon ratio, plot score
> ## distribution by expression
> print(ggplot(gene_scores %>% dplyr::filter(!is.na(mmfraction) & mmfraction <= 0.5 & 
+                                              !is.na(intron_exon_ratio) & intron_exon_ratio < 1 & 
+                                              !is.na(salmon_count)),
+              aes(x = salmon_count, y = score, color = method)) + 
+         geom_point(alpha = 0.5, size = 0.5) + theme_bw() + facet_wrap(~ method) + 
+         geom_smooth(color = "black") + xlab("Salmon gene count") + scale_x_sqrt() + 
+         scale_color_manual(values = method_colors))
`geom_smooth()` using method = 'gam'
Warning messages:
1: Removed 97 rows containing non-finite values (stat_smooth). 
2: Removed 97 rows containing missing values (geom_point). 
> 
> print(ggplot(gene_scores %>% dplyr::filter(!is.na(mmfraction) & mmfraction <= 0.5 & 
+                                              !is.na(intron_exon_ratio) & intron_exon_ratio < 1 & 
+                                              !is.na(salmon_count)),
+              aes(x = salmon_count > 10, y = score, color = method)) + 
+         geom_violin() + theme_bw() + facet_wrap(~ method) + 
+         xlab("Salmon count > 10") + 
+         scale_color_manual(values = method_colors))
Warning message:
Removed 97 rows containing non-finite values (stat_ydensity). 
> 
> ## For reads with few multimapping reads, low intron/exon ratio and high
> ## expression, plot score distribution by length difference of 3' UTRs with same
> ## start
> print(ggplot(gene_scores %>% dplyr::filter(!is.na(mmfraction) & mmfraction <= 0.5 & 
+                                              !is.na(intron_exon_ratio) & intron_exon_ratio < 1 & 
+                                              !is.na(salmon_count) & salmon_count > 10 & 
+                                              !is.na(length_diff_3putrs_samestart)),
+              aes(x = length_diff_3putrs_samestart, y = score, color = method)) + 
+         geom_point(alpha = 0.5, size = 0.5) + theme_bw() + facet_wrap(~ method) + 
+         geom_smooth(color = "black") + xlab("Length difference of 3'UTRs with same start") + 
+         scale_color_manual(values = method_colors))
`geom_smooth()` using method = 'gam'
Warning messages:
1: Removed 32 rows containing non-finite values (stat_smooth). 
2: Removed 32 rows containing missing values (geom_point). 
> 
> print(ggplot(gene_scores %>% dplyr::filter(!is.na(mmfraction) & mmfraction <= 0.5 & 
+                                              !is.na(intron_exon_ratio) & intron_exon_ratio < 1 & 
+                                              !is.na(salmon_count) & salmon_count > 10 & 
+                                              !is.na(length_diff_3putrs_samestart)),
+              aes(x = length_diff_3putrs_samestart > 1000, y = score, color = method)) + 
+         geom_violin() + theme_bw() + facet_wrap(~ method) + 
+         xlab("Length difference of 3'UTRs with same start > 1000") + 
+         scale_color_manual(values = method_colors))
Warning message:
Removed 32 rows containing non-finite values (stat_ydensity). 
> 
> ## For reads with few multimapping reads, low intron/exon ratio and high
> ## expression, plot score distribution by average number of exons/transcript
> print(ggplot(gene_scores %>% dplyr::filter(!is.na(mmfraction) & mmfraction <= 0.5 & 
+                                              !is.na(intron_exon_ratio) & intron_exon_ratio < 1 & 
+                                              !is.na(salmon_count) & salmon_count > 10 & 
+                                              !is.na(ave_nbr_exons)),
+              aes(x = ave_nbr_exons, y = score, color = method)) + 
+         geom_point(alpha = 0.5, size = 0.5) + theme_bw() + facet_wrap(~ method) + 
+         geom_smooth(color = "black") + xlab("Average number of exons per transcript") + 
+         scale_color_manual(values = method_colors))
`geom_smooth()` using method = 'gam'
Warning messages:
1: Removed 44 rows containing non-finite values (stat_smooth). 
2: Removed 44 rows containing missing values (geom_point). 
> 
> print(ggplot(gene_scores %>% dplyr::filter(!is.na(mmfraction) & mmfraction <= 0.5 & 
+                                              !is.na(intron_exon_ratio) & intron_exon_ratio < 1 & 
+                                              !is.na(salmon_count) & salmon_count > 10 & 
+                                              !is.na(ave_nbr_exons)),
+              aes(x = ave_nbr_exons > 10, y = score, color = method)) + 
+         geom_violin() + theme_bw() + facet_wrap(~ method) + 
+         xlab("Average number of exons per transcript > 10") + 
+         scale_color_manual(values = method_colors))
Warning message:
Removed 44 rows containing non-finite values (stat_ydensity). 
> 
> dev.off()
null device 
          1 
> 
> ## Create gene categories
> # gene_plot <- gene_scores %>% dplyr::select(gene, method, score, all_genes, high_expression,
> #                                            high_expr_length_diff_utr, high_expr_few_multimap, 
> #                                            high_expr_many_junctions, many_multimap) %>%
> #   tidyr::gather(group, included, -gene, -score, -method) %>% dplyr::filter(included == 1)
> # 
> # 
> # pdf(gsub("rds$", "pdf", outrds), width = 14)
> # ## Rank distribution (1 is best)
> # print(ggplot(gene_plot %>% 
> #                dplyr::mutate(score = replace(score, is.na(score), 10)) %>% 
> #                dplyr::group_by(gene, group) %>% dplyr::mutate(rank = rank(score)) %>%
> #                dplyr::mutate(keep = !(var(rank) == 0)) %>% dplyr::filter(keep), 
> #              aes(x = rank)) + geom_bar() + 
> #         facet_grid(group ~ method, scales = "free_y") + theme_bw() + 
> #         ggtitle("Rank distribution"))
> # 
> # dev.off()
> 
> saveRDS(NULL, file = outrds)
> sessionInfo()
R Under development (unstable) (2017-12-14 r73916)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 14.04.5 LTS

Matrix products: default
BLAS: /usr/local/R/R-devel/lib/libRblas.so
LAPACK: /usr/local/R/R-devel/lib/libRlapack.so

locale:
 [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       
 [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   
 [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          
[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] bindrcpp_0.2  ggplot2_2.2.1 dplyr_0.7.4  

loaded via a namespace (and not attached):
 [1] Rcpp_0.12.15     lattice_0.20-35  digest_0.6.15    assertthat_0.2.0
 [5] plyr_1.8.4       grid_3.5.0       R6_2.2.2         nlme_3.1-134    
 [9] gtable_0.2.0     magrittr_1.5     scales_0.5.0     pillar_1.2.1    
[13] rlang_0.2.0      lazyeval_0.2.1   Matrix_1.2-12    labeling_0.3    
[17] glue_1.2.0       munsell_0.4.3    compiler_3.5.0   colorspace_1.3-2
[21] pkgconfig_2.0.1  mgcv_1.8-22      bindr_0.1        tibble_1.4.2    
> date()
[1] "Wed Mar  7 11:11:17 2018"
> 
> proc.time()
   user  system elapsed 
138.294   2.830 141.931 
