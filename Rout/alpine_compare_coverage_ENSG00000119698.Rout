
R version 3.4.0 (2017-04-21) -- "You Stupid Darkness"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> args <- (commandArgs(trailingOnly = TRUE))
> for (i in 1:length(args)) {
+   eval(parse(text = args[[i]]))
+ }
> 
> print(gene)  ## gene of interest, or file listing collection of genes (one per row)
[1] "ENSG00000119698"
> print(bam)  ## bam file
[1] "STAR/20151016.A-Cortex_RNA/20151016.A-Cortex_RNA_Aligned.sortedByCoord.out.bam"
> print(bigwig)  ## bigwig file for visualization
[1] "STARbigwig/20151016.A-Cortex_RNA_Aligned.sortedByCoord.out.bw"
> print(genemodels)  ## gene models etc (output of alpine_prepare_for_comparison.R)
[1] "alpine/alpine_genemodels.rds"
> print(biasmodels)  ## bias model object (output of alpine_fitbiasmodel.R)
[1] "alpine/alpine_fitbiasmodel.rds"
> print(ncores)  ## number of cores for parallel computations
[1] 1
> print(outdir)  ## output directory
[1] "alpine_out"
> print(checkdir)  ## directory to write (empty) rds files (time stamps)
[1] "alpine_check"
> 
> suppressPackageStartupMessages(library(dplyr))
> suppressPackageStartupMessages(library(alpine))
> suppressPackageStartupMessages(library(GenomicAlignments))
> suppressPackageStartupMessages(library(BSgenome.Hsapiens.NCBI.GRCh38))
> suppressPackageStartupMessages(library(ggplot2))
> suppressPackageStartupMessages(library(cowplot))
> suppressPackageStartupMessages(library(ggrepel))
> suppressPackageStartupMessages(library(parallel))
> suppressPackageStartupMessages(library(grid))
> suppressPackageStartupMessages(library(gridExtra))
> 
> source("Rscripts/plot_tracks.R")
> 
> calc_prop_p <- function(coverage, uniqreads, tot_coverage, tot_reads) {
+   sapply(seq_along(coverage), function(i) {
+     prop.test(x = c(coverage[i], uniqreads[i]), n = c(tot_coverage[i], tot_reads[i]),
+               alternative = "two.sided")$p.value
+   })
+ }
> 
> ## Read gene models for Gviz plot (pregenerated from gtf to save time) and
> ## Salmon quantifications
> genemodels <- readRDS(genemodels)
> 
> ## Read bias model parameters and exon-by-transcript objects
> biasmodels <- readRDS(biasmodels)
> fitpar <- biasmodels$fitpar
> ebt0 <- biasmodels$ebt0
> txps <- biasmodels$txps
> 
> ## Estimate average fragment length
> avefraglength <- sum(fitpar$`1`$fraglen.density$x * fitpar$`1`$fraglen.density$y/
+                        sum(fitpar$`1`$fraglen.density$y))
> 
> ## Load bam file 
> bam.files <- bam
> names(bam.files) <- "1"
> 
> ## Determine which gene(s) to investigate
> if (file.exists(gene)) {
+   genes <- unlist(read.delim(gene, as.is = TRUE, header = FALSE))
+ } else {
+   genes <- gene
+ }
> 
> ## Investigate each gene
> mclapply(genes, function(currgene) {
+   ## Get transcripts for gene of interest
+   txlist <- names(subset(txps, gene_id == currgene))
+   names(txlist) <- txlist
+ 
+     if (length(txlist) > 0) {
+     
+     ## Predict coverage for each transcript
+     pred.cov <- lapply(txlist, function(tx) {
+       message(tx)
+       ## Get transcript model
+       txmod <- ebt0[[tx]]
+       
+       pc <- tryCatch({
+         m <- predictCoverage(gene = txmod,
+                              bam.files = bam.files,
+                              fitpar = fitpar,
+                              genome = Hsapiens,
+                              model.names = "all")
+         ## Scale predicted coverage to agree with Salmon's estimated count
+         m$`1`$pred.cov$all <- m$`1`$pred.cov$all/sum(m$`1`$pred.cov$all) * 
+           genemodels$quantsf$NumReads[genemodels$quantsf$Name == tx] * avefraglength
+         m
+       }, error = function(e) NULL)
+       pc
+     })
+     
+     junctionlist <- lapply(txlist, function(tx) {
+       txmod <- sort(ebt0[[tx]])
+       junctions <- GenomicRanges::setdiff(range(txmod), txmod)
+       if (all(strand(txmod) == "+")) {
+         junctionpos <- cumsum(width(txmod))
+         junctionpos <- junctionpos[-length(junctionpos)]
+         junctioncov <- as.numeric(pred.cov[[tx]]$"1"$pred.cov$all)[junctionpos]
+       } else if (all(strand(txmod) == "-")) {
+         junctionpos <- cumsum(width(rev(txmod)))
+         junctionpos <- junctionpos[-length(junctionpos)]
+         junctioncov <- as.numeric(pred.cov[[tx]]$"1"$pred.cov$all)[junctionpos]
+         junctioncov <- rev(junctioncov)
+       } else {
+         stop("Unknown or mixed strand")
+       }
+       mcols(junctions)$coverage <- junctioncov
+       junctions
+     })
+     
+     
+     jl <- do.call(rbind, lapply(junctionlist, as.data.frame)) %>% 
+       dplyr::group_by(seqnames, start, end, width, strand) %>%
+       dplyr::summarize(coverage = sum(coverage, na.rm = TRUE)) %>% ungroup() %>%
+       dplyr::mutate(coverage = replace(coverage, is.na(coverage), 0))
+     
+     jl <- dplyr::left_join(jl, genemodels$jcov) %>%
+       dplyr::mutate(uniqreads = replace(uniqreads, is.na(uniqreads), 0),
+                     mmreads = replace(mmreads, is.na(mmreads), 0)) %>%
+       dplyr::mutate(scaledcoverage = coverage/sum(coverage, na.rm = TRUE) * sum(uniqreads, na.rm = TRUE)) %>%
+       dplyr::mutate(tot_coverage = sum(coverage, na.rm = TRUE),
+                     tot_reads = sum(uniqreads, na.rm = TRUE)) %>%
+       dplyr::mutate(prop_pval = calc_prop_p(coverage, uniqreads, tot_coverage, tot_reads)) %>%
+       dplyr::mutate(junctionid = paste0("J", seq_len(length(scaledcoverage)))) %>% 
+       dplyr::mutate(difference = uniqreads - scaledcoverage) %>%
+       dplyr::mutate(ranking = order(order(difference))) %>%
+       dplyr::select(junctionid, everything())
+     
+     pdf(paste0(outdir, "/", currgene, ".pdf"), width = 12, height = 10)
+     tryCatch({
+       plot_tracks(mygene = currgene, genemodels = genemodels$genemodels_exon, 
+                   genemodels2 = genemodels$genemodels_cds, 
+                   gtf_file = NULL, rnaseq_datafiles = structure(bigwig, names = "s1"), 
+                   rnaseq_condition = structure("g1", names = "s1"), show_chr = NULL, 
+                   min_coord = NULL, max_coord = NULL, 
+                   pdf_filename = NULL, pdf_width = 7, pdf_height = 7)
+     }, error = function(e) message(e))
+     
+     grid.newpage()
+     grid.table(genemodels$quantsf %>% dplyr::filter(Name %in% txlist))
+     
+     grid.newpage()
+     grid.table(jl %>% dplyr::select(junctionid, seqnames, start, end, width, strand, 
+                                     uniqreads, mmreads, scaledcoverage, prop_pval))
+     
+     print(ggplot(jl, aes(x = scaledcoverage, y = uniqreads, label = junctionid)) + 
+             geom_point(size = 4) + geom_label_repel() + 
+             geom_abline(intercept = 0, slope = 1) + 
+             ggtitle(paste0("score = ", round(sum(abs(jl$uniqreads - jl$scaledcoverage), 
+                                                  na.rm = TRUE)/sum(jl$uniqreads, na.rm = TRUE), 2))) + 
+             xlab("Scaled predicted coverage") + ylab("Number of uniquely mapped reads"))
+     dev.off()
+     
+     write.table(jl %>%
+                   dplyr::mutate(coverage = round(coverage, 2),
+                                 scaledcoverage = round(scaledcoverage, 2),
+                                 difference = round(difference, 2)), 
+                 file = paste0(outdir, "/", gene, ".txt"),
+                 quote = FALSE, row.names = FALSE, col.names = TRUE, sep = "\t")
+     print(as.data.frame(jl))
+     
+     saveRDS(NULL, paste0(checkdir, "/", currgene, ".rds"))
+   }
+ }, mc.preschedule = FALSE, mc.cores = ncores)
ENST00000556884
ENST00000304338
ENST00000555690
ENST00000328839
ENST00000553661
ENST00000556470
Joining, by = c("seqnames", "start", "end", "strand")
   junctionid seqnames    start      end width strand    coverage uniqreads
1          J1       14 94146309 94167543 21235      +   0.0000000         0
2          J2       14 94167613 94176053  8441      +   0.0000000         0
3          J3       14 94174583 94176053  1471      +  41.0855148        83
4          J4       14 94175728 94176053   326      +   0.4864778         2
5          J5       14 94175904 94176053   150      +   0.2642504         1
6          J6       14 94176128 94208463 32336      +  76.0919001       129
7          J7       14 94208567 94227274 18708      +  16.7639002        22
8          J8       14 94208567 94227285 18719      +   5.4979270         2
9          J9       14 94208567 94230586 22020      +  67.6321753       118
10        J10       14 94227379 94227485   107      +   5.8532902        14
11        J11       14 94227379 94230586  3208      +  10.3784147        12
12        J12       14 94230735 94231241   507      +  84.7727801       186
13        J13       14 94231316 94233652  2337      + 101.3755382       184
14        J14       14 94233760 94234561   802      +  97.2791740       188
15        J15       14 94234670 94237564  2895      + 148.7469058       118
16        J16       14 94237687 94240672  2986      + 130.3948452        91
17        J17       14 94240796 94241787   992      + 117.3220262       173
18        J18       14 94241958 94242288   331      + 143.3915706       171
19        J19       14 94242409 94244634  2226      + 122.1802203       151
20        J20       14 94244713 94245586   874      + 101.9384227       133
21        J21       14 94245671 94246356   686      + 135.5676147       199
22        J22       14 94246540 94250171  3632      + 106.7638457       223
23        J23       14 94250278 94251748  1471      + 106.4330745       206
24        J24       14 94251897 94256459  4563      + 149.3600878       158
25        J25       14 94256605 94258782  2178      + 168.6630453       188
26        J26       14 94258825 94259294   470      + 160.9982678       212
27        J27       14 94259370 94264877  5508      + 169.8242092       239
28        J28       14 94264948 94265386   439      + 188.6359990       276
29        J29       14 94265474 94265793   320      + 151.9785742       310
30        J30       14 94265888 94266958  1071      +  86.6063000       224
31        J31       14 94267030 94275373  8344      + 105.8262336       278
32        J32       14 94275522 94278618  3097      + 105.2480241       275
   mmreads scaledcoverage tot_coverage tot_reads    prop_pval   difference
1        0      0.0000000     2907.361      4566          NaN    0.0000000
2        0      0.0000000     2907.361      4566          NaN    0.0000000
3        0     64.5246620     2907.361      4566 2.143281e-01   18.4753380
4        0      0.7640117     2907.361      4566 1.000000e+00    1.2359883
5        0      0.4150044     2907.361      4566 1.000000e+00    0.5849956
6        0    119.5020717     2907.361      4566 6.426350e-01    9.4979283
7        0     26.3276486     2907.361      4566 6.958394e-01   -4.3276486
8        0      8.6344758     2907.361      4566 1.188487e-01   -6.6344758
9        0    106.2161025     2907.361      4566 5.335087e-01   11.7838975
10       0      9.1925725     2907.361      4566 5.276367e-01    4.8074275
11       0     16.2992652     2907.361      4566 6.106323e-01   -4.2992652
12       0    133.1353643     2907.361      4566 1.083982e-02   52.8646357
13       0    159.2099397     2907.361      4566 2.575929e-01   24.7900603
14       0    152.7766136     2907.361      4566 1.020742e-01   35.2233864
15       0    233.6065123     2907.361      4566 1.286188e-08 -115.6065123
16       0    204.7846632     2907.361      4566 9.090868e-10 -113.7846632
17       0    184.2538452     2907.361      4566 6.339397e-01  -11.2538452
18       0    225.1959764     2907.361      4566 1.497884e-02  -54.1959764
19       0    191.8836226     2907.361      4566 5.145171e-02  -40.8836226
20       0    160.0939479     2907.361      4566 1.721800e-01  -27.0939479
21       0    212.9084801     2907.361      4566 5.731282e-01  -13.9084801
22       0    167.6722585     2907.361      4566 1.514349e-02   55.3277415
23       0    167.1527833     2907.361      4566 8.321905e-02   38.8472167
24       0    234.5695125     2907.361      4566 4.664765e-04  -76.5695125
25       0    264.8847420     2907.361      4566 1.062876e-03  -76.8847420
26       0    252.8472349     2907.361      4566 9.354940e-02  -40.8472349
27       0    266.7083460     2907.361      4566 2.834780e-01  -27.7083460
28       0    296.2521981     2907.361      4566 4.684284e-01  -20.2521981
29       0    238.6818365     2907.361      4566 7.268469e-03   71.3181635
30       1    136.0149010     2907.361      4566 6.079409e-05   87.9850990
31       0    166.1997417     2907.361      4566 3.809442e-06  111.8002583
32       4    165.2916658     2907.361      4566 5.259260e-06  109.7083342
   ranking
1       16
2       17
3       23
4       19
5       18
6       21
7       14
8       13
9       22
10      20
11      15
12      27
13      24
14      25
15       1
16       2
17      12
18       5
19       6
20       9
21      11
22      28
23      26
24       4
25       3
26       7
27       8
28      10
29      29
30      30
31      32
32      31
[[1]]
NULL

> 
> saveRDS(NULL, paste0(checkdir, "/", gene, ".rds"))
> sessionInfo()
R version 3.4.0 (2017-04-21)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 14.04.5 LTS

Matrix products: default
BLAS: /usr/local/R/R-3.4.0/lib/libRblas.so
LAPACK: /usr/local/R/R-3.4.0/lib/libRlapack.so

locale:
 [1] LC_CTYPE=en_CA.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_CA.UTF-8        LC_COLLATE=en_CA.UTF-8    
 [5] LC_MONETARY=en_CA.UTF-8    LC_MESSAGES=en_CA.UTF-8   
 [7] LC_PAPER=en_CA.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_CA.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
 [1] grid      stats4    parallel  stats     graphics  grDevices utils    
 [8] datasets  methods   base     

other attached packages:
 [1] Gviz_1.20.0                           
 [2] gridExtra_2.3                         
 [3] ggrepel_0.7.0                         
 [4] cowplot_0.8.0                         
 [5] ggplot2_2.2.1                         
 [6] BSgenome.Hsapiens.NCBI.GRCh38_1.3.1000
 [7] BSgenome_1.44.2                       
 [8] rtracklayer_1.36.4                    
 [9] GenomicAlignments_1.12.2              
[10] Rsamtools_1.28.0                      
[11] Biostrings_2.44.2                     
[12] XVector_0.16.0                        
[13] SummarizedExperiment_1.6.5            
[14] DelayedArray_0.2.7                    
[15] matrixStats_0.52.2                    
[16] Biobase_2.36.2                        
[17] GenomicRanges_1.28.5                  
[18] GenomeInfoDb_1.12.2                   
[19] IRanges_2.10.3                        
[20] S4Vectors_0.14.5                      
[21] BiocGenerics_0.22.0                   
[22] alpine_1.2.0                          
[23] dplyr_0.7.4                           

loaded via a namespace (and not attached):
 [1] ProtGenerics_1.8.0            bitops_1.0-6                 
 [3] bit64_0.9-7                   RColorBrewer_1.1-2           
 [5] httr_1.3.1                    tools_3.4.0                  
 [7] backports_1.1.1               R6_2.2.2                     
 [9] rpart_4.1-11                  Hmisc_4.0-3                  
[11] DBI_0.7                       lazyeval_0.2.0               
[13] colorspace_1.3-2              nnet_7.3-12                  
[15] curl_2.8.1                    bit_1.1-12                   
[17] compiler_3.4.0                graph_1.54.0                 
[19] htmlTable_1.9                 scales_0.5.0                 
[21] checkmate_1.8.4               RBGL_1.52.0                  
[23] speedglm_0.3-2                stringr_1.2.0                
[25] digest_0.6.12                 foreign_0.8-69               
[27] base64enc_0.1-3               dichromat_2.0-0              
[29] pkgconfig_2.0.1               htmltools_0.3.6              
[31] ensembldb_2.0.4               htmlwidgets_0.9              
[33] rlang_0.1.2                   RSQLite_2.0                  
[35] BiocInstaller_1.26.1          shiny_1.0.5                  
[37] bindr_0.1                     BiocParallel_1.10.1          
[39] acepack_1.4.1                 VariantAnnotation_1.22.3     
[41] RCurl_1.95-4.8                magrittr_1.5                 
[43] GenomeInfoDbData_0.99.0       Formula_1.2-2                
[45] Matrix_1.2-11                 Rcpp_0.12.13                 
[47] munsell_0.4.3                 stringi_1.1.5                
[49] yaml_2.1.14                   MASS_7.3-47                  
[51] zlibbioc_1.22.0               plyr_1.8.4                   
[53] AnnotationHub_2.8.2           blob_1.1.0                   
[55] lattice_0.20-35               splines_3.4.0                
[57] GenomicFeatures_1.28.5        knitr_1.17                   
[59] biomaRt_2.32.1                XML_3.98-1.9                 
[61] glue_1.1.1                    biovizBase_1.24.0            
[63] latticeExtra_0.6-28           data.table_1.10.4            
[65] httpuv_1.3.5                  gtable_0.2.0                 
[67] assertthat_0.2.0              mime_0.5                     
[69] xtable_1.8-2                  AnnotationFilter_1.0.0       
[71] survival_2.41-3               tibble_1.3.4                 
[73] AnnotationDbi_1.38.2          memoise_1.1.0                
[75] bindrcpp_0.2                  cluster_2.0.6                
[77] interactiveDisplayBase_1.14.0
> date()
[1] "Thu Nov  2 14:01:18 2017"
> 
> 
> proc.time()
   user  system elapsed 
 46.770   3.126 120.152 
