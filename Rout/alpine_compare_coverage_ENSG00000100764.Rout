
R version 3.4.0 (2017-04-21) -- "You Stupid Darkness"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> args <- (commandArgs(trailingOnly = TRUE))
> for (i in 1:length(args)) {
+   eval(parse(text = args[[i]]))
+ }
> 
> print(gene)
[1] "ENSG00000100764"
> print(bam)
[1] "STAR/20151016.A-Cortex_RNA/20151016.A-Cortex_RNA_Aligned.sortedByCoord.out.bam"
> print(bw)
[1] "STARbigwig/20151016.A-Cortex_RNA_Aligned.sortedByCoord.out.bw"
> print(genemodels)
[1] "alpine/alpine_genemodels.rds"
> print(quantsf)
[1] "salmon/cDNA/20151016.A-Cortex_RNA/quant.sf"
> print(biasmodels)
[1] "alpine/alpine_fitbiasmodel.rds"
> print(outrds)
[1] "alpine_out/ENSG00000100764.rds"
> 
> suppressPackageStartupMessages(library(dplyr))
> suppressPackageStartupMessages(library(alpine))
> suppressPackageStartupMessages(library(GenomicAlignments))
> suppressPackageStartupMessages(library(BSgenome.Hsapiens.NCBI.GRCh38))
> suppressPackageStartupMessages(library(ggplot2))
> suppressPackageStartupMessages(library(cowplot))
> suppressPackageStartupMessages(library(ggrepel))
> suppressPackageStartupMessages(library(grid))
> suppressPackageStartupMessages(library(gridExtra))
> 
> source("Rscripts/plot_tracks.R")
> 
> ## Read gene models for plot (pregenerated from gtf to save time)
> genemodels <- readRDS(genemodels)
> quantsf <- genemodels$quantsf
> 
> ## Read bias model parameters and gene models
> biasmodels <- readRDS(biasmodels)
> fitpar <- biasmodels$fitpar
> ebt0 <- biasmodels$ebt0
> txps <- biasmodels$txps
> 
> ## Estimate average fragment length
> avefraglength <- sum(fitpar$`1`$fraglen.density$x * fitpar$`1`$fraglen.density$y/sum(fitpar$`1`$fraglen.density$y))
> 
> ## Get transcripts for gene of interest
> txlist <- names(subset(txps, gene_id == gene))
> stopifnot(length(txlist) > 0)
> names(txlist) <- txlist
> 
> ## Load bam file 
> bam.files <- bam
> names(bam.files) <- "1"
> 
> ## Predict coverage for each transcript
> pred.cov <- lapply(txlist, function(tx) {
+   message(tx)
+   ## Get transcript model
+   txmod <- ebt0[[tx]]
+   
+   pc <- tryCatch({
+     m <- predictCoverage(gene = txmod,
+                          bam.files = bam.files,
+                          fitpar = fitpar,
+                          genome = Hsapiens,
+                          model.names = "all")
+     ## Scale predicted coverage to agree with Salmon's estimated count
+     m$`1`$pred.cov$all <- m$`1`$pred.cov$all/sum(m$`1`$pred.cov$all) * quantsf$NumReads[quantsf$Name == tx] * avefraglength
+     m
+   }, error = function(e) NULL)
+   pc
+ })
ENST00000261303
ENST00000553835
ENST00000554624
ENST00000557357
ENST00000555679
ENST00000543772
ENST00000555787
> 
> junctionlist <- lapply(txlist, function(tx) {
+   txmod <- sort(ebt0[[tx]])
+   junctions <- GenomicRanges::setdiff(range(txmod), txmod)
+   if (all(strand(txmod) == "+")) {
+     junctionpos <- cumsum(width(txmod))
+     junctionpos <- junctionpos[-length(junctionpos)]
+     junctioncov <- as.numeric(pred.cov[[tx]]$"1"$pred.cov$all)[junctionpos]
+   } else if (all(strand(txmod) == "-")) {
+     junctionpos <- cumsum(width(rev(txmod)))
+     junctionpos <- junctionpos[-length(junctionpos)]
+     junctioncov <- as.numeric(pred.cov[[tx]]$"1"$pred.cov$all)[junctionpos]
+     junctioncov <- rev(junctioncov)
+   } else {
+     stop("Unknown or mixed strand")
+   }
+   mcols(junctions)$coverage <- junctioncov
+   junctions
+ })
> 
> jl <- do.call(rbind, lapply(junctionlist, as.data.frame)) %>% 
+   dplyr::group_by(seqnames, start, end, width, strand) %>%
+   dplyr::summarize(coverage = sum(coverage, na.rm = TRUE)) %>% ungroup() %>%
+   dplyr::mutate(coverage = replace(coverage, is.na(coverage), 0))
> 
> jl <- dplyr::left_join(jl, genemodels$jcov) %>%
+   dplyr::mutate(uniqreads = replace(uniqreads, is.na(uniqreads), 0),
+                 mmreads = replace(mmreads, is.na(mmreads), 0)) %>%
+   dplyr::mutate(scaledcoverage = coverage/sum(coverage, na.rm = TRUE) * sum(uniqreads, na.rm = TRUE)) %>%
+   dplyr::mutate(junctionid = paste0("J", seq_len(length(scaledcoverage)))) %>%
+   dplyr::select(junctionid, everything())
Joining, by = c("seqnames", "start", "end", "strand")
Warning messages:
1: Column `seqnames` joining factor and character vector, coercing into character vector 
2: Column `strand` joining factor and character vector, coercing into character vector 
> 
> pdf(gsub("rds$", "pdf", outrds), width = 12, height = 10)
> tryCatch({
+   plot_tracks(mygene = gene, genemodels = genemodels$genemodels_exon, 
+               genemodels2 = genemodels$genemodels_cds, 
+               gtf_file = NULL, rnaseq_datafiles = structure(bw, names = "s1"), 
+               rnaseq_condition = structure("g1", names = "s1"), show_chr = NULL, 
+               min_coord = NULL, max_coord = NULL, 
+               pdf_filename = NULL, pdf_width = 7, pdf_height = 7)
+ }, error = function(e) message(e))
> 
> grid.newpage()
> grid.table(quantsf %>% dplyr::filter(Name %in% txlist))
> 
> grid.newpage()
> grid.table(jl %>% dplyr::select(junctionid, seqnames, start, end, width, strand, 
+                                 uniqreads, mmreads, scaledcoverage))
> 
> print(ggplot(jl, aes(x = scaledcoverage, y = uniqreads, label = junctionid)) + 
+         geom_point(size = 4) + geom_label_repel() + 
+         geom_abline(intercept = 0, slope = 1) + 
+         ggtitle(paste0("score = ", round(sum(abs(jl$uniqreads - jl$scaledcoverage), 
+                                                  na.rm = TRUE)/sum(jl$uniqreads, na.rm = TRUE), 2))) + 
+         xlab("Scaled predicted coverage") + ylab("Number of uniquely mapped reads"))
> dev.off()
null device 
          1 
> 
> # print(sort(fit$residuals))
> write.table(jl %>% dplyr::mutate(difference = uniqreads - scaledcoverage) %>%
+   dplyr::mutate(ranking = order(order(difference))) %>%
+     dplyr::mutate(coverage = round(coverage, 2),
+                   scaledcoverage = round(scaledcoverage, 2),
+                   difference = round(difference, 2)), 
+   file = gsub("rds$", "txt", outrds),
+   quote = FALSE, row.names = FALSE, col.names = TRUE, sep = "\t")
> print(as.data.frame(jl))
   junctionid seqnames    start      end width strand   coverage uniqreads
1          J1       14 90256593 90263800  7208      +    0.00000         0
2          J2       14 90256601 90259159  2559      +  162.59578       249
3          J3       14 90259214 90260114   901      +  277.94895       492
4          J4       14 90259214 90263317  4104      +  367.39794         1
5          J5       14 90260212 90263317  3106      +  569.42826       524
6          J6       14 90263443 90263661   219      + 1013.46885       665
7          J7       14 90263443 90263669   227      +   11.99387         0
8          J8       14 90263848 90264040   193      +  691.33276       524
9          J9       14 90264170 90265069   900      +  729.60533       526
10        J10       14 90265167 90268223  3057      +  627.34249       678
11        J11       14 90268414 90269396   983      +  699.35676       946
12        J12       14 90269549 90270197   649      +  905.81281      1086
13        J13       14 90270353 90272272  1920      +  818.28314       560
   mmreads scaledcoverage
1        0        0.00000
2        0      147.84731
3       16      252.73721
4        0      334.07261
5       41      517.77750
6        5      921.54078
7        0       10.90595
8        2      628.62448
9       56      663.42549
10     136      570.43853
11      15      635.92065
12      44      823.64983
13     241      744.05965
> 
> saveRDS(NULL, outrds)
> sessionInfo()
R version 3.4.0 (2017-04-21)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 14.04.5 LTS

Matrix products: default
BLAS: /usr/local/R/R-3.4.0/lib/libRblas.so
LAPACK: /usr/local/R/R-3.4.0/lib/libRlapack.so

locale:
 [1] LC_CTYPE=en_CA.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_CA.UTF-8        LC_COLLATE=en_CA.UTF-8    
 [5] LC_MONETARY=en_CA.UTF-8    LC_MESSAGES=en_CA.UTF-8   
 [7] LC_PAPER=en_CA.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_CA.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
 [1] grid      stats4    parallel  stats     graphics  grDevices utils    
 [8] datasets  methods   base     

other attached packages:
 [1] bindrcpp_0.2                          
 [2] Gviz_1.20.0                           
 [3] gridExtra_2.3                         
 [4] ggrepel_0.7.0                         
 [5] cowplot_0.8.0                         
 [6] ggplot2_2.2.1                         
 [7] BSgenome.Hsapiens.NCBI.GRCh38_1.3.1000
 [8] BSgenome_1.44.2                       
 [9] rtracklayer_1.36.4                    
[10] GenomicAlignments_1.12.2              
[11] Rsamtools_1.28.0                      
[12] Biostrings_2.44.2                     
[13] XVector_0.16.0                        
[14] SummarizedExperiment_1.6.5            
[15] DelayedArray_0.2.7                    
[16] matrixStats_0.52.2                    
[17] Biobase_2.36.2                        
[18] GenomicRanges_1.28.5                  
[19] GenomeInfoDb_1.12.2                   
[20] IRanges_2.10.3                        
[21] S4Vectors_0.14.5                      
[22] BiocGenerics_0.22.0                   
[23] alpine_1.2.0                          
[24] dplyr_0.7.4                           

loaded via a namespace (and not attached):
 [1] ProtGenerics_1.8.0            bitops_1.0-6                 
 [3] bit64_0.9-7                   RColorBrewer_1.1-2           
 [5] httr_1.3.1                    tools_3.4.0                  
 [7] backports_1.1.1               R6_2.2.2                     
 [9] rpart_4.1-11                  Hmisc_4.0-3                  
[11] DBI_0.7                       lazyeval_0.2.0               
[13] colorspace_1.3-2              nnet_7.3-12                  
[15] curl_2.8.1                    bit_1.1-12                   
[17] compiler_3.4.0                graph_1.54.0                 
[19] htmlTable_1.9                 labeling_0.3                 
[21] scales_0.5.0                  checkmate_1.8.4              
[23] RBGL_1.52.0                   speedglm_0.3-2               
[25] stringr_1.2.0                 digest_0.6.12                
[27] foreign_0.8-69                base64enc_0.1-3              
[29] dichromat_2.0-0               pkgconfig_2.0.1              
[31] htmltools_0.3.6               ensembldb_2.0.4              
[33] htmlwidgets_0.9               rlang_0.1.2                  
[35] RSQLite_2.0                   BiocInstaller_1.26.1         
[37] shiny_1.0.5                   bindr_0.1                    
[39] BiocParallel_1.10.1           acepack_1.4.1                
[41] VariantAnnotation_1.22.3      RCurl_1.95-4.8               
[43] magrittr_1.5                  GenomeInfoDbData_0.99.0      
[45] Formula_1.2-2                 Matrix_1.2-11                
[47] Rcpp_0.12.13                  munsell_0.4.3                
[49] stringi_1.1.5                 yaml_2.1.14                  
[51] MASS_7.3-47                   zlibbioc_1.22.0              
[53] plyr_1.8.4                    AnnotationHub_2.8.2          
[55] blob_1.1.0                    lattice_0.20-35              
[57] splines_3.4.0                 GenomicFeatures_1.28.5       
[59] knitr_1.17                    biomaRt_2.32.1               
[61] XML_3.98-1.9                  glue_1.1.1                   
[63] biovizBase_1.24.0             latticeExtra_0.6-28          
[65] data.table_1.10.4             httpuv_1.3.5                 
[67] gtable_0.2.0                  assertthat_0.2.0             
[69] mime_0.5                      xtable_1.8-2                 
[71] AnnotationFilter_1.0.0        survival_2.41-3              
[73] tibble_1.3.4                  AnnotationDbi_1.38.2         
[75] memoise_1.1.0                 cluster_2.0.6                
[77] interactiveDisplayBase_1.14.0
> date()
[1] "Wed Nov  1 20:53:48 2017"
> 
> 
> proc.time()
   user  system elapsed 
183.985  13.622 199.522 
