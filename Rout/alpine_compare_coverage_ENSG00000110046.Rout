
R version 3.4.0 (2017-04-21) -- "You Stupid Darkness"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> args <- (commandArgs(trailingOnly = TRUE))
> for (i in 1:length(args)) {
+   eval(parse(text = args[[i]]))
+ }
> 
> print(gene)  ## gene of interest, or file listing collection of genes (one per row)
[1] "ENSG00000110046"
> print(bam)  ## bam file
[1] "STAR/20151016.A-Cortex_RNA/20151016.A-Cortex_RNA_Aligned.sortedByCoord.out.bam"
> print(bigwig)  ## bigwig file for visualization
[1] "STARbigwig/20151016.A-Cortex_RNA_Aligned.sortedByCoord.out.bw"
> print(genemodels)  ## gene models etc (output of alpine_prepare_for_comparison.R)
[1] "alpine/alpine_genemodels.rds"
> print(biasmodels)  ## bias model object (output of alpine_fitbiasmodel.R)
[1] "alpine/alpine_fitbiasmodel.rds"
> print(ncores)  ## number of cores for parallel computations
[1] 1
> print(outdir)  ## output directory
[1] "alpine_out"
> print(checkdir)  ## directory to write (empty) rds files (time stamps)
[1] "alpine_check"
> 
> suppressPackageStartupMessages(library(dplyr))
> suppressPackageStartupMessages(library(alpine))
> suppressPackageStartupMessages(library(GenomicAlignments))
> suppressPackageStartupMessages(library(BSgenome.Hsapiens.NCBI.GRCh38))
> suppressPackageStartupMessages(library(ggplot2))
> suppressPackageStartupMessages(library(cowplot))
> suppressPackageStartupMessages(library(ggrepel))
> suppressPackageStartupMessages(library(parallel))
> suppressPackageStartupMessages(library(grid))
> suppressPackageStartupMessages(library(gridExtra))
> 
> source("Rscripts/plot_tracks.R")
> 
> calc_prop_p <- function(coverage, uniqreads, tot_coverage, tot_reads) {
+   sapply(seq_along(coverage), function(i) {
+     prop.test(x = c(coverage[i], uniqreads[i]), n = c(tot_coverage[i], tot_reads[i]),
+               alternative = "two.sided")$p.value
+   })
+ }
> 
> ## Read gene models for Gviz plot (pregenerated from gtf to save time) and
> ## Salmon quantifications
> genemodels <- readRDS(genemodels)
> 
> ## Read bias model parameters and exon-by-transcript objects
> biasmodels <- readRDS(biasmodels)
> fitpar <- biasmodels$fitpar
> ebt0 <- biasmodels$ebt0
> txps <- biasmodels$txps
> 
> ## Estimate average fragment length
> avefraglength <- sum(fitpar$`1`$fraglen.density$x * fitpar$`1`$fraglen.density$y/
+                        sum(fitpar$`1`$fraglen.density$y))
> 
> ## Load bam file 
> bam.files <- bam
> names(bam.files) <- "1"
> 
> ## Determine which gene(s) to investigate
> if (file.exists(gene)) {
+   genes <- unlist(read.delim(gene, as.is = TRUE, header = FALSE))
+ } else {
+   genes <- gene
+ }
> 
> ## Investigate each gene
> mclapply(genes, function(currgene) {
+   ## Get transcripts for gene of interest
+   txlist <- names(subset(txps, gene_id == currgene))
+   names(txlist) <- txlist
+ 
+     if (length(txlist) > 0) {
+     
+     ## Predict coverage for each transcript
+     pred.cov <- lapply(txlist, function(tx) {
+       message(tx)
+       ## Get transcript model
+       txmod <- ebt0[[tx]]
+       
+       pc <- tryCatch({
+         m <- predictCoverage(gene = txmod,
+                              bam.files = bam.files,
+                              fitpar = fitpar,
+                              genome = Hsapiens,
+                              model.names = "all")
+         ## Scale predicted coverage to agree with Salmon's estimated count
+         m$`1`$pred.cov$all <- m$`1`$pred.cov$all/sum(m$`1`$pred.cov$all) * 
+           genemodels$quantsf$NumReads[genemodels$quantsf$Name == tx] * avefraglength
+         m
+       }, error = function(e) NULL)
+       pc
+     })
+     
+     junctionlist <- lapply(txlist, function(tx) {
+       txmod <- sort(ebt0[[tx]])
+       junctions <- GenomicRanges::setdiff(range(txmod), txmod)
+       if (all(strand(txmod) == "+")) {
+         junctionpos <- cumsum(width(txmod))
+         junctionpos <- junctionpos[-length(junctionpos)]
+         junctioncov <- as.numeric(pred.cov[[tx]]$"1"$pred.cov$all)[junctionpos]
+       } else if (all(strand(txmod) == "-")) {
+         junctionpos <- cumsum(width(rev(txmod)))
+         junctionpos <- junctionpos[-length(junctionpos)]
+         junctioncov <- as.numeric(pred.cov[[tx]]$"1"$pred.cov$all)[junctionpos]
+         junctioncov <- rev(junctioncov)
+       } else {
+         stop("Unknown or mixed strand")
+       }
+       mcols(junctions)$coverage <- junctioncov
+       junctions
+     })
+     
+     
+     jl <- do.call(rbind, lapply(junctionlist, as.data.frame)) %>% 
+       dplyr::group_by(seqnames, start, end, width, strand) %>%
+       dplyr::summarize(coverage = sum(coverage, na.rm = TRUE)) %>% ungroup() %>%
+       dplyr::mutate(coverage = replace(coverage, is.na(coverage), 0))
+     
+     jl <- dplyr::left_join(jl, genemodels$jcov) %>%
+       dplyr::mutate(uniqreads = replace(uniqreads, is.na(uniqreads), 0),
+                     mmreads = replace(mmreads, is.na(mmreads), 0)) %>%
+       dplyr::mutate(scaledcoverage = coverage/sum(coverage, na.rm = TRUE) * sum(uniqreads, na.rm = TRUE)) %>%
+       dplyr::mutate(tot_coverage = sum(coverage, na.rm = TRUE),
+                     tot_reads = sum(uniqreads, na.rm = TRUE)) %>%
+       dplyr::mutate(prop_pval = calc_prop_p(coverage, uniqreads, tot_coverage, tot_reads)) %>%
+       dplyr::mutate(junctionid = paste0("J", seq_len(length(scaledcoverage)))) %>% 
+       dplyr::mutate(difference = uniqreads - scaledcoverage) %>%
+       dplyr::mutate(ranking = order(order(difference))) %>%
+       dplyr::select(junctionid, everything())
+     
+     pdf(paste0(outdir, "/", currgene, ".pdf"), width = 12, height = 10)
+     tryCatch({
+       plot_tracks(mygene = currgene, genemodels = genemodels$genemodels_exon, 
+                   genemodels2 = genemodels$genemodels_cds, 
+                   gtf_file = NULL, rnaseq_datafiles = structure(bigwig, names = "s1"), 
+                   rnaseq_condition = structure("g1", names = "s1"), show_chr = NULL, 
+                   min_coord = NULL, max_coord = NULL, 
+                   pdf_filename = NULL, pdf_width = 7, pdf_height = 7)
+     }, error = function(e) message(e))
+     
+     grid.newpage()
+     grid.table(genemodels$quantsf %>% dplyr::filter(Name %in% txlist))
+     
+     grid.newpage()
+     grid.table(jl %>% dplyr::select(junctionid, seqnames, start, end, width, strand, 
+                                     uniqreads, mmreads, scaledcoverage, prop_pval))
+     
+     print(ggplot(jl, aes(x = scaledcoverage, y = uniqreads, label = junctionid)) + 
+             geom_point(size = 4) + geom_label_repel() + 
+             geom_abline(intercept = 0, slope = 1) + 
+             ggtitle(paste0("score = ", round(sum(abs(jl$uniqreads - jl$scaledcoverage), 
+                                                  na.rm = TRUE)/sum(jl$uniqreads, na.rm = TRUE), 2))) + 
+             xlab("Scaled predicted coverage") + ylab("Number of uniquely mapped reads"))
+     dev.off()
+     
+     write.table(jl %>%
+                   dplyr::mutate(coverage = round(coverage, 2),
+                                 scaledcoverage = round(scaledcoverage, 2),
+                                 difference = round(difference, 2)), 
+                 file = paste0(outdir, "/", gene, ".txt"),
+                 quote = FALSE, row.names = FALSE, col.names = TRUE, sep = "\t")
+     print(as.data.frame(jl))
+     
+     saveRDS(NULL, paste0(checkdir, "/", currgene, ".rds"))
+   }
+ }, mc.preschedule = FALSE, mc.cores = ncores)
ENST00000418259
ENST00000377264
ENST00000421419
ENST00000472525
ENST00000461701
ENST00000461955
Joining, by = c("seqnames", "start", "end", "strand")
   junctionid seqnames    start      end width strand   coverage uniqreads
1          J1       11 64895210 64895289    80      -  11.332919         1
2          J2       11 64895443 64896461  1019      -  19.843971        16
3          J3       11 64896617 64896747   131      -  22.930070        10
4          J4       11 64896848 64914208 17361      -   4.337538         0
5          J5       11 64896870 64897411   542      -  26.531132         8
6          J6       11 64897495 64897670   176      -  37.647297        33
7          J7       11 64897744 64897838    95      -  37.558446        53
8          J8       11 64897975 64898085   111      -  15.635933         9
9          J9       11 64898171 64898260    90      -  26.979608        22
10        J10       11 64898363 64898635   273      -  45.411478        33
11        J11       11 64898843 64900493  1651      -  14.943940         7
12        J12       11 64900630 64900883   254      -   9.345820        14
13        J13       11 64901093 64901961   869      -  35.300372        23
14        J14       11 64902177 64902259    83      -  13.967517         8
15        J15       11 64902387 64902509   123      -   8.585112         1
16        J16       11 64902387 64902515   129      -   4.919157         0
17        J17       11 64902681 64903287   607      -  65.488312        31
18        J18       11 64903365 64903589   225      -  96.367101       103
19        J19       11 64903661 64905562  1902      - 101.350172        90
20        J20       11 64905656 64905741    86      -  81.017153        79
21        J21       11 64905849 64906112   264      -  69.161187        43
22        J22       11 64906194 64906333   140      -  56.040686        29
23        J23       11 64906534 64906664   131      -  37.285406        32
24        J24       11 64906816 64907254   439      -  59.176965        32
25        J25       11 64907440 64907524    85      -  60.707857         2
26        J26       11 64907665 64907747    83      -  80.467260        26
27        J27       11 64907891 64908990  1100      - 110.506627        46
28        J28       11 64909151 64909270   120      -  78.273746        45
29        J29       11 64909368 64909680   313      -  52.196568        32
30        J30       11 64909925 64910039   115      -   1.707962         0
31        J31       11 64910196 64910615   420      -  12.882351         4
32        J32       11 64910709 64910806    98      -  15.365142        11
33        J33       11 64910955 64911037    83      -  18.440121         5
34        J34       11 64911276 64911841   566      -  24.834727         6
35        J35       11 64911983 64912084   102      -  37.062853        36
36        J36       11 64912250 64912326    77      -  42.525418         8
37        J37       11 64912424 64913037   614      -  37.473889        10
38        J38       11 64913137 64913265   129      -  15.300888         9
39        J39       11 64913402 64913820   419      -  11.168840        12
40        J40       11 64913924 64914080   157      -  12.946584        20
41        J41       11 64914234 64914337   104      -   6.023851         0
42        J42       11 64914501 64916936  2436      -   0.000000         0
43        J43       11 64914501 64916964  2464      -  30.235771        17
   mmreads scaledcoverage tot_coverage tot_reads    prop_pval  difference
1        0       7.066261     1549.278       966 5.749718e-02  -6.0662605
2        0      12.373041     1549.278       966 5.486508e-01   3.6269594
3        0      14.297273     1549.278       966 4.387543e-01  -4.2972734
4        0       2.704526     1549.278       966 2.493494e-01  -2.7045259
5        0      16.542595     1549.278       966 9.341728e-02  -8.5425946
6        0      23.473705     1549.278       966 1.829058e-01   9.5262950
7        0      23.418305     1549.278       966 9.637787e-05  29.5816951
8        0       9.749260     1549.278       966 1.000000e+00  -0.7492600
9        0      16.822227     1549.278       966 4.249548e-01   5.1777732
10       0      28.314799     1549.278       966 5.735653e-01   4.6852015
11       0       9.317791     1549.278       966 6.825862e-01  -2.3177909
12       0       5.827272     1549.278       966 5.258094e-02   8.1727283
13       0      22.010359     1549.278       966 9.761854e-01   0.9896412
14       0       8.708975     1549.278       966 1.000000e+00  -0.7089749
15       0       5.352958     1549.278       966 1.466966e-01  -4.3529579
16       0       3.067175     1549.278       966 1.973674e-01  -3.0671748
17       0      40.833033     1549.278       966 2.356052e-01  -9.8330328
18       0      60.086463     1549.278       966 8.308027e-05  42.9135372
19       0      63.193489     1549.278       966 1.329095e-02  26.8065109
20       0      50.515519     1549.278       966 4.196781e-03  28.4844809
21       0      43.123131     1549.278       966 1.000000e+00  -0.1231305
22       0      34.942283     1549.278       966 4.735024e-01  -5.9422835
23       0      23.248060     1549.278       966 2.205593e-01   8.7519399
24       0      36.897805     1549.278       966 5.809349e-01  -4.8978051
25       0      37.852341     1549.278       966 1.386586e-08 -35.8523413
26       0      50.172652     1549.278       966 3.390979e-03 -24.1726521
27       2      68.902688     1549.278       966 2.092888e-02 -22.9026884
28       0      48.804960     1549.278       966 7.262657e-01  -3.8049600
29       0      32.545413     1549.278       966 1.000000e+00  -0.5454133
30       0       1.064942     1549.278       966 8.061267e-01  -1.0649419
31       0       8.032356     1549.278       966 3.192510e-01  -4.0323564
32       0       9.580417     1549.278       966 8.802085e-01   1.4195828
33       0      11.497717     1549.278       966 1.351016e-01  -6.4977171
34       0      15.484859     1549.278       966 4.656279e-02  -9.4848585
35       0      23.109295     1549.278       966 6.934341e-02  12.8907054
36       0      26.515293     1549.278       966 1.441022e-03 -18.5152933
37       0      23.365582     1549.278       966 1.983269e-02 -13.3655823
38       0       9.540353     1549.278       966 1.000000e+00  -0.5403535
39       0       6.963955     1549.278       966 2.641773e-01   5.0360454
40       0       8.072407     1549.278       966 1.355881e-02  11.9275934
41       0       3.755969     1549.278       966 1.282604e-01  -3.7559693
42       0       0.000000     1549.278       966          NaN   0.0000000
43       0      18.852497     1549.278       966 8.464912e-01  -1.8524974
   ranking
1       10
2       31
3       14
4       19
5        8
6       37
7       42
8       23
9       34
10      32
11      20
12      35
13      29
14      24
15      13
16      18
17       6
18      43
19      40
20      41
21      27
22      11
23      36
24      12
25       1
26       2
27       3
28      16
29      25
30      22
31      15
32      30
33       9
34       7
35      39
36       4
37       5
38      26
39      33
40      38
41      17
42      28
43      21
[[1]]
NULL

> 
> saveRDS(NULL, paste0(checkdir, "/", gene, ".rds"))
> sessionInfo()
R version 3.4.0 (2017-04-21)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 14.04.5 LTS

Matrix products: default
BLAS: /usr/local/R/R-3.4.0/lib/libRblas.so
LAPACK: /usr/local/R/R-3.4.0/lib/libRlapack.so

locale:
 [1] LC_CTYPE=en_CA.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_CA.UTF-8        LC_COLLATE=en_CA.UTF-8    
 [5] LC_MONETARY=en_CA.UTF-8    LC_MESSAGES=en_CA.UTF-8   
 [7] LC_PAPER=en_CA.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_CA.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
 [1] grid      stats4    parallel  stats     graphics  grDevices utils    
 [8] datasets  methods   base     

other attached packages:
 [1] Gviz_1.20.0                           
 [2] gridExtra_2.3                         
 [3] ggrepel_0.7.0                         
 [4] cowplot_0.8.0                         
 [5] ggplot2_2.2.1                         
 [6] BSgenome.Hsapiens.NCBI.GRCh38_1.3.1000
 [7] BSgenome_1.44.2                       
 [8] rtracklayer_1.36.4                    
 [9] GenomicAlignments_1.12.2              
[10] Rsamtools_1.28.0                      
[11] Biostrings_2.44.2                     
[12] XVector_0.16.0                        
[13] SummarizedExperiment_1.6.5            
[14] DelayedArray_0.2.7                    
[15] matrixStats_0.52.2                    
[16] Biobase_2.36.2                        
[17] GenomicRanges_1.28.5                  
[18] GenomeInfoDb_1.12.2                   
[19] IRanges_2.10.3                        
[20] S4Vectors_0.14.5                      
[21] BiocGenerics_0.22.0                   
[22] alpine_1.2.0                          
[23] dplyr_0.7.4                           

loaded via a namespace (and not attached):
 [1] ProtGenerics_1.8.0            bitops_1.0-6                 
 [3] bit64_0.9-7                   RColorBrewer_1.1-2           
 [5] httr_1.3.1                    tools_3.4.0                  
 [7] backports_1.1.1               R6_2.2.2                     
 [9] rpart_4.1-11                  Hmisc_4.0-3                  
[11] DBI_0.7                       lazyeval_0.2.0               
[13] colorspace_1.3-2              nnet_7.3-12                  
[15] curl_2.8.1                    bit_1.1-12                   
[17] compiler_3.4.0                graph_1.54.0                 
[19] htmlTable_1.9                 scales_0.5.0                 
[21] checkmate_1.8.4               RBGL_1.52.0                  
[23] speedglm_0.3-2                stringr_1.2.0                
[25] digest_0.6.12                 foreign_0.8-69               
[27] base64enc_0.1-3               dichromat_2.0-0              
[29] pkgconfig_2.0.1               htmltools_0.3.6              
[31] ensembldb_2.0.4               htmlwidgets_0.9              
[33] rlang_0.1.2                   RSQLite_2.0                  
[35] BiocInstaller_1.26.1          shiny_1.0.5                  
[37] bindr_0.1                     BiocParallel_1.10.1          
[39] acepack_1.4.1                 VariantAnnotation_1.22.3     
[41] RCurl_1.95-4.8                magrittr_1.5                 
[43] GenomeInfoDbData_0.99.0       Formula_1.2-2                
[45] Matrix_1.2-11                 Rcpp_0.12.13                 
[47] munsell_0.4.3                 stringi_1.1.5                
[49] yaml_2.1.14                   MASS_7.3-47                  
[51] zlibbioc_1.22.0               plyr_1.8.4                   
[53] AnnotationHub_2.8.2           blob_1.1.0                   
[55] lattice_0.20-35               splines_3.4.0                
[57] GenomicFeatures_1.28.5        knitr_1.17                   
[59] biomaRt_2.32.1                XML_3.98-1.9                 
[61] glue_1.1.1                    biovizBase_1.24.0            
[63] latticeExtra_0.6-28           data.table_1.10.4            
[65] httpuv_1.3.5                  gtable_0.2.0                 
[67] assertthat_0.2.0              mime_0.5                     
[69] xtable_1.8-2                  AnnotationFilter_1.0.0       
[71] survival_2.41-3               tibble_1.3.4                 
[73] AnnotationDbi_1.38.2          memoise_1.1.0                
[75] bindrcpp_0.2                  cluster_2.0.6                
[77] interactiveDisplayBase_1.14.0
> date()
[1] "Thu Nov  2 16:15:16 2017"
> 
> 
> proc.time()
   user  system elapsed 
 57.340   8.937 313.860 
