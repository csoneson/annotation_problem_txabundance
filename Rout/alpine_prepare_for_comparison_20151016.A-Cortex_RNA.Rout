
R version 3.4.0 (2017-04-21) -- "You Stupid Darkness"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> args <- (commandArgs(trailingOnly = TRUE))
> for (i in 1:length(args)) {
+   eval(parse(text = args[[i]]))
+ }
> 
> print(gtf)
[1] "/home/Shared/data/annotation/Human/Ensembl_GRCh38.90/gtf/Homo_sapiens.GRCh38.90.gtf"
> print(junctioncovSTAR) ## Junction reads from STAR
[1] "STAR/20151016.A-Cortex_RNA/20151016.A-Cortex_RNA_SJ.out.tab"
> print(junctioncovSalmon) ## Salmon quantifications
[1] "alpine/20151016.A-Cortex_RNA/scaled_junction_coverage_Salmon.rds"
> print(junctioncovSalmonBWA) ## Salmon quantifications in alignment mode (after BWA)
[1] "alpine/20151016.A-Cortex_RNA/scaled_junction_coverage_SalmonBWA.rds"
> print(junctioncovSalmonCDS) ## Salmon quantifications based on CDSs only
[1] "alpine/20151016.A-Cortex_RNA/scaled_junction_coverage_SalmonCDS.rds"
> print(junctioncovhera) ## Hera quantifications
[1] "alpine/20151016.A-Cortex_RNA/scaled_junction_coverage_hera.rds"
> print(junctioncovkallisto) ## kallisto quantifications
[1] "alpine/20151016.A-Cortex_RNA/scaled_junction_coverage_kallisto.rds"
> print(junctioncovRSEM) ## RSEM quantifications
[1] "alpine/20151016.A-Cortex_RNA/scaled_junction_coverage_RSEM.rds"
> print(junctioncovStringTie) ## StringTie quantifications
[1] "alpine/20151016.A-Cortex_RNA/scaled_junction_coverage_StringTie.rds"
> print(junctioncovNanopore) ## If present, nanopore results
[1] ""
> print(outrds)
[1] "alpine/20151016.A-Cortex_RNA/alpine_genemodels.rds"
> 
> suppressPackageStartupMessages(library(dplyr))
> suppressPackageStartupMessages(library(ggplot2))
> suppressPackageStartupMessages(library(rtracklayer))
> source("Rscripts/plot_tracks.R")
> 
> ## Create gene models for Gviz visualization
> options(ucscChromosomeNames = FALSE)
> genemodels_exon <- create_genemodels(gtf, seltype = "exon")
> genemodels_cds <- create_genemodels(gtf, seltype = "CDS")
> 
> jcov <- read.delim(junctioncovSTAR, 
+                    header = FALSE, as.is = TRUE)
> colnames(jcov) <- c("seqnames", "start", "end", "strand", "motif", "annot", 
+                     "uniqreads", "mmreads", "maxoverhang")
> jcov <- jcov %>% dplyr::mutate(strand = replace(strand, strand == 1, "+")) %>%
+   dplyr::mutate(strand = replace(strand, strand == 2, "-")) %>%
+   dplyr::select(seqnames, start, end, strand, uniqreads, mmreads)
> 
> jcovnostrand <- jcov %>% group_by(seqnames, start, end) %>%
+   dplyr::summarize(uniqreads = sum(uniqreads), 
+                    mmreads = sum(mmreads)) %>%
+   dplyr::mutate(strand = "*") %>% dplyr::ungroup() %>%
+   dplyr::select(seqnames, start, end, strand, uniqreads, mmreads) %>%
+   as.data.frame()
> jcov <- rbind(jcov, jcovnostrand)
> 
> ## Read and merge junction coverages predicted by each method
> jcovscaled <- do.call(rbind, list(readRDS(junctioncovSalmon)$allcovs,
+                                   readRDS(junctioncovSalmonBWA)$allcovs,
+                                   readRDS(junctioncovSalmonCDS)$allcovs,
+                                   readRDS(junctioncovhera)$allcovs,
+                                   readRDS(junctioncovkallisto)$allcovs,
+                                   readRDS(junctioncovRSEM)$allcovs,
+                                   readRDS(junctioncovStringTie)$allcovs))
> if (junctioncovNanopore != "") {
+   jcovscaled <- rbind(jcovscaled, readRDS(junctioncovNanopore)$allcovs)
+ }
> 
> jcovscaled <- jcovscaled %>%
+   dplyr::group_by(seqnames, start, end, gene) %>%
+   dplyr::mutate(transcript = paste(unique(strsplit(paste(unique(transcript), collapse = ","), ",")[[1]]), collapse = ",")) %>% 
+   dplyr::ungroup() %>% 
+   dplyr::mutate(pred.cov = replace(pred.cov, is.na(pred.cov), 0)) %>%
+   dplyr::left_join(jcov, by = c("seqnames", "start", "end", "strand")) %>%
+   dplyr::mutate(uniqreads = replace(uniqreads, is.na(uniqreads), 0),
+                 mmreads = replace(mmreads, is.na(mmreads), 0)) %>%
+   dplyr::group_by(gene, method) %>% 
+   dplyr::mutate(scaledcoverage = pred.cov/sum(pred.cov, na.rm = TRUE) * 
+                   sum(uniqreads, na.rm = TRUE)) %>%
+   dplyr::mutate(scaledcoverage = replace(scaledcoverage, is.na(scaledcoverage), 0)) %>% 
+   dplyr::mutate(score = round(sum(abs(uniqreads - scaledcoverage), na.rm = TRUE)/
+                                 sum(uniqreads, na.rm = TRUE), 2)) %>% 
+   dplyr::mutate(methodscore = paste0(method, " (", score, ")")) %>%
+   dplyr::ungroup()
Warning messages:
1: Column `seqnames` joining factor and character vector, coercing into character vector 
2: Column `strand` joining factor and character vector, coercing into character vector 
> 
> j0 <- jcovscaled %>% dplyr::select(seqnames, start, end, gene) %>%
+   dplyr::distinct() %>% dplyr::group_by(gene) %>% dplyr::arrange(start) %>%
+   dplyr::mutate(junctionid = paste0("J", seq_len(length(start)))) %>%
+   dplyr::ungroup()
> 
> jcovscaled <- jcovscaled %>% dplyr::left_join(j0) %>%
+   dplyr::select(junctionid, everything(), transcript)
Joining, by = c("seqnames", "start", "end", "gene")
> 
> allquants <- do.call(rbind, list(readRDS(junctioncovSalmon)$quants,
+                                  readRDS(junctioncovSalmonBWA)$quants,
+                                  readRDS(junctioncovSalmonCDS)$quants, 
+                                  readRDS(junctioncovhera)$quants,
+                                  readRDS(junctioncovkallisto)$quants,
+                                  readRDS(junctioncovRSEM)$quants,
+                                  readRDS(junctioncovStringTie)$quants))
> 
> if (junctioncovNanopore != "") {
+   allquants <- rbind(allquants, readRDS(junctioncovNanopore)$quants)
+ }
> 
> pdf(gsub("rds$", "pdf", outrds))
> ## Score distribution
> print(ggplot(jcovscaled %>% dplyr::select(gene, method, score) %>% dplyr::distinct(), 
+              aes(x = score, color = method)) + geom_density() + theme_bw() + 
+         ggtitle("Score distribution") + 
+         scale_color_manual(values = c("#DC050C", "#7BAFDE", "#B17BA6", "#F1932D",
+                                       "#4EB265", "#CAEDAB", "#777777", "#E8601C",
+                                       "#1965B0", "#882E72", "#F6C141", "#F7EE55",
+                                       "#90C987")[seq_len(length(unique(jcovscaled$method)))]))
Warning message:
Removed 87954 rows containing non-finite values (stat_density). 
> print(ggplot(jcovscaled %>% dplyr::select(gene, method, score) %>% dplyr::distinct(), 
+              aes(x = method, y = score, color = method)) + geom_boxplot() + theme_bw() + 
+         ggtitle("Score distribution") + 
+         scale_color_manual(values = c("#DC050C", "#7BAFDE", "#B17BA6", "#F1932D",
+                                       "#4EB265", "#CAEDAB", "#777777", "#E8601C",
+                                       "#1965B0", "#882E72", "#F6C141", "#F7EE55",
+                                       "#90C987")[seq_len(length(unique(jcovscaled$method)))]))
Warning message:
Removed 87954 rows containing non-finite values (stat_boxplot). 
> ## Rank distribution (1 is best)
> print(ggplot(jcovscaled %>% dplyr::select(gene, method, score) %>% dplyr::distinct() %>% 
+                dplyr::mutate(score = replace(score, is.na(score), 10)) %>% 
+                dplyr::group_by(gene) %>% dplyr::mutate(rank = rank(score)) %>%
+                dplyr::mutate(keep = !(var(rank) == 0)) %>% dplyr::filter(keep), 
+              aes(x = rank)) + geom_bar() + facet_wrap(~method) + theme_bw())
> dev.off()
null device 
          1 
> 
> saveRDS(list(genemodels_exon = genemodels_exon, genemodels_cds = genemodels_cds,
+              jcov = jcov, jcovscaled = jcovscaled, allquants = allquants), file = outrds)
> 
> sessionInfo()
R version 3.4.0 (2017-04-21)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 14.04.5 LTS

Matrix products: default
BLAS: /usr/local/R/R-3.4.0/lib/libRblas.so
LAPACK: /usr/local/R/R-3.4.0/lib/libRlapack.so

locale:
 [1] LC_CTYPE=en_CA.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_CA.UTF-8        LC_COLLATE=en_CA.UTF-8    
 [5] LC_MONETARY=en_CA.UTF-8    LC_MESSAGES=en_CA.UTF-8   
 [7] LC_PAPER=en_CA.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_CA.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
 [1] grid      parallel  stats4    stats     graphics  grDevices utils    
 [8] datasets  methods   base     

other attached packages:
 [1] bindrcpp_0.2         Gviz_1.20.0          rtracklayer_1.36.4  
 [4] GenomicRanges_1.28.5 GenomeInfoDb_1.12.2  IRanges_2.10.3      
 [7] S4Vectors_0.14.5     BiocGenerics_0.22.0  ggplot2_2.2.1       
[10] dplyr_0.7.4         

loaded via a namespace (and not attached):
 [1] httr_1.3.1                    Biobase_2.36.2               
 [3] AnnotationHub_2.8.2           bit64_0.9-7                  
 [5] splines_3.4.0                 shiny_1.0.5                  
 [7] Formula_1.2-2                 assertthat_0.2.0             
 [9] interactiveDisplayBase_1.14.0 latticeExtra_0.6-28          
[11] blob_1.1.0                    BSgenome_1.44.2              
[13] GenomeInfoDbData_0.99.0       Rsamtools_1.28.0             
[15] yaml_2.1.14                   RSQLite_2.0                  
[17] backports_1.1.1               lattice_0.20-35              
[19] biovizBase_1.24.0             glue_1.1.1                   
[21] digest_0.6.12                 RColorBrewer_1.1-2           
[23] XVector_0.16.0                checkmate_1.8.4              
[25] colorspace_1.3-2              httpuv_1.3.5                 
[27] htmltools_0.3.6               Matrix_1.2-11                
[29] plyr_1.8.4                    XML_3.98-1.9                 
[31] pkgconfig_2.0.1               biomaRt_2.32.1               
[33] zlibbioc_1.22.0               xtable_1.8-2                 
[35] scales_0.5.0                  BiocParallel_1.10.1          
[37] htmlTable_1.9                 tibble_1.3.4                 
[39] AnnotationFilter_1.0.0        GenomicFeatures_1.28.5       
[41] SummarizedExperiment_1.6.5    nnet_7.3-12                  
[43] lazyeval_0.2.0                mime_0.5                     
[45] survival_2.41-3               magrittr_1.5                 
[47] memoise_1.1.0                 foreign_0.8-69               
[49] BiocInstaller_1.26.1          tools_3.4.0                  
[51] data.table_1.10.4             matrixStats_0.52.2           
[53] stringr_1.2.0                 munsell_0.4.3                
[55] cluster_2.0.6                 DelayedArray_0.2.7           
[57] ensembldb_2.0.4               AnnotationDbi_1.38.2         
[59] Biostrings_2.44.2             compiler_3.4.0               
[61] rlang_0.1.2                   RCurl_1.95-4.8               
[63] dichromat_2.0-0               VariantAnnotation_1.22.3     
[65] htmlwidgets_0.9               labeling_0.3                 
[67] bitops_1.0-6                  base64enc_0.1-3              
[69] gtable_0.2.0                  curl_2.8.1                   
[71] DBI_0.7                       R6_2.2.2                     
[73] GenomicAlignments_1.12.2      gridExtra_2.3                
[75] knitr_1.17                    bit_1.1-12                   
[77] bindr_0.1                     Hmisc_4.0-3                  
[79] ProtGenerics_1.8.0            stringi_1.1.5                
[81] Rcpp_0.12.13                  rpart_4.1-11                 
[83] acepack_1.4.1                
> date()
[1] "Thu Nov 23 22:49:22 2017"
> 
> proc.time()
   user  system elapsed 
535.244   7.126 543.692 
