
R Under development (unstable) (2017-12-14 r73916) -- "Unsuffered Consequences"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ################################################################################
> ##                                                                            ##
> ## Plot observed vs predicted coverage for each junction                      ##
> ##                                                                            ##
> ## Inputs:                                                                    ##
> ## * scorerds: list containing abundance estimates and characteristics for    ##
> ##             junctions, transcripts and genes, as well as gene scores.      ##
> ##             Generated by calculate_gene_scores.R                           ##
> ## * quantmethods: string containing the quantification methods to consider,  ##
> ##                 separated by commas (no spaces)                            ##
> ## * uniqjuncreadsthreshold: the total number of uniquely mapping junction    ##
> ##                           reads (in a gene), will be used to stratify the  ##
> ##                           junctions                                        ##
> ## * fracuniqjuncreadsthreshold: the fraction of reads across a junction that ##
> ##                               map uniquely, will be used to stratify the   ##
> ##                               junctions                                    ##
> ## * outrds: output rds file. The name will be used to determine the name of  ##
> ##           the output figures.                                              ##
> ##                                                                            ##
> ## Outputs:                                                                   ##
> ## * A png figure illustrating the accuracy in "detection" (presence/absence  ##
> ##   calls) of junctions                                                      ##
> ## * A png figure showing the correlation between predicted and observed      ##
> ##   junction coverages                                                       ##
> ##                                                                            ##
> ################################################################################
> 
> args <- (commandArgs(trailingOnly = TRUE))
> for (i in 1:length(args)) {
+   eval(parse(text = args[[i]]))
+ }
> 
> quantmethods <- strsplit(quantmethods, ",")[[1]]
> 
> print(scorerds)
[1] "output/20170918.A-WT_4_combined_coverages_with_scores.rds"
> print(quantmethods)
[1] "hera"          "kallisto"      "RSEM"          "Salmon"       
[5] "SalmonSTAR"    "SalmonCDS"     "SalmonKeepDup" "StringTie"    
> print(uniqjuncreadsthreshold)
[1] 25
> print(fracuniqjuncreadsthreshold)
[1] 0.75
> print(outrds)
[1] "figures/observed_vs_predicted_junction_coverage/observed_vs_predicted_junction_coverage_20170918.A-WT_4.rds"
> 
> suppressPackageStartupMessages({
+   library(dplyr)
+   library(tidyr)
+   library(ggplot2)
+   library(cowplot)
+ })
> 
> ## Read combined coverage table
> x <- readRDS(scorerds)
> x <- x$junctions
> 
> ## Extract required information
> y <- x %>% dplyr::select(gene, junctionid, method, pred.cov, scaled.cov, 
+                          uniqreads, mmreads, fracunique) %>%
+   tidyr::gather(covtype, coverage, pred.cov, scaled.cov) %>%
+   dplyr::mutate(covtype = replace(covtype, covtype == "pred.cov", "Predicted coverage"),
+                 covtype = replace(covtype, covtype == "scaled.cov", "Scaled predicted coverage")) %>%
+   dplyr::filter(method %in% quantmethods)
> 
> ## Remove a few extreme outliers
> print(sum(y$coverage >= (2 * max(y$uniqreads))))
[1] 0
> y <- y %>% dplyr::filter(coverage < (2 * max(uniqreads)))
> 
> ## ========================================================================== ##
> ## Compare predicted coverage to observed coverage in terms of being =0 or >0
> z <- y %>% dplyr::filter(covtype == "Predicted coverage") %>%
+   dplyr::mutate(coverage = round(coverage)) %>%
+   dplyr::mutate(highfracunique = fracunique > fracuniqjuncreadsthreshold) %>%
+   dplyr::group_by(gene, method) %>% 
+   dplyr::mutate(totaluniqreads = sum(uniqreads)) %>% dplyr::ungroup() %>%
+   dplyr::mutate(hightotaluniqreads = (totaluniqreads > uniqjuncreadsthreshold))
> 
> ## Overall
> g1 <- z %>% dplyr::group_by(method) %>% 
+   dplyr::summarize(obs0pred0 = mean(coverage == 0 & uniqreads == 0),
+                    obspospred0 = mean(coverage == 0 & uniqreads > 0),
+                    obs0predlow = mean(coverage > 0 & coverage <= 5 & uniqreads == 0),
+                    obs0predhigh = mean(coverage > 5 & uniqreads == 0),
+                    obspospredpos = mean(coverage > 0 & uniqreads > 0)) %>%
+   tidyr::gather(classif, fraction, -method) %>%
+   dplyr::mutate(classif = replace(classif, classif == "obs0pred0", "Obs = 0, Pred = 0"),
+                 classif = replace(classif, classif == "obspospred0", "Obs > 0, Pred = 0"),
+                 classif = replace(classif, classif == "obs0predlow", "Obs = 0, 0 < Pred <= 5"),
+                 classif = replace(classif, classif == "obs0predhigh", "Obs = 0, Pred > 5"),
+                 classif = replace(classif, classif == "obspospredpos", "Obs > 0, Pred > 0")) %>%
+   dplyr::mutate(classif = factor(classif, levels = c("Obs > 0, Pred = 0", "Obs = 0, Pred > 5",
+                                                      "Obs = 0, 0 < Pred <= 5",
+                                                      "Obs = 0, Pred = 0", "Obs > 0, Pred > 0"))) %>%
+   ggplot(aes(x = method, y = fraction, fill = classif)) + 
+   geom_bar(position = "fill", stat = "identity") + theme_bw() + 
+   scale_fill_manual(values = c(`Obs > 0, Pred > 0` = "#000099", 
+                                `Obs = 0, Pred = 0` = "#8080ff",
+                                `Obs = 0, 0 < Pred <= 5` = "#ffc6b3",
+                                `Obs = 0, Pred > 5` = "#ff6633",
+                                `Obs > 0, Pred = 0` = "#992600"), name = "") + 
+   xlab("") + ylab("Fraction of junctions") + 
+   theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
> 
> ## Split by total number of unique reads
> g2 <- z %>% dplyr::group_by(method, hightotaluniqreads) %>% 
+   dplyr::summarize(obs0pred0 = mean(coverage == 0 & uniqreads == 0),
+                    obspospred0 = mean(coverage == 0 & uniqreads > 0),
+                    obs0predlow = mean(coverage > 0 & coverage <= 5 & uniqreads == 0),
+                    obs0predhigh = mean(coverage > 5 & uniqreads == 0),
+                    obspospredpos = mean(coverage > 0 & uniqreads > 0)) %>%
+   tidyr::gather(classif, fraction, -method, -hightotaluniqreads) %>%
+   dplyr::mutate(classif = replace(classif, classif == "obs0pred0", "Obs = 0, Pred = 0"),
+                 classif = replace(classif, classif == "obspospred0", "Obs > 0, Pred = 0"),
+                 classif = replace(classif, classif == "obs0predlow", "Obs = 0, 0 < Pred <= 5"),
+                 classif = replace(classif, classif == "obs0predhigh", "Obs = 0, Pred > 5"),
+                 classif = replace(classif, classif == "obspospredpos", "Obs > 0, Pred > 0")) %>%
+   dplyr::mutate(classif = factor(classif, levels = c("Obs > 0, Pred = 0", "Obs = 0, Pred > 5",
+                                                      "Obs = 0, 0 < Pred <= 5",
+                                                      "Obs = 0, Pred = 0", "Obs > 0, Pred > 0"))) %>%
+   dplyr::mutate(hightotaluniqreads = replace(hightotaluniqreads, hightotaluniqreads == "TRUE", 
+                                              paste0("Total unique junction reads > ", 
+                                                     uniqjuncreadsthreshold)),
+                 hightotaluniqreads = replace(hightotaluniqreads, hightotaluniqreads == "FALSE", 
+                                              paste0("Total unique junction reads <= ", 
+                                                     uniqjuncreadsthreshold))) %>%
+   ggplot(aes(x = method, y = fraction, fill = classif)) + 
+   geom_bar(position = "fill", stat = "identity") + theme_bw() + 
+   scale_fill_manual(values = c(`Obs > 0, Pred > 0` = "#000099", 
+                                `Obs = 0, Pred = 0` = "#8080ff",
+                                `Obs = 0, 0 < Pred <= 5` = "#ffc6b3",
+                                `Obs = 0, Pred > 5` = "#ff6633",
+                                `Obs > 0, Pred = 0` = "#992600"), name = "") + 
+   xlab("") + ylab("Fraction of junctions") + facet_wrap(~ hightotaluniqreads, nrow = 1) + 
+   theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
> 
> ## Split by fraction unique
> g3 <- z %>% dplyr::group_by(method, highfracunique) %>% 
+   dplyr::summarize(obs0pred0 = mean(coverage == 0 & uniqreads == 0),
+                    obspospred0 = mean(coverage == 0 & uniqreads > 0),
+                    obs0predlow = mean(coverage > 0 & coverage <= 5 & uniqreads == 0),
+                    obs0predhigh = mean(coverage > 5 & uniqreads == 0),
+                    obspospredpos = mean(coverage > 0 & uniqreads > 0)) %>%
+   tidyr::gather(classif, fraction, -method, -highfracunique) %>%
+   dplyr::mutate(classif = replace(classif, classif == "obs0pred0", "Obs = 0, Pred = 0"),
+                 classif = replace(classif, classif == "obspospred0", "Obs > 0, Pred = 0"),
+                 classif = replace(classif, classif == "obs0predlow", "Obs = 0, 0 < Pred <= 5"),
+                 classif = replace(classif, classif == "obs0predhigh", "Obs = 0, Pred > 5"),
+                 classif = replace(classif, classif == "obspospredpos", "Obs > 0, Pred > 0")) %>%
+   dplyr::mutate(classif = factor(classif, levels = c("Obs > 0, Pred = 0", "Obs = 0, Pred > 5",
+                                                      "Obs = 0, 0 < Pred <= 5",
+                                                      "Obs = 0, Pred = 0", "Obs > 0, Pred > 0"))) %>%
+   dplyr::mutate(highfracunique = replace(highfracunique, highfracunique == "TRUE", 
+                                              paste0("Fraction unique reads > ",
+                                                     fracuniqjuncreadsthreshold)),
+                 highfracunique = replace(highfracunique, highfracunique == "FALSE", 
+                                              paste0("Fraction unique reads <= ",
+                                                     fracuniqjuncreadsthreshold))) %>%
+   ggplot(aes(x = method, y = fraction, fill = classif)) + 
+   geom_bar(position = "fill", stat = "identity") + theme_bw() + 
+   scale_fill_manual(values = c(`Obs > 0, Pred > 0` = "#000099", 
+                                `Obs = 0, Pred = 0` = "#8080ff",
+                                `Obs = 0, 0 < Pred <= 5` = "#ffc6b3",
+                                `Obs = 0, Pred > 5` = "#ff6633",
+                                `Obs > 0, Pred = 0` = "#992600"), name = "") + 
+   xlab("") + ylab("Fraction of junctions") + facet_wrap(~ highfracunique, nrow = 1) + 
+   theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
> 
> png(gsub("\\.rds$", "_detection.png", outrds), width = 7, height = 9, unit = "in", res = 300)
> cowplot::plot_grid(g1, 
+                    g2 + guides(fill = FALSE),
+                    g3 + guides(fill = FALSE),
+                    ncol = 1, labels = c("A", "B", "C"))
> dev.off()
null device 
          1 
> 
> ## ========================================================================== ##
> ## Scatter plots
> ## ========================================================================== ##
> ## Calculate correlations
> corrs <- y %>% dplyr::group_by(method, covtype) %>% 
+   dplyr::summarize(pearson = signif(cor(uniqreads, coverage, method = "pearson", 
+                                         use = "pairwise.complete.obs"), 3),
+                    spearman = signif(cor(uniqreads, coverage, method = "spearman", 
+                                          use = "pairwise.complete.obs"), 3))
> 
> gg <- ggplot(y, aes(x = uniqreads, y = coverage)) + 
+   geom_abline(intercept = 0, slope = 1, color = "black") + 
+   geom_point(alpha = 0.3, size = 0.3, aes(color = (fracunique < fracuniqjuncreadsthreshold))) + 
+   geom_label(data = corrs, x = -Inf, y = Inf, hjust = -0.05, vjust = 1.1, 
+              aes(label = paste0("Pearson: ", pearson, "\nSpearman: ", spearman))) + 
+   facet_grid(method ~ covtype) + 
+   xlab("Number of uniquely mapped reads spanning junction") + 
+   ylab("Predicted number of reads spanning junction") + 
+   scale_color_manual(name = paste0("Fraction\nuniquely mapping\nreads < ", 
+                                    fracuniqjuncreadsthreshold), 
+                      values = c(`TRUE` = "red", `FALSE` = "blue")) + 
+   guides(color = guide_legend(override.aes = list(size = 3, alpha = 1))) + 
+   theme_bw()
> 
> ## Original scale
> png(gsub("rds$", "png", outrds), width = 7, height = 15, unit = "in", res = 300)
> print(gg)
> dev.off()
null device 
          1 
> 
> ## Square-root scale
> png(gsub("\\.rds$", "_sqrt.png", outrds), width = 7, height = 15, unit = "in", res = 300)
> print(gg + scale_x_sqrt() + scale_y_sqrt())
> dev.off()
null device 
          1 
> 
> 
> saveRDS(list(junctionscatter = gg), outrds)
> 
> date()
[1] "Sun Jul 22 10:21:43 2018"
> sessionInfo()
R Under development (unstable) (2017-12-14 r73916)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 16.04.4 LTS

Matrix products: default
BLAS: /usr/local/R/R-devel/lib/libRblas.so
LAPACK: /usr/local/R/R-devel/lib/libRlapack.so

locale:
 [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       
 [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   
 [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          
[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] bindrcpp_0.2.2 cowplot_0.9.2  ggplot2_2.2.1  tidyr_0.8.0    dplyr_0.7.4   

loaded via a namespace (and not attached):
 [1] Rcpp_0.12.16     bindr_0.1.1      magrittr_1.5     tidyselect_0.2.4
 [5] munsell_0.4.3    colorspace_1.3-2 R6_2.2.2         rlang_0.2.0     
 [9] stringr_1.3.0    plyr_1.8.4       tools_3.5.0      grid_3.5.0      
[13] gtable_0.2.0     lazyeval_0.2.1   assertthat_0.2.0 digest_0.6.15   
[17] tibble_1.4.2     purrr_0.2.4      reshape2_1.4.3   glue_1.2.0      
[21] labeling_0.3     stringi_1.1.7    compiler_3.5.0   pillar_1.2.1    
[25] scales_0.5.0     pkgconfig_2.0.1 
> 
> proc.time()
   user  system elapsed 
602.432  33.096 636.043 
