
R Under development (unstable) (2017-12-14 r73916) -- "Unsuffered Consequences"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ################################################################################
> ##                                                                            ##
> ## Plot performance for simulated data                                        ##
> ##                                                                            ##
> ## Inputs:                                                                    ##
> ## * scorerds: list containing abundance estimates and characteristics for    ##
> ##             junctions, transcripts and genes, as well as gene scores.      ##
> ##             Generated by calculate_gene_scores.R                           ##
> ## * truthrda: the file generated by polyester, containing true transcript    ##
> ##             abundances (or '' if not a simulated data set)                 ##
> ## * truthmodgenesrds: vector with the names of the genes whose transcripts   ##
> ##                     have been altered (or '' if not a simulated data set)  ##
> ## * gtf: gtf file, to get 3'UTR lengths                                      ##
> ## * uniqjuncreadsthreshold: the total number of uniquely mapping junction    ##
> ##                           reads (in a gene), only genes with more than     ##
> ##                           this number will be used for the comparison      ##
> ## * nthreads: number of threads to use for multithreaded calculations        ##
> ## * outrds: output file                                                      ##
> ##                                                                            ##
> ## Outputs:                                                                   ##
> ## * png figures illustrating the relative contribution of each type of       ##
> ##   transcript (contributing UTR, contributing internal structure, other)    ##
> ##   to the count and TPM of a gene                                           ##
> ##                                                                            ##
> ################################################################################
> 
> args <- (commandArgs(trailingOnly = TRUE))
> for (i in 1:length(args)) {
+   eval(parse(text = args[[i]]))
+ }
> 
> print(scorerds)
[1] "output/sim_misannotated_utr_1_combined_coverages_with_scores.rds"
> print(truthrda)
[1] "simulation/misannotated_utr/sim_counts_matrix.rda"
> print(truthmodgenesrds)
[1] "simulation/misannotated_utr/sim_misannotated_utr_1_modified_genes.rds"
> print(gtf)
[1] "/home/Shared/data/annotation/Human/Ensembl_GRCh38.90/gtf/Homo_sapiens.GRCh38.90.gtf"
> print(uniqjuncreadsthreshold)
[1] 25
> print(nthreads)
[1] 48
> print(outrds)
[1] "figures/performance_simulated_data/performance_simulated_data_sim_misannotated_utr_1.rds"
> 
> suppressPackageStartupMessages({
+   library(rtracklayer)
+   library(dplyr)
+   library(tidyr)
+   library(ggplot2)
+   library(GenomicRanges)
+   library(GenomicFeatures)
+   library(cowplot)
+   library(parallel)
+ })
> 
> scores <- readRDS(scorerds)
> load(truthrda)
> modgenes <- readRDS(truthmodgenesrds)
> gtf <- rtracklayer::import(gtf, format = "gtf")
> 
> transcripts <- scores$transcripts
> 
> ## Get the coordinates and lengths of the 3'UTR for each transcript
> utrs <- as.data.frame(gtf) %>% dplyr::filter(type == "three_prime_utr") %>%
+   dplyr::group_by(transcript_id) %>%
+   dplyr::summarize(start = min(start), end = max(end), width = sum(width), 
+                    seqnames = seqnames[1], gene_id = gene_id[1], strand = strand[1])
> 
> ## Get the total length of each transcript
> exonunions <- as.data.frame(gtf) %>% dplyr::filter(type == "exon") %>%
+   dplyr::group_by(transcript_id) %>%
+   dplyr::summarize(start = min(start), end = max(end), width = sum(width),
+                    seqnames = seqnames[1], gene_id = gene_id[1], strand = strand[1])
> 
> ## Set up data frame with information about modified transcripts.
> ## utr_fraction_of_length = fraction of artificial transcript that is made up of
> ## the 3'UTR 
> ## utr_selected = "short" or "long", depending on which of the two
> ## 3'UTRs that was used for the artificial transcript
> modtrans <- data.frame(
+   mod_transcript = grep("utrfrom", rownames(counts_matrix), value = TRUE), 
+   stringsAsFactors = FALSE) %>%
+   tidyr::separate(mod_transcript, into = c("internal_tx", "utr_tx"), 
+                   sep = "_utrfrom_", remove = FALSE) %>%
+   dplyr::mutate(internal_tx_utrlength = utrs$width[match(internal_tx, utrs$transcript_id)],
+                 utr_tx_utrlength = utrs$width[match(utr_tx, utrs$transcript_id)]) %>%
+   dplyr::mutate(gene = transcripts$gene[match(internal_tx, transcripts$transcript)]) %>%
+   dplyr::mutate(utr_selected = ifelse(internal_tx_utrlength > utr_tx_utrlength, "short", "long")) %>%
+   dplyr::mutate(utr_fraction_of_length = utr_tx_utrlength/(exonunions$width[match(internal_tx, exonunions$transcript_id)] - internal_tx_utrlength + utr_tx_utrlength))
> 
> png(gsub("\\.rds", "_utr_fraction_of_length.png", outrds), width = 6, height = 6,
+     unit = "in", res = 300)
> print(ggplot(modtrans, aes(x = utr_selected, y = utr_fraction_of_length)) + 
+         geom_boxplot(outlier.size = 0.75) + theme_bw() + 
+         xlab("Selected 3'UTR for artificial transcript") + 
+         ylab("Fraction of artificial transcript consisting of 3'UTR") + 
+         theme(axis.text = element_text(size = 13),
+               axis.title = element_text(size = 15)))
> dev.off()
null device 
          1 
>       
> ## Generate GRangesList with one entry per artificial transcript. This will be
> ## used to find the most similar annotated transcript to each artificial
> ## transcript.
> txdb <- makeTxDbFromGRanges(gtf)
Warning message:
In .get_cds_IDX(type, phase) :
  The "phase" metadata column contains non-NA values for features of type
  stop_codon. This information was ignored.
> ebt <- exonsBy(txdb, "tx", use.names = TRUE)
> utrs0 <- subset(gtf, type == "three_prime_utr")
> L <- as(mclapply(seq_len(nrow(modtrans)), function(i) {
+   ## Full UTR-contributing transcript
+   utrtx <- ebt[[modtrans$utr_tx[i]]]
+   ## Full internal structure-contributing transcript
+   inttx <- ebt[[modtrans$internal_tx[i]]]
+   ## 3'UTR of UTR-contributing transcript
+   utrutrtx <- subset(utrs0, transcript_id == modtrans$utr_tx[i])
+   ## 3'UTR of internal structure-contributing transcript
+   utrinttx <- subset(utrs0, transcript_id == modtrans$internal_tx[i])
+   GenomicRanges::reduce(GenomicRanges::union(GenomicRanges::setdiff(inttx, utrinttx), utrutrtx))
+ }, mc.preschedule = FALSE, mc.cores = nthreads), "GRangesList")
> names(L) <- modtrans$mod_transcript
> 
> ## Find overlaps between modified transcripts and annotated ones
> ol <- findOverlaps(L, ebt)
> 
> ## Find most similar transcript for each artificial transcript
> jaccards <- do.call(rbind, mclapply(seq_len(length(ol)), function(i) {
+   pin <- GenomicRanges::intersect(L[[queryHits(ol)[i]]], ebt[[subjectHits(ol)[i]]])
+   pun <- GenomicRanges::union(L[[queryHits(ol)[i]]], ebt[[subjectHits(ol)[i]]])
+   overlap <- sum(width(pin))/sum(width(pun))
+   data.frame(artificial_tx = queryHits(ol)[i], reference_tx = subjectHits(ol)[i], jaccard = overlap)
+ }, mc.preschedule = FALSE, mc.cores = nthreads))

















Execution halted
