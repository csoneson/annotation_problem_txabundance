
R Under development (unstable) (2017-12-14 r73916) -- "Unsuffered Consequences"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> args <- (commandArgs(trailingOnly = TRUE))
> for (i in 1:length(args)) {
+   eval(parse(text = args[[i]]))
+ }
> 
> print(gtf)
[1] "stringtie/sim_misannotated_utr_1/sim_misannotated_utr_1_filtered.gtf"
> print(bam)  ## used to extract "medium to highly expressed genes" to fit the bias model
[1] "STAR_stringtie_tx/sim_misannotated_utr_1/sim_misannotated_utr_1_Aligned.sortedByCoord.out.bam"
> print(readlength)
[1] 125
> print(minsize)
[1] 230
> print(maxsize)
[1] 370
> print(organism)
[1] "Homo_sapiens"
> print(genomeVersion)
[1] "GRCh38"
> print(version)
[1] 90
> print(outdir)
[1] "alpine/sim_misannotated_utr_1_stringtie_tx"
> print(subsample)
[1] TRUE
> 
> suppressPackageStartupMessages({
+   library(ensembldb)
+   library(alpine)
+   library(Rsamtools)
+   library(GenomicFeatures)
+   library(GenomicAlignments)
+   library(BSgenome.Hsapiens.NCBI.GRCh38)
+   library(dplyr)
+ })
> 
> ## Construct ensembldb object from gtf file and get TxDb
> txdb <- 
+   tryCatch({
+     ensDbFromGtf(gtf, path = outdir, organism = organism, 
+                  genomeVersion = genomeVersion, version = version)
+     EnsDb(paste0(outdir, "/", gsub("gtf", "sqlite", basename(gtf))))
+   }, error = function(e) {
+     GenomicFeatures::makeTxDbFromGFF(gtf, format = "gtf", organism = gsub("_", " ", organism))
+   })
Importing GTF file ... OK
Processing metadata ... OK
Processing genes ... 
 Attribute availability:
  o gene_id ... OK
  o gene_name ... Nope
  o entrezid ... Nope
  o gene_biotype ... Nope
OK
Processing transcripts ... 
 Attribute availability:
  o transcript_id ... OK
  o gene_id ... OK
  o source ... OK
 I can't find type=='CDS'! The resulting database will lack CDS information!
Import genomic features from the file as a GRanges object ... OK
Prepare the 'metadata' data frame ... OK
Make the TxDb object ... OK
Warning messages:
1: In ensDbFromGRanges(GTF, outfile = outfile, path = path, organism = organism,  :
   I'm missing column(s): 'gene_name','entrezid','gene_biotype'. The corresponding database column(s) will be empty!
2: In ensDbFromGRanges(GTF, outfile = outfile, path = path, organism = organism,  :
   I can't find type=='CDS'! The resulting database will lack CDS information!
> txdb
TxDb object:
# Db type: TxDb
# Supporting package: GenomicFeatures
# Data source: stringtie/sim_misannotated_utr_1/sim_misannotated_utr_1_filtered.gtf
# Organism: Homo sapiens
# Taxonomy ID: 9606
# miRBase build ID: NA
# Genome: NA
# transcript_nrow: 41868
# exon_nrow: 147817
# cds_nrow: 0
# Db created by: GenomicFeatures package from Bioconductor
# Creation time: 2018-05-20 08:59:36 +0200 (Sun, 20 May 2018)
# GenomicFeatures version at creation time: 1.31.10
# RSQLite version at creation time: 2.1.0
# DBSCHEMAVERSION: 1.2
> 
> ## Get list of transcripts
> if (class(txdb) == "EnsDb") {
+   txdf <- transcripts(txdb, return.type = "DataFrame")  ## data frame format
+   txps <- transcripts(txdb)  ## GRanges format
+ } else {
+   txps <- GenomicFeatures::transcripts(txdb, columns = c("tx_name", "gene_id"), use.names = TRUE)
+   txps$gene_id <- unlist(txps$gene_id)
+   txdf <- DataFrame(tx_id = as.character(txps$tx_name), gene_id = as.character(unlist(txps$gene_id)),
+                     tx_seq_start = as.integer(start(txps)), tx_seq_end = as.integer(end(txps)),
+                     tx_name = as.character(txps$tx_name))
+ }
> txdf
DataFrame with 41868 rows and 5 columns
                tx_id         gene_id tx_seq_start tx_seq_end         tx_name
          <character>     <character>    <integer>  <integer>     <character>
1     ENST00000473358 ENSG00000243485        29554      31097 ENST00000473358
2     ENST00000469289 ENSG00000243485        30267      31109 ENST00000469289
3     ENST00000606857 ENSG00000268020        52473      53312 ENST00000606857
4     ENST00000641515 ENSG00000186092        65419      71585 ENST00000641515
5     ENST00000335137 ENSG00000186092        69055      70108 ENST00000335137
...               ...             ...          ...        ...             ...
41864 ENST00000620795 ENSG00000278066        26533      27138 ENST00000620795
41865    STRG.13119.1      STRG.13119        11755      12583    STRG.13119.1
41866 ENST00000615362 ENSG00000278573        59711      60316 ENST00000615362
41867 ENST00000617983 ENSG00000276017        72411      74814 ENST00000617983
41868    STRG.13126.1      STRG.13126         2212       2419    STRG.13126.1
> txps
GRanges object with 41868 ranges and 2 metadata columns:
                    seqnames      ranges strand |         tx_name
                       <Rle>   <IRanges>  <Rle> |     <character>
  ENST00000473358          1 29554-31097      + | ENST00000473358
  ENST00000469289          1 30267-31109      + | ENST00000469289
  ENST00000606857          1 52473-53312      + | ENST00000606857
  ENST00000641515          1 65419-71585      + | ENST00000641515
  ENST00000335137          1 69055-70108      + | ENST00000335137
              ...        ...         ...    ... .             ...
  ENST00000620795 KI270731.1 26533-27138      - | ENST00000620795
     STRG.13119.1 KI270733.1 11755-12583      + |    STRG.13119.1
  ENST00000615362 KI270734.1 59711-60316      + | ENST00000615362
  ENST00000617983 KI270734.1 72411-74814      + | ENST00000617983
     STRG.13126.1 KI270748.1   2212-2419      - |    STRG.13126.1
                          gene_id
                      <character>
  ENST00000473358 ENSG00000243485
  ENST00000469289 ENSG00000243485
  ENST00000606857 ENSG00000268020
  ENST00000641515 ENSG00000186092
  ENST00000335137 ENSG00000186092
              ...             ...
  ENST00000620795 ENSG00000278066
     STRG.13119.1      STRG.13119
  ENST00000615362 ENSG00000278573
  ENST00000617983 ENSG00000276017
     STRG.13126.1      STRG.13126
  -------
  seqinfo: 37 sequences (1 circular) from an unspecified genome; no seqlengths
> 
> ## Select genes with a single isoform
> tab <- table(txdf$gene_id)
> one.iso.genes <- names(tab)[tab == 1]
> length(one.iso.genes)
[1] 7158
> length(tab)
[1] 14896
> 
> ## Get list of exons by transcript
> if (class(txdb) == "EnsDb") {
+   (ebt0 <- exonsBy(txdb, by = "tx"))
+ } else { 
+   (ebt0 <- exonsBy(txdb, by = "tx", use.names = TRUE))
+ }
GRangesList object of length 41868:
$ENST00000473358 
GRanges object with 3 ranges and 3 metadata columns:
      seqnames      ranges strand |   exon_id   exon_name exon_rank
         <Rle>   <IRanges>  <Rle> | <integer> <character> <integer>
  [1]        1 29554-30039      + |         1        <NA>         1
  [2]        1 30564-30667      + |         3        <NA>         2
  [3]        1 30976-31097      + |         4        <NA>         3

$ENST00000469289 
GRanges object with 2 ranges and 3 metadata columns:
      seqnames      ranges strand | exon_id exon_name exon_rank
  [1]        1 30267-30667      + |       2      <NA>         1
  [2]        1 30976-31109      + |       5      <NA>         2

$ENST00000606857 
GRanges object with 1 range and 3 metadata columns:
      seqnames      ranges strand | exon_id exon_name exon_rank
  [1]        1 52473-53312      + |       6      <NA>         1

...
<41865 more elements>
-------
seqinfo: 37 sequences (1 circular) from an unspecified genome; no seqlengths
> 
> ## Get transcript names for genes with a single isoform
> one.iso.txs <- txdf$tx_id[txdf$gene_id %in% one.iso.genes]
> 
> ## Extract these transcripts for use in fitting bias model
> ebt.fit <- ebt0[one.iso.txs]
> ebt.fit <- keepStandardChromosomes(ebt.fit, pruning.mode = "coarse")
> 
> ## Filter small genes and long genes
> min.bp <- 600
> max.bp <- 7000
> gene.lengths <- sum(width(ebt.fit))
> summary(gene.lengths)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
     55     459     729    1353    1548   54538 
> 
> ebt.fit <- ebt.fit[gene.lengths > min.bp & gene.lengths < max.bp]
> length(ebt.fit)
[1] 4081
> 
> ## Sample 1000 genes to use for the fitting of the bias model
> if (subsample) {
+   set.seed(1)
+   ebt.fit <- ebt.fit[sample(length(ebt.fit), 1000)]
+ }
> 
> ## Read bam file
> bam.files <- bam
> names(bam.files) <- "1"
> 
> ## Subset to medium-to-high expressed genes
> txps.fit <- sort(txps[names(ebt.fit)])
> cts <- countBam(BamFile(bam.files), param = ScanBamParam(which = txps.fit))
> mcols(txps.fit)$cts <- cts$records
> txps.fit <- txps.fit[names(ebt.fit)]
> sum(txps.fit$cts > 500 & txps.fit$cts < 10000)
[1] 770
> ebt.fit <- ebt.fit[txps.fit$cts > 500 & txps.fit$cts < 10000]
> length(ebt.fit)
[1] 770
> 
> ## Get fragment width and read length
> m <- sort(which(sapply(ebt.fit, length) > 1))
> m0 <- 0
> w <- NULL
> while(is.null(w)) {
+   w <- tryCatch({
+     m0 <- m0 + 1
+     getFragmentWidths(bam.files, ebt.fit[[m[m0]]])
+   }, error = function(e) {
+     NULL
+   })
+ }
> quantile(w, c(.025, .975))
 2.5% 97.5% 
  252   349 
> getReadLength(bam.files)
  1 
125 
> 
> ## Names of genes to retain
> gene.names <- names(ebt.fit)
> names(gene.names) <- gene.names
> 
> ## Build fragment types for selected genes
> system.time({
+   fragtypes <- lapply(gene.names, function(gene.name) {
+     buildFragtypes(exons = ebt.fit[[gene.name]],
+                    genome = Hsapiens,
+                    readlength = readlength,
+                    minsize = minsize,
+                    maxsize = maxsize,
+                    gc.str = FALSE)
+   })
+ })
    user   system  elapsed 
1226.548   34.920 1264.127 
> object.size(fragtypes)/1e6
14182.7 bytes
> 
> ## Define models to fit
> models <- list(
+   "all" = list(
+     formula = "count ~ ns(gc,knots=gc.knots,Boundary.knots=gc.bk) + 
+     ns(relpos,knots=relpos.knots,Boundary.knots=relpos.bk) + gene",
+     offset = c("fraglen", "vlmm")
+   )
+ )
> 
> ## Fit bias model
> system.time({
+   fitpar <- lapply(bam.files, function(bf) {
+     fitBiasModels(genes = ebt.fit,
+                   bam.file = bf,
+                   fragtypes = fragtypes,
+                   genome = Hsapiens,
+                   models = models,
+                   readlength = readlength,
+                   minsize = minsize,
+                   maxsize = maxsize)
+   })
+ })
    user   system  elapsed 
1558.944  721.648 2284.596 
> 
> ## Diagnostic plots
> pdf(paste0(outdir, "/alpine_fitbiasmodel_plots.pdf"))
> plotFragLen(fitpar)
> plotGC(fitpar, model = "all")
> dev.off()
null device 
          1 
> 
> ## Save bias model
> saveRDS(list(fitpar = fitpar, ebt0 = ebt0, txps = txps), 
+         file = paste0(outdir, "/alpine_fitbiasmodel.rds"))
> 
> date()
[1] "Sun May 20 09:59:04 2018"
> sessionInfo()
R Under development (unstable) (2017-12-14 r73916)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 16.04.4 LTS

Matrix products: default
BLAS: /usr/local/R/R-devel/lib/libRblas.so
LAPACK: /usr/local/R/R-devel/lib/libRlapack.so

locale:
 [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       
 [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   
 [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          
[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   

attached base packages:
[1] stats4    parallel  stats     graphics  grDevices utils     datasets 
[8] methods   base     

other attached packages:
 [1] dplyr_0.7.4                           
 [2] BSgenome.Hsapiens.NCBI.GRCh38_1.3.1000
 [3] BSgenome_1.47.5                       
 [4] rtracklayer_1.39.12                   
 [5] GenomicAlignments_1.15.13             
 [6] SummarizedExperiment_1.9.16           
 [7] DelayedArray_0.5.30                   
 [8] BiocParallel_1.13.3                   
 [9] matrixStats_0.53.1                    
[10] Rsamtools_1.31.3                      
[11] Biostrings_2.47.12                    
[12] XVector_0.20.0                        
[13] alpine_1.5.3                          
[14] ensembldb_2.3.15                      
[15] AnnotationFilter_1.3.2                
[16] GenomicFeatures_1.31.10               
[17] AnnotationDbi_1.41.5                  
[18] Biobase_2.39.2                        
[19] GenomicRanges_1.31.23                 
[20] GenomeInfoDb_1.15.5                   
[21] IRanges_2.13.28                       
[22] S4Vectors_0.17.42                     
[23] BiocGenerics_0.26.0                   

loaded via a namespace (and not attached):
 [1] progress_1.1.2         splines_3.5.0          lattice_0.20-35       
 [4] blob_1.1.1             XML_3.98-1.11          RBGL_1.55.1           
 [7] rlang_0.2.0            pillar_1.2.1           glue_1.2.0            
[10] DBI_0.8                bit64_0.9-7            bindrcpp_0.2.2        
[13] speedglm_0.3-2         GenomeInfoDbData_1.1.0 bindr_0.1.1           
[16] stringr_1.3.0          zlibbioc_1.26.0        ProtGenerics_1.11.0   
[19] memoise_1.1.0          biomaRt_2.35.13        curl_3.2              
[22] Rcpp_0.12.16           graph_1.57.1           bit_1.1-12            
[25] digest_0.6.15          stringi_1.1.7          grid_3.5.0            
[28] tools_3.5.0            bitops_1.0-6           magrittr_1.5          
[31] tibble_1.4.2           RCurl_1.95-4.10        lazyeval_0.2.1        
[34] RSQLite_2.1.0          pkgconfig_2.0.1        MASS_7.3-49           
[37] Matrix_1.2-14          prettyunits_1.0.2      assertthat_0.2.0      
[40] httr_1.3.1             R6_2.2.2               compiler_3.5.0        
> 
> proc.time()
    user   system  elapsed 
2843.484  763.804 3621.743 
