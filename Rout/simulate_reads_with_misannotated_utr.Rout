
R Under development (unstable) (2017-12-14 r73916) -- "Unsuffered Consequences"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> args <- (commandArgs(trailingOnly = TRUE))
> for (i in 1:length(args)) {
+   eval(parse(text = args[[i]]))
+ }
> 
> print(gtf)
[1] "/home/Shared/data/annotation/Human/Ensembl_GRCh38.90/gtf/Homo_sapiens.GRCh38.90.gtf"
> print(txfasta)
[1] "reference/Homo_sapiens.GRCh38.cdna.ncrna.fa"
> print(outfasta)
[1] "simulation/misannotated_utr/modified_transcripts.fa"
> print(readdir)
[1] "simulation/misannotated_utr"
> print(readbasename)
[1] "sim_misannotated_utr_1"
> print(readlen)
[1] 125
> 
> suppressPackageStartupMessages({
+   library(Biostrings)
+   library(rtracklayer)
+   library(dplyr)
+   library(polyester)
+   library(ShortRead)
+ })
> 
> gtf <- rtracklayer::import(gtf, format = "gtf")
> txfasta <- Biostrings::readDNAStringSet(txfasta)
> names(txfasta) <- gsub("\\.[0-9]+$", "", sapply(strsplit(names(txfasta), " "), .subset, 1))
> 
> ## Get the coordinates of the 3'UTR for each transcript
> utrs <- as.data.frame(gtf) %>% dplyr::filter(type == "three_prime_utr") %>%
+   dplyr::group_by(transcript_id) %>%
+   dplyr::summarize(start = min(start), end = max(end), width = sum(width), 
+                    seqnames = seqnames[1], gene_id = gene_id[1], strand = strand[1])
> 
> ## If a gene has multiple 3'UTRs starting in the same place but with different
> ## length, get the length difference
> tmp <- utrs %>% dplyr::select(-transcript_id)
> tmp <- split(tmp, tmp$gene_id)
> utr_length_diff <- sapply(tmp, function(w) {
+   if (all(w$strand == "-")) {
+     w %>% group_by(end) %>% summarize(widthdiff = max(width) - min(width)) %>% 
+       select(widthdiff) %>% max
+   } else if (all(w$strand == "+")) {
+     w %>% group_by(start) %>% summarize(widthdiff = max(width) - min(width)) %>% 
+       select(widthdiff) %>% max
+   } else {
+     0
+   }
+ })
> 
> ## Get the names of the genes with large differences in 3'UTR lengths
> genes_of_interest <- names(utr_length_diff)[utr_length_diff > 1000]
> length(genes_of_interest)
[1] 4514
> 
> ## Initialize a DNAStringSet to hold the modified transcripts
> modified_transcripts <- DNAStringSet()
> 
> ## For each of these genes, find the 3'UTRs that start in the same place but
> ## have different lengths, and get the transcripts corresponding to the shortest
> ## and longest of these 3'UTRs. Then generate a new sequence representing one of
> ## these transcripts, but with the 3'UTR replaced with that of the other
> ## transcript.
> set.seed(42)
> for (g in genes_of_interest) {
+   ## Get all 3'UTRs for the gene
+   utrsub <- subset(utrs, gene_id == g)
+   
+   ## Group 3'UTRs by their starting position
+   if (all(utrsub$strand == "-")) {
+     utrsub <- utrsub %>% dplyr::group_by(end)
+   } else {
+     utrsub <- utrsub %>% dplyr::group_by(start)
+   }
+   
+   ## Keep only starting positions with at least two 3'UTRs, and among those,
+   ## keep only the starting position with the largest difference between the
+   ## longest and shortest 3'UTR. For this position, keep the shortest and
+   ## longest 3'UTR.
+   utrsub <- utrsub %>% dplyr::mutate(n = length(width)) %>% 
+     dplyr::filter(n > 1) %>% dplyr::mutate(lengthdiff = max(width) - min(width)) %>%
+     dplyr::ungroup() %>% dplyr::filter(lengthdiff == max(lengthdiff)) %>%
+     dplyr::arrange(width) %>% dplyr::filter(row_number() %in% c(1, n()))
+   stopifnot(nrow(utrsub) == 2)
+   
+   ## Randomly choose one of the transcripts to retain as the basis, and set the
+   ## other one as the transcript to get the 3'UTR from.
+   base_tx <- sample(utrsub$transcript_id, 1)
+   utr_tx <- setdiff(utrsub$transcript_id, base_tx)
+   
+   ## Get the transcript sequence of the base transcript and the 3'UTR-providing
+   ## transcript
+   base_tx_seq <- as.character(txfasta[base_tx])
+   utr_tx_seq <- as.character(txfasta[utr_tx])
+   
+   ## Get the 3'UTR lengths for the two transcripts
+   base_tx_utr_width <- utrsub$width[utrsub$transcript_id == base_tx]
+   utr_tx_utr_width <- utrsub$width[utrsub$transcript_id == utr_tx]
+   
+   ## Get the base sequence up until the original 3'UTR
+   base_seq <- substring(base_tx_seq, first = 1, last = nchar(base_tx_seq) - base_tx_utr_width)
+   
+   ## Get the 3'UTR sequence to add
+   utr_seq <- substring(utr_tx_seq, first = nchar(utr_tx_seq) - utr_tx_utr_width + 1, last = nchar(utr_tx_seq))
+   
+   ## Generate the final modified sequence and add to the collection
+   modified_transcripts <- c(modified_transcripts,
+                             DNAStringSet(x = structure(paste0(base_seq, utr_seq), 
+                                                        names = paste0(base_tx, "_utrfrom_", utr_tx))))
+ }
> 
> ## Select additional transcripts randomly (excluding genes considered above) and
> ## assign them counts
> available_transcripts <- setdiff(names(txfasta), 
+                                  gtf$transcript_id[gtf$gene_id %in% genes_of_interest])
> set.seed(42)
> additional_transcripts <- sample(available_transcripts, size = 10000, replace = FALSE)
> additional_counts <- c(rmultinom(n = 1, size = 10e6, prob = runif(10000)))
> ## Check the number of isoforms of the genes of the selected transcripts
> table(as.data.frame(gtf) %>% dplyr::filter(type == "transcript") %>%
+         dplyr::group_by(gene_id) %>% dplyr::mutate(nbr_tx = length(transcript_id)) %>%
+         dplyr::filter(transcript_id %in% additional_transcripts) %>%
+         dplyr::select(gene_id, nbr_tx) %>% dplyr::distinct() %>% dplyr::pull(nbr_tx))

   1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16 
2156  514  447  381  365  380  345  333  294  262  233  224  186  179  145  123 
  17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32 
 103   76   73   80   49   46   44   37   25   23   20   14   11   14    7    6 
  33   34   35   36   37   38   39   40   41   44   45   46   48   50   51   55 
   7    6   11    4    6    5    4    1    2    2    2    1    1    1    2    1 
  56   58   59   61   67   71   73   78   84  103  142  170 
   2    2    1    1    1    1    2    1    1    1    1    1 
> 
> ## Generate final set of transcripts to simulate from and number of reads to generate
> transcripts_to_simulate_from <- c(modified_transcripts, txfasta[additional_transcripts])
> reads_per_transcript <- c(rep(1000, length(modified_transcripts)),
+                           additional_counts)
> 
> ## Subset to transcripts that are at least as long as the fragment length
> idx <- which(width(transcripts_to_simulate_from) >= readlen)
> transcripts_to_simulate_from <- transcripts_to_simulate_from[idx]
> reads_per_transcript <- reads_per_transcript[idx]
> 
> ## Write modified and additional transcripts to fasta file
> writeXStringSet(transcripts_to_simulate_from, 
+                 filepath = outfasta)
> 
> ## Simulate reads with polyester. Generates files sample_01_1.fasta.gz and
> ## sample_01_2.fasta.gz in the readdir
> polyester::simulate_experiment(fasta = outfasta, 
+                                outdir = readdir, 
+                                fold_changes = 1,
+                                num_reps = c(1, 1),
+                                reads_per_transcript = reads_per_transcript,
+                                size = 500,
+                                paired = TRUE,
+                                reportCoverage = FALSE,
+                                readlen = readlen,
+                                distr = "normal",
+                                fraglen = 300,
+                                fragsd = 25,
+                                strand_specific = TRUE,
+                                seed = 42,
+                                gzip = TRUE)
> 
> ## Write reads to fastq files and save list of modified genes
> saveRDS(genes_of_interest, file = paste0(readdir, "/", readbasename,
+                                          "_modified_genes.rds"))
> 
> date()
[1] "Thu May 17 21:46:45 2018"
> sessionInfo()
R Under development (unstable) (2017-12-14 r73916)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 16.04.4 LTS

Matrix products: default
BLAS: /usr/local/R/R-devel/lib/libRblas.so
LAPACK: /usr/local/R/R-devel/lib/libRlapack.so

locale:
 [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       
 [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   
 [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          
[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   

attached base packages:
[1] stats4    parallel  stats     graphics  grDevices utils     datasets 
[8] methods   base     

other attached packages:
 [1] bindrcpp_0.2.2              ShortRead_1.38.0           
 [3] GenomicAlignments_1.15.13   SummarizedExperiment_1.9.16
 [5] DelayedArray_0.5.30         matrixStats_0.53.1         
 [7] Biobase_2.39.2              Rsamtools_1.31.3           
 [9] BiocParallel_1.13.3         polyester_1.16.0           
[11] dplyr_0.7.4                 rtracklayer_1.39.12        
[13] GenomicRanges_1.31.23       GenomeInfoDb_1.15.5        
[15] Biostrings_2.47.12          XVector_0.20.0             
[17] IRanges_2.13.28             S4Vectors_0.17.42          
[19] BiocGenerics_0.26.0        

loaded via a namespace (and not attached):
 [1] Rcpp_0.12.16           RColorBrewer_1.1-2     compiler_3.5.0        
 [4] pillar_1.2.1           bindr_0.1.1            bitops_1.0-6          
 [7] tools_3.5.0            zlibbioc_1.26.0        tibble_1.4.2          
[10] lattice_0.20-35        pkgconfig_2.0.1        rlang_0.2.0           
[13] Matrix_1.2-14          GenomeInfoDbData_1.1.0 hwriter_1.3.2         
[16] grid_3.5.0             glue_1.2.0             R6_2.2.2              
[19] XML_3.98-1.11          latticeExtra_0.6-28    limma_3.35.14         
[22] magrittr_1.5           assertthat_0.2.0       logspline_2.1.9       
[25] RCurl_1.95-4.10       
> 
> proc.time()
    user   system  elapsed 
1898.468   36.868 1938.648 
