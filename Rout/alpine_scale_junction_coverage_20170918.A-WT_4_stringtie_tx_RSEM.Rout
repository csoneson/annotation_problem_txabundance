
R Under development (unstable) (2017-12-14 r73916) -- "Unsuffered Consequences"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> args <- (commandArgs(trailingOnly = TRUE))
> for (i in 1:length(args)) {
+   eval(parse(text = args[[i]]))
+ }
> 
> print(predcovrds)  ## predicted transcript and junction coverage
[1] "alpine/20170918.A-WT_4_stringtie_tx/alpine_predicted_coverage.rds"
> print(txquants)  ## transcript quantification file
[1] "RSEM_stringtie_tx/20170918.A-WT_4/20170918.A-WT_4.isoforms.results"
> print(quantreadscript)  ## script containing a function "read_quant()"
[1] "Rscripts/read_quant_rsem.R"
> print(strandspec)  ## "yes" or "no"
[1] "yes"
> print(tx2gene)  ## link transcripts to genes
[1] "reference/20170918.A-WT_4_stringtie_tx_tx2gene_withsymbol.rds"
> print(method)  ## method ID to add to the quantification table
[1] "RSEM"
> print(outrds)  ## output file
[1] "alpine/20170918.A-WT_4_stringtie_tx/scaled_junction_coverage_RSEM.rds"
> 
> suppressPackageStartupMessages({
+   library(alpine)
+   library(parallel)
+   library(dplyr)
+ })
> 
> source(quantreadscript)
> 
> predcovs <- readRDS(predcovrds)
> quants <- read_quant(file = txquants, avefraglength = predcovs[[1]]$avefraglength)
> tx2gene <- readRDS(tx2gene)
> 
> idxtx <- grep("^STRG\\.", tx2gene$tx, invert = TRUE)
> tx2gene$tx[idxtx] <- gsub("\\.[0-9]+$", "", tx2gene$tx[idxtx])
> 
> idxgene <- grep("^STRG\\.", tx2gene$gene, invert = TRUE)
> tx2gene$gene[idxgene] <- gsub("\\.[0-9]+$", "", tx2gene$gene[idxgene])
> 
> transcripts <- names(predcovs)
> names(transcripts) <- transcripts
> 
> ## Go through all transcripts and scale predicted junction coverage by the
> ## estimated abundance
> scaledcovs <- lapply(transcripts, function(tx) {
+   tryCatch({
+     ab <- quants$count[quants$transcript == tx]
+     if (length(ab) == 0 || is.na(ab)) ab <- 0  ## if the transcript is not present in the quantification file
+     m <- predcovs[[tx]]$junctions
+     m$pred.cov <- m$pred.cov / max(1e-10, sum(predcovs[[tx]]$pred.cov)) * 
+       ab * predcovs[[tx]]$avefraglength
+     as.data.frame(m) %>% dplyr::mutate(transcript = tx)
+   }, error = function(e) NULL)
+ })
