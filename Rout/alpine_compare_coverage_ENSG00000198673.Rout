
R version 3.4.0 (2017-04-21) -- "You Stupid Darkness"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> args <- (commandArgs(trailingOnly = TRUE))
> for (i in 1:length(args)) {
+   eval(parse(text = args[[i]]))
+ }
> 
> print(gene)  ## gene of interest, or file listing collection of genes (one per row)
[1] "ENSG00000198673"
> print(bam)  ## bam file
[1] "STAR/20151016.A-Cortex_RNA/20151016.A-Cortex_RNA_Aligned.sortedByCoord.out.bam"
> print(bigwig)  ## bigwig file for visualization
[1] "STARbigwig/20151016.A-Cortex_RNA_Aligned.sortedByCoord.out.bw"
> print(genemodels)  ## gene models etc (output of alpine_prepare_for_comparison.R)
[1] "alpine/alpine_genemodels.rds"
> print(biasmodels)  ## bias model object (output of alpine_fitbiasmodel.R)
[1] "alpine/alpine_fitbiasmodel.rds"
> print(ncores)  ## number of cores for parallel computations
[1] 1
> print(outdir)  ## output directory
[1] "alpine_out"
> print(checkdir)  ## directory to write (empty) rds files (time stamps)
[1] "alpine_check"
> 
> suppressPackageStartupMessages(library(dplyr))
> suppressPackageStartupMessages(library(alpine))
> suppressPackageStartupMessages(library(GenomicAlignments))
> suppressPackageStartupMessages(library(BSgenome.Hsapiens.NCBI.GRCh38))
> suppressPackageStartupMessages(library(ggplot2))
> suppressPackageStartupMessages(library(cowplot))
> suppressPackageStartupMessages(library(ggrepel))
> suppressPackageStartupMessages(library(parallel))
> suppressPackageStartupMessages(library(grid))
> suppressPackageStartupMessages(library(gridExtra))
> 
> source("Rscripts/plot_tracks.R")
> 
> calc_prop_p <- function(coverage, uniqreads, tot_coverage, tot_reads) {
+   sapply(seq_along(coverage), function(i) {
+     prop.test(x = c(coverage[i], uniqreads[i]), n = c(tot_coverage[i], tot_reads[i]),
+               alternative = "two.sided")$p.value
+   })
+ }
> 
> ## Read gene models for Gviz plot (pregenerated from gtf to save time) and
> ## Salmon quantifications
> genemodels <- readRDS(genemodels)
> 
> ## Read bias model parameters and exon-by-transcript objects
> biasmodels <- readRDS(biasmodels)
> fitpar <- biasmodels$fitpar
> ebt0 <- biasmodels$ebt0
> txps <- biasmodels$txps
> 
> ## Estimate average fragment length
> avefraglength <- sum(fitpar$`1`$fraglen.density$x * fitpar$`1`$fraglen.density$y/
+                        sum(fitpar$`1`$fraglen.density$y))
> 
> ## Load bam file 
> bam.files <- bam
> names(bam.files) <- "1"
> 
> ## Determine which gene(s) to investigate
> if (file.exists(gene)) {
+   genes <- unlist(read.delim(gene, as.is = TRUE, header = FALSE))
+ } else {
+   genes <- gene
+ }
> 
> ## Investigate each gene
> mclapply(genes, function(currgene) {
+   ## Get transcripts for gene of interest
+   txlist <- names(subset(txps, gene_id == currgene))
+   names(txlist) <- txlist
+ 
+     if (length(txlist) > 0) {
+     
+     ## Predict coverage for each transcript
+     pred.cov <- lapply(txlist, function(tx) {
+       message(tx)
+       ## Get transcript model
+       txmod <- ebt0[[tx]]
+       
+       pc <- tryCatch({
+         m <- predictCoverage(gene = txmod,
+                              bam.files = bam.files,
+                              fitpar = fitpar,
+                              genome = Hsapiens,
+                              model.names = "all")
+         ## Scale predicted coverage to agree with Salmon's estimated count
+         m$`1`$pred.cov$all <- m$`1`$pred.cov$all/sum(m$`1`$pred.cov$all) * 
+           genemodels$quantsf$NumReads[genemodels$quantsf$Name == tx] * avefraglength
+         m
+       }, error = function(e) NULL)
+       pc
+     })
+     
+     junctionlist <- lapply(txlist, function(tx) {
+       txmod <- sort(ebt0[[tx]])
+       junctions <- GenomicRanges::setdiff(range(txmod), txmod)
+       if (all(strand(txmod) == "+")) {
+         junctionpos <- cumsum(width(txmod))
+         junctionpos <- junctionpos[-length(junctionpos)]
+         junctioncov <- as.numeric(pred.cov[[tx]]$"1"$pred.cov$all)[junctionpos]
+       } else if (all(strand(txmod) == "-")) {
+         junctionpos <- cumsum(width(rev(txmod)))
+         junctionpos <- junctionpos[-length(junctionpos)]
+         junctioncov <- as.numeric(pred.cov[[tx]]$"1"$pred.cov$all)[junctionpos]
+         junctioncov <- rev(junctioncov)
+       } else {
+         stop("Unknown or mixed strand")
+       }
+       mcols(junctions)$coverage <- junctioncov
+       junctions
+     })
+     
+     
+     jl <- do.call(rbind, lapply(junctionlist, as.data.frame)) %>% 
+       dplyr::group_by(seqnames, start, end, width, strand) %>%
+       dplyr::summarize(coverage = sum(coverage, na.rm = TRUE)) %>% ungroup() %>%
+       dplyr::mutate(coverage = replace(coverage, is.na(coverage), 0))
+     
+     jl <- dplyr::left_join(jl, genemodels$jcov) %>%
+       dplyr::mutate(uniqreads = replace(uniqreads, is.na(uniqreads), 0),
+                     mmreads = replace(mmreads, is.na(mmreads), 0)) %>%
+       dplyr::mutate(scaledcoverage = coverage/sum(coverage, na.rm = TRUE) * sum(uniqreads, na.rm = TRUE)) %>%
+       dplyr::mutate(tot_coverage = sum(coverage, na.rm = TRUE),
+                     tot_reads = sum(uniqreads, na.rm = TRUE)) %>%
+       dplyr::mutate(prop_pval = calc_prop_p(coverage, uniqreads, tot_coverage, tot_reads)) %>%
+       dplyr::mutate(junctionid = paste0("J", seq_len(length(scaledcoverage)))) %>% 
+       dplyr::mutate(difference = uniqreads - scaledcoverage) %>%
+       dplyr::mutate(ranking = order(order(difference))) %>%
+       dplyr::select(junctionid, everything())
+     
+     pdf(paste0(outdir, "/", currgene, ".pdf"), width = 12, height = 10)
+     tryCatch({
+       plot_tracks(mygene = currgene, genemodels = genemodels$genemodels_exon, 
+                   genemodels2 = genemodels$genemodels_cds, 
+                   gtf_file = NULL, rnaseq_datafiles = structure(bigwig, names = "s1"), 
+                   rnaseq_condition = structure("g1", names = "s1"), show_chr = NULL, 
+                   min_coord = NULL, max_coord = NULL, 
+                   pdf_filename = NULL, pdf_width = 7, pdf_height = 7)
+     }, error = function(e) message(e))
+     
+     grid.newpage()
+     grid.table(genemodels$quantsf %>% dplyr::filter(Name %in% txlist))
+     
+     grid.newpage()
+     grid.table(jl %>% dplyr::select(junctionid, seqnames, start, end, width, strand, 
+                                     uniqreads, mmreads, scaledcoverage, prop_pval))
+     
+     print(ggplot(jl, aes(x = scaledcoverage, y = uniqreads, label = junctionid)) + 
+             geom_point(size = 4) + geom_label_repel() + 
+             geom_abline(intercept = 0, slope = 1) + 
+             ggtitle(paste0("score = ", round(sum(abs(jl$uniqreads - jl$scaledcoverage), 
+                                                  na.rm = TRUE)/sum(jl$uniqreads, na.rm = TRUE), 2))) + 
+             xlab("Scaled predicted coverage") + ylab("Number of uniquely mapped reads"))
+     dev.off()
+     
+     write.table(jl %>%
+                   dplyr::mutate(coverage = round(coverage, 2),
+                                 scaledcoverage = round(scaledcoverage, 2),
+                                 difference = round(difference, 2)), 
+                 file = paste0(outdir, "/", gene, ".txt"),
+                 quote = FALSE, row.names = FALSE, col.names = TRUE, sep = "\t")
+     print(as.data.frame(jl))
+     
+     saveRDS(NULL, paste0(checkdir, "/", currgene, ".rds"))
+   }
+ }, mc.preschedule = FALSE, mc.cores = ncores)
ENST00000416284
ENST00000551619
ENST00000550003
ENST00000549379
ENST00000551449
ENST00000552075
ENST00000549958
ENST00000548780
ENST00000549456
ENST00000547919
ENST00000550060
ENST00000548541
ENST00000500610
ENST00000547075
ENST00000547941
ENST00000550396
Joining, by = c("seqnames", "start", "end", "strand")
   junctionid seqnames    start      end  width strand    coverage uniqreads
1          J1       12 61710418 61720686  10269      -  48.2753415        68
2          J2       12 61710418 61753621  43204      - 538.4070016       352
3          J3       12 61710418 61867319 156902      -   2.2019410         2
4          J4       12 61720925 61753621  32697      -  58.3390374        41
5          J5       12 61753747 61754871   1125      - 416.9342372       268
6          J6       12 61755025 61827153  72129      -  65.5922290         0
7          J7       12 61755025 61867319 112295      - 190.2356769       296
8          J8       12 61867427 61878077  10651      -   2.8250934         0
9          J9       12 61867427 61890341  22915      -  46.0380214         0
10        J10       12 61867427 62023651 156225      -  14.1724228         0
11        J11       12 61867427 62104743 237317      -   0.0000000         0
12        J12       12 61867427 62191258 323832      -  86.8859618        92
13        J13       12 61867427 62258762 391336      -   2.6589175         4
14        J14       12 61878141 62135804 257664      -   3.0334679         0
15        J15       12 61890424 62023651 133228      -  53.0859166         0
16        J16       12 62023780 62258762 234983      -  36.4667071         1
17        J17       12 62070563 62198211 127649      -   0.2043046         0
18        J18       12 62198407 62207171   8765      -   0.2799804         0
19        J19       12 62207251 62258762  51512      -   0.2543352         0
20        J20       12 62242571 62252099   9529      -   0.0000000         0
21        J21       12 62242571 62258762  16192      -   0.0000000         0
22        J22       12 62253402 62253490     89      -   0.0000000         0
23        J23       12 62253683 62258762   5080      -   0.0000000         0
24        J24       12 62255315 62258762   3448      -   6.0759661         3
25        J25       12 62258843 62259478    636      -   0.0000000         0
26        J26       12 62258843 62260009   1167      -   1.5881584         0
27        J27       12 62258843 62260014   1172      -   1.4177060         4
28        J28       12 62258843 62267172   8330      -   0.0000000         0
29        J29       12 62258911 62259478    568      -   0.2588935         0
30        J30       12 62258911 62260014   1104      -   7.8264700         0
31        J31       12 62267247 62274139   6893      -   0.0000000         0
32        J32       12 62274302 62277524   3223      -   0.0000000         0
33        J33       12 62277630 62279105   1476      -   0.0000000         0
   mmreads scaledcoverage tot_coverage tot_reads    prop_pval  difference
1        0     34.4898409     1583.058      1131 2.503745e-04  33.5101591
2        1    384.6595643     1583.058      1131 1.239929e-01 -32.6595643
3        0      1.5731550     1583.058      1131 1.000000e+00   0.4268450
4        0     41.6797491     1583.058      1131 1.000000e+00  -0.6797491
5        0    297.8745476     1583.058      1131 1.292492e-01 -29.8745476
6        1     46.8617202     1583.058      1131 1.024280e-11 -46.8617202
7        7    135.9120004     1583.058      1131 4.119361e-21 160.0879996
8        0      2.0183601     1583.058      1131 4.135098e-01  -2.0183601
9        0     32.8914096     1583.058      1131 1.764660e-08 -32.8914096
10       0     10.1253475     1583.058      1131 3.497214e-03 -10.1253475
11       0      0.0000000     1583.058      1131          NaN   0.0000000
12       7     62.0748172     1583.058      1131 7.804442e-03  29.9251828
13       0      1.8996373     1583.058      1131 5.682371e-01   2.1003627
14       0      2.1672312     1583.058      1131 3.732731e-01  -2.1672312
15       0     37.9267088     1583.058      1131 1.209209e-09 -37.9267088
16       0     26.0532787     1583.058      1131 2.485541e-06 -25.0532787
17       0      0.1459634     1583.058      1131 1.000000e+00  -0.1459634
18       0      0.2000292     1583.058      1131 1.000000e+00  -0.2000292
19       0      0.1817072     1583.058      1131 1.000000e+00  -0.1817072
20       0      0.0000000     1583.058      1131          NaN   0.0000000
21       0      0.0000000     1583.058      1131          NaN   0.0000000
22       0      0.0000000     1583.058      1131          NaN   0.0000000
23       0      0.0000000     1583.058      1131          NaN   0.0000000
24       0      4.3409140     1583.058      1131 8.490981e-01  -1.3409140
25       0      0.0000000     1583.058      1131          NaN   0.0000000
26       0      1.1346441     1583.058      1131 7.944626e-01  -1.1346441
27       0      1.0128661     1583.058      1131 2.785020e-01   2.9871339
28       0      0.0000000     1583.058      1131          NaN   0.0000000
29       0      0.1849639     1583.058      1131 1.000000e+00  -0.1849639
30       0      5.5915442     1583.058      1131 4.496067e-02  -5.5915442
31       0      0.0000000     1583.058      1131          NaN   0.0000000
32       0      0.0000000     1583.058      1131          NaN   0.0000000
33       0      0.0000000     1583.058      1131          NaN   0.0000000
   ranking
1       32
2        4
3       28
4       13
5        5
6        1
7       33
8       10
9        3
10       7
11      18
12      31
13      29
14       9
15       2
16       6
17      17
18      14
19      16
20      19
21      20
22      21
23      22
24      11
25      23
26      12
27      30
28      24
29      15
30       8
31      25
32      26
33      27
[[1]]
NULL

> 
> saveRDS(NULL, paste0(checkdir, "/", gene, ".rds"))
> sessionInfo()
R version 3.4.0 (2017-04-21)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 14.04.5 LTS

Matrix products: default
BLAS: /usr/local/R/R-3.4.0/lib/libRblas.so
LAPACK: /usr/local/R/R-3.4.0/lib/libRlapack.so

locale:
 [1] LC_CTYPE=en_CA.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_CA.UTF-8        LC_COLLATE=en_CA.UTF-8    
 [5] LC_MONETARY=en_CA.UTF-8    LC_MESSAGES=en_CA.UTF-8   
 [7] LC_PAPER=en_CA.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_CA.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
 [1] grid      stats4    parallel  stats     graphics  grDevices utils    
 [8] datasets  methods   base     

other attached packages:
 [1] Gviz_1.20.0                           
 [2] gridExtra_2.3                         
 [3] ggrepel_0.7.0                         
 [4] cowplot_0.8.0                         
 [5] ggplot2_2.2.1                         
 [6] BSgenome.Hsapiens.NCBI.GRCh38_1.3.1000
 [7] BSgenome_1.44.2                       
 [8] rtracklayer_1.36.4                    
 [9] GenomicAlignments_1.12.2              
[10] Rsamtools_1.28.0                      
[11] Biostrings_2.44.2                     
[12] XVector_0.16.0                        
[13] SummarizedExperiment_1.6.5            
[14] DelayedArray_0.2.7                    
[15] matrixStats_0.52.2                    
[16] Biobase_2.36.2                        
[17] GenomicRanges_1.28.5                  
[18] GenomeInfoDb_1.12.2                   
[19] IRanges_2.10.3                        
[20] S4Vectors_0.14.5                      
[21] BiocGenerics_0.22.0                   
[22] alpine_1.2.0                          
[23] dplyr_0.7.4                           

loaded via a namespace (and not attached):
 [1] ProtGenerics_1.8.0            bitops_1.0-6                 
 [3] bit64_0.9-7                   RColorBrewer_1.1-2           
 [5] httr_1.3.1                    tools_3.4.0                  
 [7] backports_1.1.1               R6_2.2.2                     
 [9] rpart_4.1-11                  Hmisc_4.0-3                  
[11] DBI_0.7                       lazyeval_0.2.0               
[13] colorspace_1.3-2              nnet_7.3-12                  
[15] curl_2.8.1                    bit_1.1-12                   
[17] compiler_3.4.0                graph_1.54.0                 
[19] htmlTable_1.9                 scales_0.5.0                 
[21] checkmate_1.8.4               RBGL_1.52.0                  
[23] speedglm_0.3-2                stringr_1.2.0                
[25] digest_0.6.12                 foreign_0.8-69               
[27] base64enc_0.1-3               dichromat_2.0-0              
[29] pkgconfig_2.0.1               htmltools_0.3.6              
[31] ensembldb_2.0.4               htmlwidgets_0.9              
[33] rlang_0.1.2                   RSQLite_2.0                  
[35] BiocInstaller_1.26.1          shiny_1.0.5                  
[37] bindr_0.1                     BiocParallel_1.10.1          
[39] acepack_1.4.1                 VariantAnnotation_1.22.3     
[41] RCurl_1.95-4.8                magrittr_1.5                 
[43] GenomeInfoDbData_0.99.0       Formula_1.2-2                
[45] Matrix_1.2-11                 Rcpp_0.12.13                 
[47] munsell_0.4.3                 stringi_1.1.5                
[49] yaml_2.1.14                   MASS_7.3-47                  
[51] zlibbioc_1.22.0               plyr_1.8.4                   
[53] AnnotationHub_2.8.2           blob_1.1.0                   
[55] lattice_0.20-35               splines_3.4.0                
[57] GenomicFeatures_1.28.5        knitr_1.17                   
[59] biomaRt_2.32.1                XML_3.98-1.9                 
[61] glue_1.1.1                    biovizBase_1.24.0            
[63] latticeExtra_0.6-28           data.table_1.10.4            
[65] httpuv_1.3.5                  gtable_0.2.0                 
[67] assertthat_0.2.0              mime_0.5                     
[69] xtable_1.8-2                  AnnotationFilter_1.0.0       
[71] survival_2.41-3               tibble_1.3.4                 
[73] AnnotationDbi_1.38.2          memoise_1.1.0                
[75] bindrcpp_0.2                  cluster_2.0.6                
[77] interactiveDisplayBase_1.14.0
> date()
[1] "Thu Nov  2 16:16:05 2017"
> 
> 
> proc.time()
   user  system elapsed 
 53.437   7.246 363.710 
