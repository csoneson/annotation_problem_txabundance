
R version 3.4.0 (2017-04-21) -- "You Stupid Darkness"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> args <- (commandArgs(trailingOnly = TRUE))
> for (i in 1:length(args)) {
+   eval(parse(text = args[[i]]))
+ }
> 
> print(gene)  ## gene of interest, or file listing collection of genes (one per row)
[1] "ENSG00000151067"
> print(bam)  ## bam file
[1] "STAR/20151016.A-Cortex_RNA/20151016.A-Cortex_RNA_Aligned.sortedByCoord.out.bam"
> print(bigwig)  ## bigwig file for visualization
[1] "STARbigwig/20151016.A-Cortex_RNA_Aligned.sortedByCoord.out.bw"
> print(genemodels)  ## gene models etc (output of alpine_prepare_for_comparison.R)
[1] "alpine/alpine_genemodels.rds"
> print(biasmodels)  ## bias model object (output of alpine_fitbiasmodel.R)
[1] "alpine/alpine_fitbiasmodel.rds"
> print(ncores)  ## number of cores for parallel computations
[1] 1
> print(outdir)  ## output directory
[1] "alpine_out"
> print(checkdir)  ## directory to write (empty) rds files (time stamps)
[1] "alpine_check"
> 
> suppressPackageStartupMessages(library(dplyr))
> suppressPackageStartupMessages(library(alpine))
> suppressPackageStartupMessages(library(GenomicAlignments))
> suppressPackageStartupMessages(library(BSgenome.Hsapiens.NCBI.GRCh38))
> suppressPackageStartupMessages(library(ggplot2))
> suppressPackageStartupMessages(library(cowplot))
> suppressPackageStartupMessages(library(ggrepel))
> suppressPackageStartupMessages(library(parallel))
> suppressPackageStartupMessages(library(grid))
> suppressPackageStartupMessages(library(gridExtra))
> 
> source("Rscripts/plot_tracks.R")
> 
> calc_prop_p <- function(coverage, uniqreads, tot_coverage, tot_reads) {
+   sapply(seq_along(coverage), function(i) {
+     prop.test(x = c(coverage[i], uniqreads[i]), n = c(tot_coverage[i], tot_reads[i]),
+               alternative = "two.sided")$p.value
+   })
+ }
> 
> ## Read gene models for Gviz plot (pregenerated from gtf to save time) and
> ## Salmon quantifications
> genemodels <- readRDS(genemodels)
> 
> ## Read bias model parameters and exon-by-transcript objects
> biasmodels <- readRDS(biasmodels)
> fitpar <- biasmodels$fitpar
> ebt0 <- biasmodels$ebt0
> txps <- biasmodels$txps
> 
> ## Estimate average fragment length
> avefraglength <- sum(fitpar$`1`$fraglen.density$x * fitpar$`1`$fraglen.density$y/
+                        sum(fitpar$`1`$fraglen.density$y))
> 
> ## Load bam file 
> bam.files <- bam
> names(bam.files) <- "1"
> 
> ## Determine which gene(s) to investigate
> if (file.exists(gene)) {
+   genes <- unlist(read.delim(gene, as.is = TRUE, header = FALSE))
+ } else {
+   genes <- gene
+ }
> 
> ## Investigate each gene
> mclapply(genes, function(currgene) {
+   ## Get transcripts for gene of interest
+   txlist <- names(subset(txps, gene_id == currgene))
+   names(txlist) <- txlist
+ 
+     if (length(txlist) > 0) {
+     
+     ## Predict coverage for each transcript
+     pred.cov <- lapply(txlist, function(tx) {
+       message(tx)
+       ## Get transcript model
+       txmod <- ebt0[[tx]]
+       
+       pc <- tryCatch({
+         m <- predictCoverage(gene = txmod,
+                              bam.files = bam.files,
+                              fitpar = fitpar,
+                              genome = Hsapiens,
+                              model.names = "all")
+         ## Scale predicted coverage to agree with Salmon's estimated count
+         m$`1`$pred.cov$all <- m$`1`$pred.cov$all/sum(m$`1`$pred.cov$all) * 
+           genemodels$quantsf$NumReads[genemodels$quantsf$Name == tx] * avefraglength
+         m
+       }, error = function(e) NULL)
+       pc
+     })
+     
+     junctionlist <- lapply(txlist, function(tx) {
+       txmod <- sort(ebt0[[tx]])
+       junctions <- GenomicRanges::setdiff(range(txmod), txmod)
+       if (all(strand(txmod) == "+")) {
+         junctionpos <- cumsum(width(txmod))
+         junctionpos <- junctionpos[-length(junctionpos)]
+         junctioncov <- as.numeric(pred.cov[[tx]]$"1"$pred.cov$all)[junctionpos]
+       } else if (all(strand(txmod) == "-")) {
+         junctionpos <- cumsum(width(rev(txmod)))
+         junctionpos <- junctionpos[-length(junctionpos)]
+         junctioncov <- as.numeric(pred.cov[[tx]]$"1"$pred.cov$all)[junctionpos]
+         junctioncov <- rev(junctioncov)
+       } else {
+         stop("Unknown or mixed strand")
+       }
+       mcols(junctions)$coverage <- junctioncov
+       junctions
+     })
+     
+     
+     jl <- do.call(rbind, lapply(junctionlist, as.data.frame)) %>% 
+       dplyr::group_by(seqnames, start, end, width, strand) %>%
+       dplyr::summarize(coverage = sum(coverage, na.rm = TRUE)) %>% ungroup() %>%
+       dplyr::mutate(coverage = replace(coverage, is.na(coverage), 0))
+     
+     jl <- dplyr::left_join(jl, genemodels$jcov) %>%
+       dplyr::mutate(uniqreads = replace(uniqreads, is.na(uniqreads), 0),
+                     mmreads = replace(mmreads, is.na(mmreads), 0)) %>%
+       dplyr::mutate(scaledcoverage = coverage/sum(coverage, na.rm = TRUE) * sum(uniqreads, na.rm = TRUE)) %>%
+       dplyr::mutate(tot_coverage = sum(coverage, na.rm = TRUE),
+                     tot_reads = sum(uniqreads, na.rm = TRUE)) %>%
+       dplyr::mutate(prop_pval = calc_prop_p(coverage, uniqreads, tot_coverage, tot_reads)) %>%
+       dplyr::mutate(junctionid = paste0("J", seq_len(length(scaledcoverage)))) %>% 
+       dplyr::mutate(difference = uniqreads - scaledcoverage) %>%
+       dplyr::mutate(ranking = order(order(difference))) %>%
+       dplyr::select(junctionid, everything())
+     
+     pdf(paste0(outdir, "/", currgene, ".pdf"), width = 12, height = 10)
+     tryCatch({
+       plot_tracks(mygene = currgene, genemodels = genemodels$genemodels_exon, 
+                   genemodels2 = genemodels$genemodels_cds, 
+                   gtf_file = NULL, rnaseq_datafiles = structure(bigwig, names = "s1"), 
+                   rnaseq_condition = structure("g1", names = "s1"), show_chr = NULL, 
+                   min_coord = NULL, max_coord = NULL, 
+                   pdf_filename = NULL, pdf_width = 7, pdf_height = 7)
+     }, error = function(e) message(e))
+     
+     grid.newpage()
+     grid.table(genemodels$quantsf %>% dplyr::filter(Name %in% txlist))
+     
+     grid.newpage()
+     grid.table(jl %>% dplyr::select(junctionid, seqnames, start, end, width, strand, 
+                                     uniqreads, mmreads, scaledcoverage, prop_pval))
+     
+     print(ggplot(jl, aes(x = scaledcoverage, y = uniqreads, label = junctionid)) + 
+             geom_point(size = 4) + geom_label_repel() + 
+             geom_abline(intercept = 0, slope = 1) + 
+             ggtitle(paste0("score = ", round(sum(abs(jl$uniqreads - jl$scaledcoverage), 
+                                                  na.rm = TRUE)/sum(jl$uniqreads, na.rm = TRUE), 2))) + 
+             xlab("Scaled predicted coverage") + ylab("Number of uniquely mapped reads"))
+     dev.off()
+     
+     write.table(jl %>%
+                   dplyr::mutate(coverage = round(coverage, 2),
+                                 scaledcoverage = round(scaledcoverage, 2),
+                                 difference = round(difference, 2)), 
+                 file = paste0(outdir, "/", gene, ".txt"),
+                 quote = FALSE, row.names = FALSE, col.names = TRUE, sep = "\t")
+     print(as.data.frame(jl))
+     
+     saveRDS(NULL, paste0(checkdir, "/", currgene, ".rds"))
+   }
+ }, mc.preschedule = FALSE, mc.cores = ncores)
ENST00000543114
ENST00000335762
ENST00000399655
ENST00000480911
ENST00000399595
ENST00000399644
ENST00000399638
ENST00000399597
ENST00000399621
ENST00000399637
ENST00000399591
ENST00000399641
ENST00000347598
ENST00000399606
ENST00000399601
ENST00000344100
ENST00000399629
ENST00000327702
ENST00000399649
ENST00000402845
ENST00000399603
ENST00000399634
ENST00000399617
ENST00000406454
ENST00000491104
ENST00000465278
ENST00000496818
ENST00000483136
ENST00000616390
ENST00000492150
ENST00000465934
Joining, by = c("seqnames", "start", "end", "strand")
   junctionid seqnames   start     end  width strand     coverage uniqreads
1          J1       12 1971202 2115223 144022      +   0.00000000         0
2          J2       12 2053612 2115223  61612      +  11.16380040         7
3          J3       12 2115546 2120324   4779      +  41.84571039         0
4          J4       12 2120431 2448975 328545      +  42.89238350        31
5          J5       12 2449116 2457566   8451      +  35.96468018        17
6          J6       12 2457707 2486103  28397      +  31.76380890        17
7          J7       12 2486263 2493189   6927      +  35.57543629         5
8          J8       12 2493387 2504435  11049      +   4.92902428        15
9          J9       12 2493387 2504841  11455      +  37.97788097         2
10        J10       12 2504540 2512811   8272      +  10.21925638        31
11        J11       12 2504946 2512811   7866      +  48.43390067         4
12        J12       12 2512985 2547449  34465      +   0.08789788         0
13        J13       12 2512985 2549942  36958      +  66.29834444        29
14        J14       12 2547525 2549942   2418      +   0.07618123         0
15        J15       12 2550034 2550543    510      +   7.65351601         2
16        J16       12 2550034 2556950   6917      +  46.78616857        12
17        J17       12 2550657 2556950   6294      +   6.11848714         0
18        J18       12 2556978 2566421   9444      +  57.66433225        15
19        J19       12 2566583 2567568    986      +  56.07938549        17
20        J20       12 2567795 2581589  13795      +  47.66863564        31
21        J21       12 2581798 2582821   1024      + 105.96425237        36
22        J22       12 2582943 2584502   1560      + 128.36970037        31
23        J23       12 2584618 2585375    758      + 123.44694124        37
24        J24       12 2585497 2585834    338      + 144.62167933        63
25        J25       12 2585905 2593212   7308      +  88.46936557        53
26        J26       12 2593346 2595873   2528      +  67.45817030        51
27        J27       12 2596004 2597229   1226      +  64.16709357         0
28        J28       12 2596004 2597436   1433      +   7.82257759        50
29        J29       12 2597290 2597436    147      +   0.00000000         0
30        J30       12 2597290 2601853   4564      +  49.69351136         5
31        J31       12 2597497 2601853   4357      +   7.02195821        37
32        J32       12 2601961 2605080   3120      +  55.66677288        40
33        J33       12 2605169 2605678    510      +  67.53389413        37
34        J34       12 2605787 2606610    824      +  82.77829846        47
35        J35       12 2606664 2606983    320      +  88.41893725        47
36        J36       12 2607131 2608510   1380      +  92.24936979        53
37        J37       12 2608064 2608510    447      +   0.00000000         0
38        J38       12 2608713 2610540   1828      + 106.66954536        28
39        J39       12 2610700 2611902   1203      +  88.40652305        56
40        J40       12 2612014 2633628  21615      +   1.23405912         5
41        J41       12 2612014 2634296  22283      +  74.70048621        58
42        J42       12 2633713 2634296    584      +   0.00000000         0
43        J43       12 2633713 2648474  14762      +   1.06163085         4
44        J44       12 2634375 2651639  17265      +   0.00000000         0
45        J45       12 2634381 2648474  14094      +  62.78403424        42
46        J46       12 2634381 2651639  17259      +   0.00000000         0
47        J47       12 2641760 2646383   4624      +   1.52308433         0
48        J48       12 2641760 2651639   9880      +   0.00000000         0
49        J49       12 2646533 2648474   1942      +   0.87243440         0
50        J50       12 2648508 2651573   3066      +   0.07786145         0
51        J51       12 2648508 2651639   3132      +  61.17444420        50
52        J52       12 2651769 2653834   2066      +  64.99696205        17
53        J53       12 2653901 2655146   1246      +  59.63135746        23
54        J54       12 2655239 2664824   9586      +  69.19922575        12
55        J55       12 2664991 2665580    590      +  91.29822247        66
56        J56       12 2665709 2666685    977      +  84.63862180        56
57        J57       12 2666783 2668932   2150      +  93.52593359        36
58        J58       12 2669036 2674483   5448      +   1.24416801         4
59        J59       12 2669036 2674540   5505      +  78.58051897        55
60        J60       12 2674643 2677093   2451      +  61.78605356        34
61        J61       12 2677222 2677732    511      +  41.75959318        12
62        J62       12 2677868 2679443   1576      +  18.43889910        18
63        J63       12 2679797 2680362    566      +   0.12702005         0
64        J64       12 2679797 2681949   2153      +   0.80785209         0
65        J65       12 2679797 2682549   2753      +  22.58497613        14
66        J66       12 2680576 2682549   1974      +   0.47599293         2
67        J67       12 2682055 2682549    495      +   1.85146317         3
68        J68       12 2682679 2685735   3057      +  51.17543148        58
69        J69       12 2685843 2686165    323      +  52.99713607        44
70        J70       12 2686270 2688446   2177      +  31.68576732        40
71        J71       12 2688780 2690899   2120      +  13.11898652        11
   mmreads scaledcoverage tot_coverage tot_reads    prop_pval   difference
1        0     0.00000000      3001.31      1570          NaN   0.00000000
2        0     5.83983952      3001.31      1570 8.969047e-01   1.16016048
3        0    21.88969924      3001.31      1570 5.714593e-06 -21.88969924
4        0    22.43721915      3001.31      1570 2.058536e-01   8.56278085
5        0    18.81330309      3001.31      1570 8.407131e-01  -1.81330309
6        0    16.61580643      3001.31      1570 1.000000e+00   0.38419357
7        0    18.60968768      3001.31      1570 5.090687e-03 -13.60968768
8        0     2.57839712      3001.31      1570 2.955233e-04  12.42160288
9        0    19.86641844      3001.31      1570 1.720721e-04 -17.86641844
10       0     5.34574384      3001.31      1570 7.240098e-08  25.65425616
11       0    25.33601435      3001.31      1570 7.774823e-05 -21.33601435
12       0     0.04597982      3001.31      1570 1.000000e+00  -0.04597982
13       0    34.68099374      3001.31      1570 4.813513e-01  -5.68099374
14       0     0.03985078      3001.31      1570 1.000000e+00  -0.03985078
15       0     4.00359229      3001.31      1570 5.800609e-01  -2.00359229
16       0    24.47407749      3001.31      1570 3.351718e-02 -12.47407749
17       0     3.20061106      3001.31      1570 1.724863e-01  -3.20061106
18       0    30.16449902      3001.31      1570 1.852681e-02 -15.16449902
19       0    29.33540549      3001.31      1570 5.915234e-02 -12.33540549
20       0    24.93570041      3001.31      1570 4.043794e-01   6.06429959
21       0    55.43042748      3001.31      1570 2.774868e-02 -19.43042748
22       0    67.15082877      3001.31      1570 7.970052e-05 -36.15082877
23       0    64.57570898      3001.31      1570 2.885954e-03 -27.57570898
24       0    75.65231980      3001.31      1570 2.428830e-01 -12.65231980
25       0    46.27876517      3001.31      1570 4.815831e-01   6.72123483
26       0    35.28770442      3001.31      1570 5.430906e-02  15.71229558
27       0    33.56612581      3001.31      1570 1.181706e-08 -33.56612581
28       0     4.09202925      3001.31      1570 1.441868e-16  45.90797075
29       0     0.00000000      3001.31      1570          NaN   0.00000000
30       1    25.99492296      3001.31      1570 1.414784e-04 -20.99492296
31       1     3.67322127      3001.31      1570 9.162052e-12  33.32677873
32       1    29.11956578      3001.31      1570 1.482876e-01  10.88043422
33       0    35.32731593      3001.31      1570 9.008031e-01   1.67268407
34       0    43.30173966      3001.31      1570 7.176567e-01   3.69826034
35       0    46.25238587      3001.31      1570 1.000000e+00   0.74761413
36       0    48.25610418      3001.31      1570 6.424327e-01   4.74389582
37       0     0.00000000      3001.31      1570          NaN   0.00000000
38       0    55.79936975      3001.31      1570 1.075819e-03 -27.79936975
39       0    46.24589194      3001.31      1570 2.930775e-01   9.75410806
40       0     0.64554247      3001.31      1570 4.648546e-02   4.35445753
41       0    39.07619590      3001.31      1570 2.694881e-02  18.92380410
42       0     0.00000000      3001.31      1570          NaN   0.00000000
43       0     0.55534438      3001.31      1570 9.897842e-02   3.44465562
44       0     0.00000000      3001.31      1570          NaN   0.00000000
45       0    32.84264060      3001.31      1570 2.512807e-01   9.15735940
46       0     0.00000000      3001.31      1570          NaN   0.00000000
47       0     0.79673299      3001.31      1570 9.685554e-01  -0.79673299
48       0     0.00000000      3001.31      1570          NaN   0.00000000
49       0     0.45637478      3001.31      1570 1.000000e+00  -0.45637478
50       0     0.04072971      3001.31      1570 1.000000e+00  -0.04072971
51       0    32.00065604      3001.31      1570 2.211452e-02  17.99934396
52       0    34.00023414      3001.31      1570 1.234928e-02 -17.00023414
53       0    31.19345969      3001.31      1570 2.539696e-01  -8.19345969
54       0    36.19845919      3001.31      1570 2.851225e-04 -24.19845919
55       0    47.75855429      3001.31      1570 4.987458e-02  18.24144571
56       0    44.27488405      3001.31      1570 1.941683e-01  11.72511595
57       0    48.92388105      3001.31      1570 1.338880e-01 -12.92388105
58       0     0.65083047      3001.31      1570 1.180039e-01   3.34916953
59       0    41.10586033      3001.31      1570 1.108243e-01  13.89413967
60       0    32.32059194      3001.31      1570 8.957381e-01   1.67940806
61       0    21.84465090      3001.31      1570 8.489199e-02  -9.84465090
62       0     9.64547983      3001.31      1570 8.079130e-02   8.35452017
63       0     0.06644482      3001.31      1570 1.000000e+00  -0.06644482
64       0     0.42259145      3001.31      1570 1.000000e+00  -0.42259145
65       0    11.81431335      3001.31      1570 7.437805e-01   2.18568665
66       0     0.24899427      3001.31      1570 3.844925e-01   1.75100573
67       0     0.96850959      3001.31      1570 4.251057e-01   2.03149041
68       0    26.77012275      3001.31      1570 4.488933e-05  31.22987725
69       0    27.72306548      3001.31      1570 2.769095e-02  16.27693452
70       3    16.57498249      3001.31      1570 1.912267e-04  23.42501751
71       0     6.86260710      3001.31      1570 3.406303e-01   4.13739290
   ranking
1       31
2       40
3        6
4       55
5       23
6       38
7       13
8       60
9       10
10      68
11       7
12      28
13      20
14      30
15      22
16      16
17      21
18      12
19      17
20      52
21       9
22       1
23       4
24      15
25      53
26      62
27       2
28      71
29      32
30       8
31      70
32      58
33      41
34      48
35      39
36      51
37      33
38       3
39      57
40      50
41      66
42      34
43      47
44      35
45      56
46      36
47      24
48      37
49      25
50      29
51      64
52      11
53      19
54       5
55      65
56      59
57      14
58      46
59      61
60      42
61      18
62      54
63      27
64      26
65      45
66      43
67      44
68      69
69      63
70      67
71      49
[[1]]
NULL

> 
> saveRDS(NULL, paste0(checkdir, "/", gene, ".rds"))
> sessionInfo()
R version 3.4.0 (2017-04-21)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 14.04.5 LTS

Matrix products: default
BLAS: /usr/local/R/R-3.4.0/lib/libRblas.so
LAPACK: /usr/local/R/R-3.4.0/lib/libRlapack.so

locale:
 [1] LC_CTYPE=en_CA.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_CA.UTF-8        LC_COLLATE=en_CA.UTF-8    
 [5] LC_MONETARY=en_CA.UTF-8    LC_MESSAGES=en_CA.UTF-8   
 [7] LC_PAPER=en_CA.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_CA.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
 [1] grid      stats4    parallel  stats     graphics  grDevices utils    
 [8] datasets  methods   base     

other attached packages:
 [1] Gviz_1.20.0                           
 [2] gridExtra_2.3                         
 [3] ggrepel_0.7.0                         
 [4] cowplot_0.8.0                         
 [5] ggplot2_2.2.1                         
 [6] BSgenome.Hsapiens.NCBI.GRCh38_1.3.1000
 [7] BSgenome_1.44.2                       
 [8] rtracklayer_1.36.4                    
 [9] GenomicAlignments_1.12.2              
[10] Rsamtools_1.28.0                      
[11] Biostrings_2.44.2                     
[12] XVector_0.16.0                        
[13] SummarizedExperiment_1.6.5            
[14] DelayedArray_0.2.7                    
[15] matrixStats_0.52.2                    
[16] Biobase_2.36.2                        
[17] GenomicRanges_1.28.5                  
[18] GenomeInfoDb_1.12.2                   
[19] IRanges_2.10.3                        
[20] S4Vectors_0.14.5                      
[21] BiocGenerics_0.22.0                   
[22] alpine_1.2.0                          
[23] dplyr_0.7.4                           

loaded via a namespace (and not attached):
 [1] ProtGenerics_1.8.0            bitops_1.0-6                 
 [3] bit64_0.9-7                   RColorBrewer_1.1-2           
 [5] httr_1.3.1                    tools_3.4.0                  
 [7] backports_1.1.1               R6_2.2.2                     
 [9] rpart_4.1-11                  Hmisc_4.0-3                  
[11] DBI_0.7                       lazyeval_0.2.0               
[13] colorspace_1.3-2              nnet_7.3-12                  
[15] curl_2.8.1                    bit_1.1-12                   
[17] compiler_3.4.0                graph_1.54.0                 
[19] htmlTable_1.9                 scales_0.5.0                 
[21] checkmate_1.8.4               RBGL_1.52.0                  
[23] speedglm_0.3-2                stringr_1.2.0                
[25] digest_0.6.12                 foreign_0.8-69               
[27] base64enc_0.1-3               dichromat_2.0-0              
[29] pkgconfig_2.0.1               htmltools_0.3.6              
[31] ensembldb_2.0.4               htmlwidgets_0.9              
[33] rlang_0.1.2                   RSQLite_2.0                  
[35] BiocInstaller_1.26.1          shiny_1.0.5                  
[37] bindr_0.1                     BiocParallel_1.10.1          
[39] acepack_1.4.1                 VariantAnnotation_1.22.3     
[41] RCurl_1.95-4.8                magrittr_1.5                 
[43] GenomeInfoDbData_0.99.0       Formula_1.2-2                
[45] Matrix_1.2-11                 Rcpp_0.12.13                 
[47] munsell_0.4.3                 stringi_1.1.5                
[49] yaml_2.1.14                   MASS_7.3-47                  
[51] zlibbioc_1.22.0               plyr_1.8.4                   
[53] AnnotationHub_2.8.2           blob_1.1.0                   
[55] lattice_0.20-35               splines_3.4.0                
[57] GenomicFeatures_1.28.5        knitr_1.17                   
[59] biomaRt_2.32.1                XML_3.98-1.9                 
[61] glue_1.1.1                    biovizBase_1.24.0            
[63] latticeExtra_0.6-28           data.table_1.10.4            
[65] httpuv_1.3.5                  gtable_0.2.0                 
[67] assertthat_0.2.0              mime_0.5                     
[69] xtable_1.8-2                  AnnotationFilter_1.0.0       
[71] survival_2.41-3               tibble_1.3.4                 
[73] AnnotationDbi_1.38.2          memoise_1.1.0                
[75] bindrcpp_0.2                  cluster_2.0.6                
[77] interactiveDisplayBase_1.14.0
> date()
[1] "Thu Nov  2 14:16:06 2017"
> 
> 
> proc.time()
    user   system  elapsed 
  70.381   20.972 1258.523 
