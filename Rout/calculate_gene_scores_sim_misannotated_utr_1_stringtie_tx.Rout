
R Under development (unstable) (2017-12-14 r73916) -- "Unsuffered Consequences"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ################################################################################
> ##                                                                            ##
> ## Calculate gene scores and "normalized" junction coverages                  ##
> ##                                                                            ##
> ## Inputs:                                                                    ##
> ## * combcovrds: object with junction coverage information for all methods    ##
> ##               (output from combine_scaled_coverages.R)                     ##
> ## * mmfracthreshold: threshold on the fraction of multimapping reads.        ##
> ##                    Junctions with more than this fraction will not be      ##
> ##                    used to calculate the score.                            ##
> ## * outrds: output file                                                      ##
> ##                                                                            ##
> ## Outputs:                                                                   ##
> ## * An extended input object, with scores added to the gene table and        ##
> ##   "normalized" junction coverage values (scaled to the same sum as the     ##
> ##   observed junction coverages in the gene) to the junction table           ##
> ##                                                                            ##
> ################################################################################
> 
> args <- (commandArgs(trailingOnly = TRUE))
> for (i in 1:length(args)) {
+   eval(parse(text = args[[i]]))
+ }
> 
> print(combcovrds)
[1] "output/sim_misannotated_utr_1_stringtie_tx_combined_coverages.rds"
> print(mmfracthreshold)
[1] 0.25
> print(outrds)
[1] "output/sim_misannotated_utr_1_stringtie_tx_combined_coverages_with_scores.rds"
> 
> suppressPackageStartupMessages({
+   library(dplyr)
+ })
> 
> ## Define weight functions
> gthr <- function(omega, thr = mmfracthreshold) {
+   sapply(omega, function(o) {
+     if (is.na(o) || o >= (1 - thr)) 1
+     else 0
+   })
+ }
> 
> ## Define help function for calculating score
> junction_score <- function(uniqreads, mmreads, predcovs, g, beta = 1) {
+   omega <- uniqreads/(uniqreads + mmreads)
+   omega[mmreads == 0] <- 1  ## if there are no multi-mapping reads, all reads are considered to be unique
+   w1 <- (sum(g(omega) * uniqreads)/sum(g(omega) * predcovs)) ^ beta
+   ## w1 can be non-numeric if all g(omega)=0 (not enough uniquely mapping reads
+   ## for any junction) or if g(omega)*pred.cov=0 for all junctions, even if
+   ## g(omega)!=0 for some of them (if the predicted coverage is 0 for a junction
+   ## that has non-zero uniquely mapping reads). In both these cases, we don't
+   ## scale the predicted coverage (i.e., we set w1=1).
+   w1[is.na(w1)] <- 1
+   w1[!is.finite(w1)] <- 1
+   signif(sum(abs(w1 * g(omega) * predcovs - g(omega) * uniqreads))/sum(g(omega) * uniqreads), 2)
+ }
> 
> ## Define corresponding help function for calculating scaled coverages
> scaled_coverage <- function(uniqreads, mmreads, predcovs, g, beta = 1) {
+   omega <- uniqreads/(uniqreads + mmreads)
+   omega[mmreads == 0] <- 1  ## if there are no multi-mapping reads, all reads are considered to be unique
+   w1 <- (sum(g(omega) * uniqreads)/sum(g(omega) * predcovs)) ^ beta
+   ## w1 can be non-numeric if all g(omega)=0 (not enough uniquely mapping reads
+   ## for any junction) or if g(omega)*pred.cov=0 for all junctions, even if
+   ## g(omega)!=0 for some of them (if the predicted coverage is 0 for a junction
+   ## that has non-zero uniquely mapping reads). In both these cases, we don't
+   ## scale the predicted coverage (i.e., we set w1=1).
+   w1[is.na(w1)] <- 1
+   w1[!is.finite(w1)] <- 1
+   w1 * predcovs
+ }
> 
> ## Read combined coverage file
> combcov <- readRDS(combcovrds)
> junccov <- combcov$junctions
> 
> ## Calculate score. 
> junccov <- junccov %>%
+   dplyr::group_by(gene, method) %>% 
+   dplyr::mutate(score = junction_score(uniqreads, mmreads, pred.cov, g = gthr, beta = 1)) %>%
+   dplyr::mutate(scaled.cov = scaled_coverage(uniqreads, mmreads, pred.cov, g = gthr, beta = 1)) %>%
+   dplyr::mutate(methodscore = paste0(method, " (", score, ")")) %>%
+   dplyr::ungroup()
> 
> ## Add score to gene table
> genecov <- combcov$gene
> genecov <- dplyr::left_join(genecov, 
+                             junccov %>% dplyr::select(gene, method, score) %>%
+                               dplyr::distinct(),
+                             by = c("gene", "method"))
> 
> saveRDS(list(junctions = junccov, transcripts = combcov$transcripts,
+              genes = genecov), file = outrds)
> 
> date()
[1] "Fri Jun 29 20:23:35 2018"
> sessionInfo()
R Under development (unstable) (2017-12-14 r73916)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 16.04.4 LTS

Matrix products: default
BLAS: /usr/local/R/R-devel/lib/libRblas.so
LAPACK: /usr/local/R/R-devel/lib/libRlapack.so

locale:
 [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       
 [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   
 [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          
[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] bindrcpp_0.2.2 dplyr_0.7.4   

loaded via a namespace (and not attached):
 [1] compiler_3.5.0   magrittr_1.5     assertthat_0.2.0 R6_2.2.2        
 [5] pillar_1.2.1     glue_1.2.0       tibble_1.4.2     Rcpp_0.12.16    
 [9] pkgconfig_2.0.1  rlang_0.2.0      bindr_0.1.1     
> 
> proc.time()
   user  system elapsed 
 43.416   0.528  43.980 
