
R Under development (unstable) (2017-12-14 r73916) -- "Unsuffered Consequences"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> args <- (commandArgs(trailingOnly = TRUE))
> for (i in 1:length(args)) {
+   eval(parse(text = args[[i]]))
+ }
> 
> print(junctioncovSTAR) ## Junction reads from STAR
[1] "STAR_stringtie_tx/20151016.A-Cortex_RNA/20151016.A-Cortex_RNA_SJ.out.tab"
> print(junctioncovSalmon) ## Salmon quantifications
[1] "alpine/20151016.A-Cortex_RNA_stringtie_tx/scaled_junction_coverage_Salmon.rds"
> print(junctioncovSalmonBWA) ## Salmon quantifications in alignment mode (after BWA)
[1] "alpine/20151016.A-Cortex_RNA_stringtie_tx/scaled_junction_coverage_SalmonBWA.rds"
> print(junctioncovSalmonCDS) ## Salmon quantifications based on CDSs only
[1] ""
> print(junctioncovhera) ## Hera quantifications
[1] "alpine/20151016.A-Cortex_RNA_stringtie_tx/scaled_junction_coverage_hera.rds"
> print(junctioncovkallisto) ## kallisto quantifications
[1] "alpine/20151016.A-Cortex_RNA_stringtie_tx/scaled_junction_coverage_kallisto.rds"
> print(junctioncovRSEM) ## RSEM quantifications
[1] "alpine/20151016.A-Cortex_RNA_stringtie_tx/scaled_junction_coverage_RSEM.rds"
> print(junctioncovStringTie) ## StringTie quantifications
[1] "alpine/20151016.A-Cortex_RNA_stringtie_tx/scaled_junction_coverage_StringTie.rds"
> print(junctioncovNanopore) ## If present, nanopore results
[1] ""
> print(genecharacteristics) ## Gene-level characteristics
[1] "output/gene_characteristics.rds"
> print(exoncountstxt) ## Exon counts for each gene
[1] "featureCounts/20151016.A-Cortex_RNA/20151016.A-Cortex_RNA_STAR_exons.txt"
> print(introncountstxt) ## Intron counts for each gene
[1] "featureCounts/20151016.A-Cortex_RNA/20151016.A-Cortex_RNA_STAR_introns.txt"
> print(outrds)
[1] "output/20151016.A-Cortex_RNA_stringtie_tx_combined_coverages.rds"
> 
> suppressPackageStartupMessages({
+   library(dplyr)
+ })
> 
> ## Combine scaled junction coverages for all methods. Also summarize transcript
> ## and gene abundances, as well as characteristics of these features.
> 
> ## Read junction coverages from STAR. Both in a stranded and unstranded mode.
> jcov <- read.delim(junctioncovSTAR, header = FALSE, as.is = TRUE)
> colnames(jcov) <- c("seqnames", "start", "end", "strand", "motif", "annot", 
+                     "uniqreads", "mmreads", "maxoverhang")
> jcov <- jcov %>% dplyr::mutate(strand = replace(strand, strand == 1, "+")) %>%
+   dplyr::mutate(strand = replace(strand, strand == 2, "-")) %>%
+   dplyr::select(seqnames, start, end, strand, uniqreads, mmreads)
> 
> jcovnostrand <- jcov %>% group_by(seqnames, start, end) %>%
+   dplyr::summarize(uniqreads = sum(uniqreads), 
+                    mmreads = sum(mmreads)) %>%
+   dplyr::mutate(strand = "*") %>% dplyr::ungroup() %>%
+   dplyr::select(seqnames, start, end, strand, uniqreads, mmreads) %>%
+   as.data.frame()
> jcov <- rbind(jcov, jcovnostrand)
> 
> ## Read and merge junction coverages predicted by each method
> jcovscaled <- do.call(rbind, list(readRDS(junctioncovSalmon)$allcovs,
+                                   readRDS(junctioncovSalmonBWA)$allcovs,
+                                   readRDS(junctioncovhera)$allcovs,
+                                   readRDS(junctioncovkallisto)$allcovs,
+                                   readRDS(junctioncovRSEM)$allcovs,
+                                   readRDS(junctioncovStringTie)$allcovs))
> if (junctioncovNanopore != "") {
+   jcovscaled <- rbind(jcovscaled, readRDS(junctioncovNanopore)$allcovs)
+ }
> if (junctioncovSalmonCDS != "") {
+   jcovscaled <- rbind(jcovscaled, readRDS(junctioncovSalmonCDS)$allcovs)
+ }
> 
> ## Count the number of junctions per gene
> jcovscaled <- jcovscaled %>% 
+   dplyr::group_by(gene, method) %>% 
+   dplyr::mutate(nbr_junctions_in_gene = length(start))
> 
> jcovscaled <- jcovscaled %>%
+   dplyr::group_by(seqnames, start, end, gene) %>%
+   dplyr::mutate(transcript = paste(unique(strsplit(paste(unique(transcript), collapse = ","), 
+                                                    ",")[[1]]), collapse = ",")) %>% ## to make sure we have the same transcript combination for a given junction across all methods
+   dplyr::ungroup() %>% 
+   dplyr::mutate(pred.cov = replace(pred.cov, is.na(pred.cov), 0)) %>%
+   dplyr::left_join(jcov, by = c("seqnames", "start", "end", "strand")) %>%
+   dplyr::mutate(uniqreads = replace(uniqreads, is.na(uniqreads), 0),
+                 mmreads = replace(mmreads, is.na(mmreads), 0)) %>%
+   dplyr::mutate(fracunique = uniqreads/(uniqreads + mmreads)) %>% 
+   dplyr::mutate(fracunique = replace(fracunique, is.na(fracunique), 1)) %>%
+   dplyr::ungroup()
Warning messages:
1: Column `seqnames` joining factor and character vector, coercing into character vector 
2: Column `strand` joining factor and character vector, coercing into character vector 
> 
> ## Define a junction ID for each junction
> j0 <- jcovscaled %>% dplyr::select(seqnames, start, end, gene) %>%
+   dplyr::distinct() %>% dplyr::group_by(gene) %>% dplyr::arrange(start) %>%
+   dplyr::mutate(junctionid = paste0("J", seq_len(length(start)))) %>%
+   dplyr::ungroup()
> 
> jcovscaled <- jcovscaled %>% dplyr::left_join(j0) %>%
+   dplyr::select(junctionid, everything(), transcript)
Joining, by = c("seqnames", "start", "end", "gene")
> 
> ## Read and combine transcript quantifications
> allquants <- do.call(rbind, list(readRDS(junctioncovSalmon)$quants,
+                                  readRDS(junctioncovSalmonBWA)$quants,
+                                  readRDS(junctioncovhera)$quants,
+                                  readRDS(junctioncovkallisto)$quants,
+                                  readRDS(junctioncovRSEM)$quants,
+                                  readRDS(junctioncovStringTie)$quants))
> 
> if (junctioncovNanopore != "") {
+   allquants <- rbind(allquants, readRDS(junctioncovNanopore)$quants)
+ }
> if (junctioncovSalmonCDS != "") {
+   allquants <- rbind(allquants, readRDS(junctioncovSalmonCDS)$quants)
+ }
> 
> ## Summarize abundances on gene level
> allquants_gene <- allquants %>% dplyr::group_by(gene, method) %>%
+   dplyr::mutate(TPMrel = TPM/sum(TPM)) %>%
+   dplyr::mutate(TPMrel = replace(TPMrel, is.na(TPMrel), 0)) %>%
+   dplyr::summarize(count = sum(count),
+                    TPM = sum(TPM),
+                    nbr_expressed_transcripts = sum(TPM > 0),
+                    nbr_expressed_transcripts_5p = sum(TPMrel > 0.05),
+                    covOKfraction = length(which(covnote == "covOK"))/length(covnote)) %>%
+   dplyr::ungroup()
> 
> ## Add gene characteristics
> genechars <- readRDS(genecharacteristics)
> allquants_gene <- dplyr::left_join(allquants_gene, genechars, 
+                                    by = c("gene" = "gene_id"))
> 
> ## Add exon and intron counts
> exoncounts <- read.delim(exoncountstxt, skip = 1, header = TRUE, as.is = TRUE) %>%
+   dplyr::select(-Chr, -Start, -End, -Strand, -Length) %>%
+   setNames(c("gene", "exoncount"))
> introncounts <- read.delim(introncountstxt, skip = 1, header = TRUE, as.is = TRUE) %>%
+   dplyr::select(-Chr, -Start, -End, -Strand, -Length) %>%
+   setNames(c("gene", "introncount"))
> allquants_gene <- dplyr::left_join(allquants_gene, 
+                                    dplyr::full_join(exoncounts, introncounts)) %>% 
+   dplyr::mutate(exoncount = replace(exoncount, is.na(exoncount), 0)) %>% 
+   dplyr::mutate(introncount = replace(introncount, is.na(introncount), 0)) %>%
+   dplyr::mutate(intron_exon_ratio = introncount/exoncount) %>%
+   dplyr::mutate(intron_exon_ratio = replace(intron_exon_ratio, exoncount==0 & introncount==0, 0))
Joining, by = "gene"
Joining, by = "gene"
> 
> ## Add total unique and multimapping junction reads per gene
> totjunctionreads <- jcovscaled %>% dplyr::filter(method == "Salmon") %>%
+   dplyr::select(gene, uniqreads, mmreads) %>%
+   dplyr::group_by(gene) %>% dplyr::summarize(uniqjuncreads = sum(uniqreads),
+                                              mmjuncreads = sum(mmreads))
> allquants_gene <- dplyr::left_join(allquants_gene, totjunctionreads, by = "gene") %>%
+   dplyr::mutate(uniqjuncreads = replace(uniqjuncreads, is.na(uniqjuncreads), 0)) %>%
+   dplyr::mutate(mmjuncreads = replace(mmjuncreads, is.na(mmjuncreads), 0)) %>%
+   dplyr::mutate(uniqjuncfraction = uniqjuncreads/(uniqjuncreads + mmjuncreads)) %>%
+   dplyr::mutate(uniqjuncfraction = replace(uniqjuncfraction, is.na(uniqjuncfraction), 1))
> 
> ## Add number of junctions per gene (from the junction summary). If a gene is
> ## not in the junction summary, it means that it doesn't have any annotated
> ## junctions.
> allquants_gene <- allquants_gene %>% 
+   dplyr::left_join(jcovscaled %>% dplyr::select(gene, method, nbr_junctions_in_gene) %>%
+                      dplyr::distinct(),
+                    by = c("gene", "method")) %>%
+   dplyr::mutate(nbr_junctions_in_gene = replace(nbr_junctions_in_gene, is.na(nbr_junctions_in_gene), 0))
> 
> saveRDS(list(junctions = jcovscaled, transcripts = allquants, 
+              genes = allquants_gene), file = outrds)
> 
> sessionInfo()
R Under development (unstable) (2017-12-14 r73916)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 16.04.4 LTS

Matrix products: default
BLAS: /usr/local/R/R-devel/lib/libRblas.so
LAPACK: /usr/local/R/R-devel/lib/libRlapack.so

locale:
 [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       
 [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   
 [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          
[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] bindrcpp_0.2.2 dplyr_0.7.4   

loaded via a namespace (and not attached):
 [1] compiler_3.5.0   magrittr_1.5     assertthat_0.2.0 R6_2.2.2        
 [5] pillar_1.2.1     glue_1.2.0       tibble_1.4.2     Rcpp_0.12.16    
 [9] pkgconfig_2.0.1  rlang_0.2.0      bindr_0.1.1     
> date()
[1] "Mon May 21 01:51:56 2018"
> 
> proc.time()
   user  system elapsed 
363.292   3.984 368.039 
