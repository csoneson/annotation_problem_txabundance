
R version 3.4.0 (2017-04-21) -- "You Stupid Darkness"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> args <- (commandArgs(trailingOnly = TRUE))
> for (i in 1:length(args)) {
+   eval(parse(text = args[[i]]))
+ }
> 
> print(gene)
[1] "ENSG00000151067"
> print(bam)
[1] "STAR/20151016.A-Cortex_RNA/20151016.A-Cortex_RNA_Aligned.sortedByCoord.out.bam"
> print(bw)
[1] "STARbigwig/20151016.A-Cortex_RNA_Aligned.sortedByCoord.out.bw"
> print(gtf)
[1] "/home/Shared/data/annotation/Human/Ensembl_GRCh38.90/gtf/Homo_sapiens.GRCh38.90.gtf"
> print(quantsf)
[1] "salmon/cDNA/20151016.A-Cortex_RNA/quant.sf"
> print(junctioncov)
[1] "STAR/20151016.A-Cortex_RNA/20151016.A-Cortex_RNA_SJ.out.tab"
> print(biasmodels)
[1] "alpine/alpine_fitbiasmodel.rds"
> print(outrds)
[1] "alpine_out/ENSG00000151067.rds"
> 
> suppressPackageStartupMessages(library(dplyr))
> suppressPackageStartupMessages(library(alpine))
> suppressPackageStartupMessages(library(GenomicAlignments))
> suppressPackageStartupMessages(library(BSgenome.Hsapiens.NCBI.GRCh38))
> suppressPackageStartupMessages(library(ggplot2))
> suppressPackageStartupMessages(library(cowplot))
> suppressPackageStartupMessages(library(ggrepel))
> 
> source("Rscripts/plot_tracks.R")
> 
> ## Create gene models for Gviz visualization
> options(ucscChromosomeNames = FALSE)
> genemodels_exon <- create_genemodels(gtf, seltype = "exon")
> genemodels_cds <- create_genemodels(gtf, seltype = "CDS")
> 
> ## Read bias model parameters and gene models
> biasmodels <- readRDS(biasmodels)
> fitpar <- biasmodels$fitpar
> ebt0 <- biasmodels$ebt0
> txps <- biasmodels$txps
> 
> ## Get transcripts for gene of interest
> txlist <- names(subset(txps, gene_id == gene))
> stopifnot(length(txlist) > 0)
> names(txlist) <- txlist
> 
> ## Load bam file 
> bam.files <- bam
> names(bam.files) <- "1"
> 
> ## Read Salmon quantifications
> quantsf <- read.delim(quantsf, header = TRUE, as.is = TRUE)
> quantsf$Name <- gsub("\\.[0-9]+", "", quantsf$Name)
> 
> ## Get number of reads overlapping each transcript in the gene model
> generange <- range(unlist(ebt0[txlist]))
> strand(generange) <- "*"
> ga <- alpine:::readGAlignAlpine(bam.files, generange)
> ga <- keepSeqlevels(ga, as.character(seqnames(unlist(ebt0[txlist]))[1]))
> fco <- findCompatibleOverlaps(ga, GRangesList(ebt0[txlist]))
> tmp <- subjectHits(fco)
> tmp <- names(ebt0[txlist])[tmp]
> nreads <- table(tmp)
> if (length(setdiff(names(ebt0[txlist]), names(nreads))) > 0) {
+   for (i in setdiff(names(ebt0[txlist]), names(nreads))) {
+     nreads[i] <- 0
+   }
+ }
> 
> ## Predict coverage for each transcript
> pred.cov <- lapply(txlist, function(tx) {
+   message(tx)
+   ## Get transcript model
+   txmod <- ebt0[[tx]]
+   
+   pc <- predictCoverage(gene = txmod,
+                         bam.files = bam.files,
+                         fitpar = fitpar,
+                         genome = Hsapiens,
+                         model.names = "all")
+   if (nreads[tx] != 0)
+     pc$`1`$pred.cov$all <- pc$`1`$pred.cov$all/as.numeric(nreads[tx]) * quantsf$NumReads[quantsf$Name == tx]
+   pc
+ })
ENST00000543114
ENST00000335762
ENST00000399655
ENST00000480911
ENST00000399595
ENST00000399644
ENST00000399638
ENST00000399597
ENST00000399621
ENST00000399637
ENST00000399591
ENST00000399641
ENST00000347598
ENST00000399606
ENST00000399601
ENST00000344100
ENST00000399629
ENST00000327702
ENST00000399649
ENST00000402845
ENST00000399603
ENST00000399634
ENST00000399617
ENST00000406454
