
R Under development (unstable) (2017-12-14 r73916) -- "Unsuffered Consequences"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ################################################################################
> ##                                                                            ##
> ## Calculate gene characteristics                                             ##
> ##                                                                            ##
> ## Inputs:                                                                    ##
> ## * gtf: gtf file                                                            ##
> ## * txome: transcriptome fasta file                                          ##
> ## * outrds: output file                                                      ##
> ##                                                                            ##
> ## Outputs:                                                                   ##
> ## * A data frame with gene characteristics                                   ##
> ##                                                                            ##
> ################################################################################
> 
> args <- (commandArgs(trailingOnly = TRUE))
> for (i in 1:length(args)) {
+   eval(parse(text = args[[i]]))
+ }
> 
> print(gtf)
[1] "/home/Shared/data/annotation/Human/Ensembl_GRCh38.90/gtf/Homo_sapiens.GRCh38.90.gtf"
> print(txome)
[1] "reference/Homo_sapiens.GRCh38.cdna.ncrna.fa"
> print(outrds)
[1] "output/gene_characteristics.rds"
> 
> suppressPackageStartupMessages({
+   library(rtracklayer)
+   library(Biostrings)
+   library(dplyr)
+   library(ggplot2)
+ })
> 
> gtf <- rtracklayer::import(gtf, format = "gtf")
> txome <- readDNAStringSet(txome)
> 
> ## Number of exons per transcript, total exon length per transcript
> exons <- as.data.frame(gtf) %>% dplyr::filter(type == "exon") %>% 
+   dplyr::group_by(transcript_id) %>%
+   dplyr::summarize(nbr_exons = length(exon_id),
+                    mean_exon_length = mean(width),
+                    longest_exon = max(width),
+                    shortest_exon = min(width),
+                    median_exon_length = median(width),
+                    tx_length = sum(width),
+                    gene_id = gene_id[1])
> 
> ## 3' UTRs per transcript
> utrs <- as.data.frame(gtf) %>% dplyr::filter(type == "three_prime_utr") %>%
+   dplyr::group_by(transcript_id) %>%
+   dplyr::summarize(start = min(start), end = max(end), width = sum(width), 
+                    seqnames = seqnames[1], gene_id = gene_id[1], strand = strand[1])
> 
> ## If a gene has multiple 3'UTRs starting in the same place but with different
> ## length, get the length difference
> tmp <- utrs %>% dplyr::select(-transcript_id)
> tmp <- split(tmp, tmp$gene_id)
> tmp2 <- sapply(tmp, function(w) {
+   if (all(w$strand == "-")) {
+     w %>% group_by(end) %>% summarize(widthdiff = max(width) - min(width)) %>% 
+       select(widthdiff) %>% max
+   } else if (all(w$strand == "+")) {
+     w %>% group_by(start) %>% summarize(widthdiff = max(width) - min(width)) %>% 
+       select(widthdiff) %>% max
+   } else {
+     0
+   }
+ })
> 
> ## Summarize on gene level
> gene_char <- dplyr::full_join(
+   exons %>% dplyr::group_by(gene_id) %>%
+     dplyr::summarize(nbr_transcripts_gtf = length(transcript_id),
+                      ave_transcript_length_gtf = mean(tx_length),
+                      min_transcript_length_gtf = min(tx_length),
+                      max_transcript_length_gtf = max(tx_length),
+                      median_transcript_length_gtf = median(tx_length),
+                      ave_nbr_exons_per_tx = mean(nbr_exons),
+                      min_nbr_exons_per_tx = min(nbr_exons),
+                      max_nbr_exons_per_tx = max(nbr_exons),
+                      median_nbr_exons_per_tx = median(nbr_exons)),
+   utrs %>% dplyr::select(-transcript_id) %>% dplyr::distinct() %>% 
+     dplyr::group_by(gene_id) %>% 
+     dplyr::summarize(nbr_distinct_3putrs = length(unique(paste0(start, ".", end))),
+                      max_3putr_length = max(width),
+                      min_3putr_length = min(width),
+                      ave_3putr_length = mean(width),
+                      median_3putr_length = median(width))
+ ) %>% dplyr::full_join(data.frame(gene_id = names(tmp2), 
+                                   length_diff_3putrs_samestart = tmp2,
+                                   stringsAsFactors = FALSE))
Joining, by = "gene_id"
Joining, by = "gene_id"
> 
> ## Add information about the genes that are not present in the gtf
> tx_info <- data.frame(width = width(txome), id = names(txome),
+                       stringsAsFactors = FALSE) %>%
+   dplyr::mutate(transcript_id = sapply(strsplit(id, " "), .subset, 1)) %>%
+   dplyr::mutate(gene_id = sapply(strsplit(id, " "), 
+                                  function(w) gsub("^gene:", "", w[grep("^gene:", w)]))) %>%
+   dplyr::select(transcript_id, gene_id, width)
> 
> idx <- grep("^STRG\\.|^CHS\\.", tx_info$transcript_id, invert = TRUE)
> tx_info$transcript_id[idx] <- gsub("\\.[0-9]+$", "", tx_info$transcript_id[idx])
> idx <- grep("^STRG\\.|^CHS\\.", tx_info$gene_id, invert = TRUE)
> tx_info$gene_id[idx] <- gsub("\\.[0-9]+$", "", tx_info$gene_id[idx])
> 
> gene_info <- tx_info %>% dplyr::group_by(gene_id) %>%
+   dplyr::summarize(nbr_transcripts_fasta = length(transcript_id),
+                    ave_transcript_length_fasta = mean(width),
+                    min_transcript_length_fasta = min(width),
+                    max_transcript_length_fasta = max(width),
+                    median_transcript_length_fasta = median(width))
> 
> ## Whenever a gene is present in both fasta and gtf, the information agrees.
> ## Generate new columns consolidating the information from both sources.
> gene_info <- dplyr::full_join(gene_char, gene_info) %>%
+   dplyr::mutate(nbr_transcripts = pmax(nbr_transcripts_gtf, nbr_transcripts_fasta, na.rm = TRUE),
+                 ave_transcript_length = pmax(ave_transcript_length_gtf,
+                                              ave_transcript_length_fasta, na.rm = TRUE),
+                 min_transcript_length = pmax(min_transcript_length_gtf,
+                                              min_transcript_length_fasta, na.rm = TRUE),
+                 max_transcript_length = pmax(max_transcript_length_gtf,
+                                              max_transcript_length_fasta, na.rm = TRUE),
+                 median_transcript_length = pmax(median_transcript_length_gtf,
+                                                 median_transcript_length_fasta, na.rm = TRUE))
Joining, by = "gene_id"
> 
> 
> saveRDS(gene_info, file = outrds)
> sessionInfo()
R Under development (unstable) (2017-12-14 r73916)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 16.04.4 LTS

Matrix products: default
BLAS: /usr/local/R/R-devel/lib/libRblas.so
LAPACK: /usr/local/R/R-devel/lib/libRlapack.so

locale:
 [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       
 [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   
 [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          
[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   

attached base packages:
[1] parallel  stats4    stats     graphics  grDevices utils     datasets 
[8] methods   base     

other attached packages:
 [1] bindrcpp_0.2.2        ggplot2_2.2.1         dplyr_0.7.4          
 [4] Biostrings_2.47.12    XVector_0.20.0        rtracklayer_1.39.12  
 [7] GenomicRanges_1.31.23 GenomeInfoDb_1.15.5   IRanges_2.13.28      
[10] S4Vectors_0.17.42     BiocGenerics_0.26.0  

loaded via a namespace (and not attached):
 [1] Rcpp_0.12.16                plyr_1.8.4                 
 [3] compiler_3.5.0              pillar_1.2.1               
 [5] bindr_0.1.1                 bitops_1.0-6               
 [7] tools_3.5.0                 zlibbioc_1.26.0            
 [9] tibble_1.4.2                gtable_0.2.0               
[11] lattice_0.20-35             pkgconfig_2.0.1            
[13] rlang_0.2.0                 Matrix_1.2-14              
[15] DelayedArray_0.5.30         GenomeInfoDbData_1.1.0     
[17] grid_3.5.0                  glue_1.2.0                 
[19] Biobase_2.39.2              R6_2.2.2                   
[21] XML_3.98-1.11               BiocParallel_1.13.3        
[23] magrittr_1.5                Rsamtools_1.31.3           
[25] scales_0.5.0                matrixStats_0.53.1         
[27] GenomicAlignments_1.15.13   assertthat_0.2.0           
[29] SummarizedExperiment_1.9.16 colorspace_1.3-2           
[31] lazyeval_0.2.1              RCurl_1.95-4.10            
[33] munsell_0.4.3              
> date()
[1] "Mon Jun 18 13:22:33 2018"
> 
> proc.time()
   user  system elapsed 
329.176   4.656 338.766 
