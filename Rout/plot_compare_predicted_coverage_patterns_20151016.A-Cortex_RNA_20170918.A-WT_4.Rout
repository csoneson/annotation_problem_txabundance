
R Under development (unstable) (2017-12-14 r73916) -- "Unsuffered Consequences"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ################################################################################
> ##                                                                            ##
> ## Compare coverage patterns between samples                                  ##
> ##                                                                            ##
> ## Inputs:                                                                    ##
> ## * predcov1: object with predicted transcript coverage patterns for first   ##
> ##             sample                                                         ##
> ## * predcov2: object with predicted transcript coverage patterns for second  ##
> ##             sample                                                         ##
> ## * samplename1: the sample name for the predcov1 file                       ##
> ## * samplename2: the sample name for the predcov2 file                       ##
> ## * outrds: output file                                                      ##
> ##                                                                            ##
> ## Outputs:                                                                   ##
> ## * png figures with the distribution of correlation coefficients for        ##
> ##   transcript coverage patterns in the two samples, across all transcripts  ##
> ##                                                                            ##
> ################################################################################
> 
> args <- (commandArgs(trailingOnly = TRUE))
> for (i in 1:length(args)) {
+   eval(parse(text = args[[i]]))
+ }
> 
> print(predcov1)
[1] "alpine/20151016.A-Cortex_RNA/alpine_predicted_coverage.rds"
> print(predcov2)
[1] "alpine/20170918.A-WT_4/alpine_predicted_coverage.rds"
> print(samplename1)
[1] "Cortex"
> print(samplename2)
[1] "HAP1"
> print(outrds)
[1] "figures/predicted_coverage_pattern_comparison/predicted_coverage_pattern_comparison_20151016.A-Cortex_RNA_20170918.A-WT_4.rds"
> 
> suppressPackageStartupMessages({
+   library(dplyr)
+   library(ggplot2)
+   library(GenomicRanges)
+   library(cowplot)
+ })
> 
> predcov1 <- readRDS(predcov1)
> predcov2 <- readRDS(predcov2)
> 
> transcripts <- intersect(names(predcov1), names(predcov2))
> 
> ## Calculate correlation between coverage patterns
> cov_corrs <- sapply(transcripts, function(tx) {
+   c1 <- predcov1[[tx]]$pred.cov
+   c2 <- predcov2[[tx]]$pred.cov
+   if (!is.null(c1) && !(is.null(c2)))
+     cor(c1, c2)
+   else
+     NA
+ })
> 
> ## Check whether any of the coverage patterns is uniform (if the prediction failed)
> cov_types <- sapply(transcripts, function(tx) {
+   c1 <- predcov1[[tx]]$note
+   c2 <- predcov2[[tx]]$note
+   if (c1 == "covOK" && c2 == "covOK")
+     "noneUniform"
+   else if (all(c(c1, c2) != "covOK"))
+     "bothUniform"
+   else 
+     "oneUniform"
+ })
> 
> ## Fraction NA correlations
> mean(is.na(cov_corrs))
[1] 0.3838301
> table(cov_types)
cov_types
bothUniform noneUniform  oneUniform 
      23926      146019       30365 
> 
> ## Plot
> stopifnot(all(names(cov_corrs) == names(cov_types)))
> df <- data.frame(transcript = names(cov_corrs),
+                  cov_corrs = cov_corrs,
+                  cov_types = cov_types,
+                  stringsAsFactors = FALSE)
> 
> ## Get transcripts with highest and lowest correlation
> txhigh <- df$transcript[which.max(df$cov_corrs)]
> txlow <- df$transcript[which.min(df$cov_corrs)]
> df1 <- rbind(data.frame(x = seq_len(length(predcov1[[txhigh]]$pred.cov)),
+                         Coverage = predcov1[[txhigh]]$pred.cov/max(predcov1[[txhigh]]$pred.cov),
+                         sample = samplename1,
+                         dtype = "High correlation",
+                         stringsAsFactors = FALSE),
+              data.frame(x = seq_len(length(predcov2[[txhigh]]$pred.cov)),
+                         Coverage = predcov2[[txhigh]]$pred.cov/max(predcov2[[txhigh]]$pred.cov),
+                         sample = samplename2, 
+                         dtype = "High correlation",
+                         stringsAsFactors = FALSE),
+              data.frame(x = seq_len(length(predcov1[[txlow]]$pred.cov)),
+                         Coverage = predcov1[[txlow]]$pred.cov/max(predcov1[[txlow]]$pred.cov),
+                         sample = samplename1,
+                         dtype = "Low correlation",
+                         stringsAsFactors = FALSE),
+              data.frame(x = seq_len(length(predcov2[[txlow]]$pred.cov)),
+                         Coverage = predcov2[[txlow]]$pred.cov/max(predcov2[[txlow]]$pred.cov),
+                         sample = samplename2, 
+                         dtype = "Low correlation",
+                         stringsAsFactors = FALSE))
> 
> png(gsub("\\.rds$", "_all.png", outrds), height = 6, width = 9, unit = "in", res = 300)
> print(plot_grid(
+   ggplot(df, aes(x = cov_corrs)) + geom_histogram(bins = 100, fill = "#7BAFDE") + 
+     theme_bw() + xlab("Correlation of coverage patterns between samples") + 
+     ylab("Frequency"),
+   ggplot(df1, aes(x = x, y = Coverage, color = sample)) + 
+     geom_line(size = 1.25) + ylab("Predicted coverage") + 
+     theme_bw() + xlab("Position in transcript") + 
+     facet_wrap(~ dtype, ncol = 1, scales = "free") + 
+     scale_color_manual(values = c("#882E72", "#90C987"), name = "") + 
+     theme(legend.position = "bottom"),
+   nrow = 1, rel_widths = c(2, 1), labels = c("A", "B")
+ ))
Warning message:
Removed 76885 rows containing non-finite values (stat_bin). 
> dev.off()
null device 
          1 
> 
> png(gsub("\\.rds$", "_strat.png", outrds), height = 6, width = 6, unit = "in", res = 300)
> print(ggplot(df, aes(x = cov_corrs)) + geom_histogram(bins = 100, fill = "lightblue") + 
+         theme_bw() + xlab("Correlation of coverage patterns between samples") + 
+         ylab("Frequency") + facet_wrap(~cov_types, ncol = 1))
Warning message:
Removed 76885 rows containing non-finite values (stat_bin). 
> dev.off()
null device 
          1 
> 
> saveRDS(df, file = outrds)
> date()
[1] "Fri Jun  1 16:50:51 2018"
> sessionInfo()
R Under development (unstable) (2017-12-14 r73916)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 16.04.4 LTS

Matrix products: default
BLAS: /usr/local/R/R-devel/lib/libRblas.so
LAPACK: /usr/local/R/R-devel/lib/libRlapack.so

locale:
 [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       
 [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   
 [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          
[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   

attached base packages:
[1] parallel  stats4    stats     graphics  grDevices utils     datasets 
[8] methods   base     

other attached packages:
[1] cowplot_0.9.2         GenomicRanges_1.31.23 GenomeInfoDb_1.15.5  
[4] IRanges_2.13.28       S4Vectors_0.17.42     BiocGenerics_0.26.0  
[7] ggplot2_2.2.1         dplyr_0.7.4          

loaded via a namespace (and not attached):
 [1] Rcpp_0.12.16           XVector_0.20.0         bindr_0.1.1           
 [4] magrittr_1.5           zlibbioc_1.26.0        munsell_0.4.3         
 [7] colorspace_1.3-2       R6_2.2.2               rlang_0.2.0           
[10] plyr_1.8.4             grid_3.5.0             gtable_0.2.0          
[13] digest_0.6.15          lazyeval_0.2.1         assertthat_0.2.0      
[16] tibble_1.4.2           bindrcpp_0.2.2         GenomeInfoDbData_1.1.0
[19] bitops_1.0-6           RCurl_1.95-4.10        glue_1.2.0            
[22] labeling_0.3           compiler_3.5.0         pillar_1.2.1          
[25] scales_0.5.0           pkgconfig_2.0.1       
> 
> proc.time()
    user   system  elapsed 
1999.564   51.592 2059.029 
