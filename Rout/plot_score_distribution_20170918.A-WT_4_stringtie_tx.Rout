
R Under development (unstable) (2017-12-14 r73916) -- "Unsuffered Consequences"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> args <- (commandArgs(trailingOnly = TRUE))
> for (i in 1:length(args)) {
+   eval(parse(text = args[[i]]))
+ }
> 
> quantmethods <- strsplit(quantmethods, ",")[[1]]
> 
> print(scorerds)
[1] "alpine/20170918.A-WT_4_stringtie_tx/alpine_scores.rds"
> print(gexrds)  ## gene expression
[1] "alpine/20170918.A-WT_4_stringtie_tx/alpine_gene_expression.rds"
> print(geneinfords)  ## gene information
[1] "figures/gene_characteristics/gene_characteristics.rds"
> print(exoncountstxt)
[1] "featureCounts/20170918.A-WT_4/20170918.A-WT_4_STAR_exons.txt"
> print(introncountstxt)
[1] "featureCounts/20170918.A-WT_4/20170918.A-WT_4_STAR_introns.txt"
> print(quantmethods)
[1] "hera"      "kallisto"  "RSEM"      "Salmon"    "SalmonBWA" "SalmonCDS"
[7] "StringTie"
> print(outrds)  ## output file
[1] "figures/gene_scores/gene_scores_20170918.A-WT_4_stringtie_tx.rds"
> 
> suppressPackageStartupMessages({
+   library(dplyr)
+   library(ggplot2)
+   library(cowplot)
+ })
> 
> scores <- readRDS(scorerds)
> gex <- readRDS(gexrds)
> geneinfo <- readRDS(geneinfords)
> exoncounts <- read.delim(exoncountstxt, skip = 1, header = TRUE, as.is = TRUE) %>%
+   dplyr::select(-Chr, -Start, -End, -Strand, -Length) %>%
+   setNames(c("gene", "exoncount"))
> introncounts <- read.delim(introncountstxt, skip = 1, header = TRUE, as.is = TRUE) %>%
+   dplyr::select(-Chr, -Start, -End, -Strand, -Length) %>%
+   setNames(c("gene", "introncount"))
> 
> ## Define colors
> method_colors <- c("#DC050C", "#7BAFDE", "#B17BA6", "#F1932D",
+                    "#4EB265", "#CAEDAB", "#777777", "#E8601C",
+                    "#1965B0", "#882E72", "#F6C141", "#F7EE55",
+                    "#90C987")[seq_len(length(unique(scores$method)))]
> names(method_colors) <- unique(scores$method)
> 
> ## Calculate the fraction of multimapping junction reads for each gene
> mmfrac <- scores %>% dplyr::select(junctionid, gene, uniqreads, mmreads) %>%
+   dplyr::distinct() %>% dplyr::group_by(gene) %>% 
+   dplyr::summarize(mmreads = sum(mmreads), uniqreads = sum(uniqreads)) %>% 
+   dplyr::mutate(mmfraction = mmreads/(mmreads + uniqreads)) %>%
+   dplyr::select(gene, mmfraction, uniqreads, mmreads) %>%
+   dplyr::rename(uniq_junc_reads = uniqreads, mm_junc_reads = mmreads)
> 
> ## Get the score for each gene
> gene_scores <- list()
> gene_scores[["score"]] <- scores %>% dplyr::select(gene, method, score) %>% 
+   dplyr::distinct() %>%
+   dplyr::left_join(mmfrac, by = "gene") %>%
+   dplyr::left_join(geneinfo, by = c("gene" = "gene_id")) %>%
+   dplyr::left_join(gex) %>%
+   dplyr::group_by(gene) %>%
+   dplyr::left_join(gex %>% dplyr::filter(method == "Salmon") %>% 
+                      dplyr::select(gene, count) %>% dplyr::rename(salmon_count = count)) %>% 
+   dplyr::filter(method %in% quantmethods)
Joining, by = c("gene", "method")
Joining, by = "gene"
> 
> gene_scores[["scoreMM"]] <- scores %>% dplyr::select(gene, method, scoreMM) %>% 
+   dplyr::distinct() %>%
+   dplyr::left_join(mmfrac, by = "gene") %>%
+   dplyr::left_join(geneinfo, by = c("gene" = "gene_id")) %>%
+   dplyr::left_join(gex) %>%
+   dplyr::group_by(gene) %>%
+   dplyr::left_join(gex %>% dplyr::filter(method == "Salmon") %>% 
+                      dplyr::select(gene, count) %>% dplyr::rename(salmon_count = count)) %>% 
+   dplyr::filter(method %in% quantmethods)
Joining, by = c("gene", "method")
Joining, by = "gene"
> 
> ## Add ratio between intron and exon reads
> intron_exon_ratio <- dplyr::full_join(exoncounts, introncounts) %>% 
+   dplyr::mutate(introncount = replace(introncount, is.na(introncount), 0)) %>%
+   dplyr::mutate(intron_exon_ratio = introncount/exoncount) %>%
+   dplyr::mutate(intron_exon_ratio = replace(intron_exon_ratio, exoncount==0 & introncount==0, 0))
Joining, by = "gene"
> gene_scores <- lapply(gene_scores, function(w) {
+   dplyr::left_join(w, intron_exon_ratio)
+ })
Joining, by = "gene"
Joining, by = "gene"
> 
> for (sc in c("score", "scoreMM")) {
+   png(gsub("\\.rds$", paste0("_", sc, ".png"), outrds), width = 14, 
+       height = 14, unit = "in", res = 300)
+   
+   ## Plot score distribution
+   print(
+     cowplot::plot_grid(
+       ggplot(gene_scores[[sc]], aes_string(x = 1, y = sc, fill = "method")) + 
+         geom_violin() + theme_bw() + facet_wrap(~ method, nrow = 1) + 
+         scale_color_manual(values = method_colors) + 
+         theme(legend.position = "none") + xlab(""), 
+       
+       ggplot(gene_scores[[sc]], aes_string(x = "mmfraction", y = sc, color = "method")) + 
+         geom_point(alpha = 0.5, size = 0.5) + theme_bw() + facet_wrap(~ method, nrow = 1) + 
+         geom_smooth(color = "black", method = "loess") + xlab("Fraction multimapping reads") + 
+         theme(legend.position = "none"),
+       
+       ggplot(gene_scores[[sc]] %>% dplyr::mutate(intron_exon_ratio = replace(intron_exon_ratio, 
+                                                                              intron_exon_ratio > 10, 10)), 
+              aes_string(x = "intron_exon_ratio", y = sc, color = "method")) + 
+         geom_point(alpha = 0.5, size = 0.5) + theme_bw() + facet_wrap(~ method, nrow = 1) + 
+         geom_smooth(color = "black", method = "loess") + xlab("Intron/exon count ratio") + 
+         theme(legend.position = "none"),
+       
+       ggplot(gene_scores[[sc]], aes_string(x = "salmon_count", y = sc, color = "method")) + 
+         geom_point(alpha = 0.5, size = 0.5) + theme_bw() + facet_wrap(~ method, nrow = 1) + 
+         geom_smooth(color = "black", method = "loess") + xlab("Salmon gene count") + scale_x_sqrt() + 
+         theme(legend.position = "none"),
+       
+       ggplot(gene_scores[[sc]], aes_string(x = "length_diff_3putrs_samestart", y = sc, color = "method")) + 
+         geom_point(alpha = 0.5, size = 0.5) + theme_bw() + facet_wrap(~ method, nrow = 1) + 
+         geom_smooth(color = "black", method = "loess") + xlab("Length difference of 3'UTRs with same start") + 
+         theme(legend.position = "none"),
+       
+       ncol = 1      
+     )
+   )
+   
+   dev.off()
+ }
There were 18 warnings (use warnings() to see them)
> 
> 
> saveRDS(NULL, file = outrds)
> sessionInfo()
R Under development (unstable) (2017-12-14 r73916)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 16.04.4 LTS

Matrix products: default
BLAS: /usr/local/R/R-devel/lib/libRblas.so
LAPACK: /usr/local/R/R-devel/lib/libRlapack.so

locale:
 [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       
 [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   
 [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          
[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] bindrcpp_0.2.2 cowplot_0.9.2  ggplot2_2.2.1  dplyr_0.7.4   

loaded via a namespace (and not attached):
 [1] Rcpp_0.12.16     assertthat_0.2.0 plyr_1.8.4       grid_3.5.0      
 [5] R6_2.2.2         gtable_0.2.0     magrittr_1.5     scales_0.5.0    
 [9] pillar_1.2.1     rlang_0.2.0      lazyeval_0.2.1   labeling_0.3    
[13] glue_1.2.0       munsell_0.4.3    compiler_3.5.0   colorspace_1.3-2
[17] pkgconfig_2.0.1  bindr_0.1.1      tibble_1.4.2    
> date()
[1] "Mon May  7 21:17:31 2018"
> 
> proc.time()
   user  system elapsed 
312.420  86.668 399.408 
