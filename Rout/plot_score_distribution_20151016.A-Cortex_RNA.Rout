
R Under development (unstable) (2017-12-14 r73916) -- "Unsuffered Consequences"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> args <- (commandArgs(trailingOnly = TRUE))
> for (i in 1:length(args)) {
+   eval(parse(text = args[[i]]))
+ }
> 
> quantmethods <- strsplit(quantmethods, ",")[[1]]
> 
> print(scorerds)
[1] "output/20151016.A-Cortex_RNA_combined_coverages_with_scores.rds"
> print(quantmethods)
[1] "hera"      "kallisto"  "RSEM"      "Salmon"    "SalmonBWA" "SalmonCDS"
[7] "StringTie"
> print(outrds)  ## output file
[1] "figures/gene_scores/gene_scores_20151016.A-Cortex_RNA.rds"
> 
> suppressPackageStartupMessages({
+   library(dplyr)
+   library(ggplot2)
+   library(cowplot)
+ })
> 
> scores <- readRDS(scorerds)$genes
> 
> ## Define colors
> method_colors <- c("#DC050C", "#7BAFDE", "#B17BA6", "#F1932D",
+                    "#4EB265", "#CAEDAB", "#777777", "#E8601C",
+                    "#1965B0", "#882E72", "#F6C141", "#F7EE55",
+                    "#90C987")[seq_len(length(unique(scores$method)))]
> names(method_colors) <- unique(scores$method)
> 
> scores <- scores %>% dplyr::filter(method %in% quantmethods)
> 
> ## Characterize genes with NA score
> scoresNA <- scores %>% #dplyr::filter(is.na(score)) %>% 
+   dplyr::group_by(method) %>% 
+   dplyr::summarize(
+     valid_score = sum(!is.na(score)),
+     not_expressed = sum(is.na(score) & count == 0),
+     no_junctions = sum(is.na(score) & count > 0 & nbr_junctions_in_gene == 0, na.rm = TRUE),
+     junctions_but_no_unique_reads = sum(is.na(score) & count > 0 & 
+                                           nbr_junctions_in_gene > 0 & uniqjuncreads == 0, na.rm = TRUE),
+     junctions_but_too_few_unique_reads = sum(is.na(score) & count > 0 & nbr_junctions_in_gene > 0 & 
+                                                uniqjuncreads > 0 & uniqjuncfraction <= 0.75, na.rm = TRUE),
+     other = length(count) - valid_score - not_expressed - no_junctions - junctions_but_no_unique_reads - 
+       junctions_but_too_few_unique_reads) %>% 
+   tidyr::gather(reason, number, -method) %>% 
+   dplyr::mutate(reason = replace(reason, reason == "valid_score", "Valid score"),
+                 reason = replace(reason, reason == "not_expressed", "Estimated abundance = 0"),
+                 reason = replace(reason, reason == "no_junctions", "No junctions"),
+                 reason = replace(reason, reason == "junctions_but_no_unique_reads", 
+                                  "Has junctions, but no uniquely mapping junction reads"),
+                 reason = replace(reason, reason == "junctions_but_too_few_unique_reads",
+                                  "Has junctions, but too large fraction multimapping junction reads"),
+                 reason = replace(reason, reason == "other", "Other")) %>%
+   dplyr::mutate(reason = factor(reason, levels = c("Has junctions, but too large fraction multimapping junction reads",
+                                                    "Has junctions, but no uniquely mapping junction reads",
+                                                    "No junctions",
+                                                    "Other", "Estimated abundance = 0", "Valid score")))
> png(gsub("\\.rds$", "_NAscores.png", outrds), width = 7, height = 6, 
+     unit = "in", res = 300)
> print(ggplot(scoresNA, aes(x = method, y = number, fill = reason)) + 
+         geom_bar(stat = "identity") + theme_bw() + 
+         theme(legend.position = "bottom") + 
+         guides(fill = guide_legend(nrow = 2, title = "")) + 
+         scale_fill_manual(values = c("blue", "orange", "green", "cyan", "black", "grey")) + 
+         xlab("") + ylab("Number of genes"))
> dev.off()
null device 
          1 
> 
> for (mincount in c(0, 1000)) {
+   png(gsub("\\.rds$", paste0("_min", mincount, "reads.png"), outrds), width = 14, 
+       height = 14, unit = "in", res = 300)
+   
+   ## Plot score distribution
+   print(
+     cowplot::plot_grid(
+       ggplot(scores %>% dplyr::filter(!is.na(score) & count >= mincount), 
+              aes(x = 1, y = score, fill = method)) + 
+         geom_violin() + theme_bw() + facet_wrap(~ method, nrow = 1) + 
+         scale_fill_manual(values = method_colors) + 
+         theme(legend.position = "none") + xlab(""), 
+       
+       ggplot(scores %>% dplyr::filter(!is.na(score) & count >= mincount),
+              aes(x = uniqjuncfraction, y = score, color = method)) +
+         geom_point(alpha = 0.5, size = 0.5) + theme_bw() + facet_wrap(~ method, nrow = 1) +
+         geom_smooth(color = "black", method = "loess") + xlab("Fraction uniquely mapping junction reads") +
+         theme(legend.position = "none") + 
+         scale_color_manual(values = method_colors),
+       
+       ggplot(scores %>% dplyr::filter(!is.na(score) & count >= mincount) %>% 
+                dplyr::mutate(intron_exon_ratio = replace(intron_exon_ratio, 
+                                                          intron_exon_ratio > 10, 10)), 
+              aes(x = intron_exon_ratio, y = score, color = method)) + 
+         geom_point(alpha = 0.5, size = 0.5) + theme_bw() + facet_wrap(~ method, nrow = 1) + 
+         geom_smooth(color = "black", method = "loess") + xlab("Intron/exon count ratio") + 
+         theme(legend.position = "none") + 
+         scale_color_manual(values = method_colors),
+       
+       ggplot(scores %>% dplyr::filter(!is.na(score) & count >= mincount),
+              aes(x = count, y = score, color = method)) + 
+         geom_point(alpha = 0.5, size = 0.5) + theme_bw() + facet_wrap(~ method, nrow = 1, scales = "free_x") + 
+         geom_smooth(color = "black", method = "loess") + xlab("Gene count") + scale_x_sqrt() + 
+         theme(legend.position = "none") + 
+         scale_color_manual(values = method_colors),
+     
+       ggplot(scores %>% dplyr::filter(!is.na(score) & count >= mincount) %>%
+                dplyr::mutate(nbr_transcripts = replace(nbr_transcripts,
+                                                        nbr_transcripts > 60, 60)), 
+              aes(x = nbr_transcripts, y = score, color = method)) + 
+         geom_point(alpha = 0.5, size = 0.5) + theme_bw() + facet_wrap(~ method, nrow = 1) + 
+         geom_smooth(color = "black", method = "loess") + xlab("Number of transcripts") +  
+         theme(legend.position = "none") + 
+         scale_color_manual(values = method_colors),
+       
+       ggplot(scores %>% dplyr::filter(!is.na(score) & count >= mincount) %>%
+                dplyr::mutate(nbr_junctions_in_gene = replace(nbr_junctions_in_gene,
+                                                              nbr_junctions_in_gene > 700, 700)),
+              aes(x = nbr_junctions_in_gene, y = score, color = method)) + 
+         geom_point(alpha = 0.5, size = 0.5) + theme_bw() + facet_wrap(~ method, nrow = 1) + 
+         geom_smooth(color = "black", method = "loess") + xlab("Number of junctions") +  
+         theme(legend.position = "none") + 
+         scale_color_manual(values = method_colors),
+       
+       ggplot(scores %>% dplyr::filter(!is.na(score) & count >= mincount),
+              aes(x = length_diff_3putrs_samestart, y = score, color = method)) + 
+         geom_point(alpha = 0.5, size = 0.5) + theme_bw() + facet_wrap(~ method, nrow = 1) + 
+         geom_smooth(color = "black", method = "loess") + xlab("Length difference of 3'UTRs with same start") + 
+         theme(legend.position = "none") + 
+         scale_color_manual(values = method_colors),
+       
+       ncol = 1      
+     )
+   )
+   
+   dev.off()
+ }
Warning messages:
1: Removed 24287 rows containing non-finite values (stat_smooth). 
2: Removed 24287 rows containing missing values (geom_point). 
3: Removed 1425 rows containing non-finite values (stat_smooth). 
4: Removed 1425 rows containing missing values (geom_point). 
> 
> saveRDS(NULL, file = outrds)
> sessionInfo()
R Under development (unstable) (2017-12-14 r73916)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 16.04.4 LTS

Matrix products: default
BLAS: /usr/local/R/R-devel/lib/libRblas.so
LAPACK: /usr/local/R/R-devel/lib/libRlapack.so

locale:
 [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       
 [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   
 [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          
[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] bindrcpp_0.2.2 cowplot_0.9.2  ggplot2_2.2.1  dplyr_0.7.4   

loaded via a namespace (and not attached):
 [1] Rcpp_0.12.16     tidyr_0.8.0      digest_0.6.15    assertthat_0.2.0
 [5] plyr_1.8.4       grid_3.5.0       R6_2.2.2         gtable_0.2.0    
 [9] magrittr_1.5     scales_0.5.0     pillar_1.2.1     rlang_0.2.0     
[13] lazyeval_0.2.1   labeling_0.3     glue_1.2.0       purrr_0.2.4     
[17] munsell_0.4.3    compiler_3.5.0   colorspace_1.3-2 pkgconfig_2.0.1 
[21] tidyselect_0.2.4 bindr_0.1.1      tibble_1.4.2    
> date()
[1] "Sat May 12 17:18:53 2018"
> 
> proc.time()
   user  system elapsed 
512.356  51.240 564.029 
