
R version 3.4.0 (2017-04-21) -- "You Stupid Darkness"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> args <- (commandArgs(trailingOnly = TRUE))
> for (i in 1:length(args)) {
+   eval(parse(text = args[[i]]))
+ }
> 
> print(gtf)
[1] "/home/Shared/data/annotation/Human/Ensembl_GRCh38.90/gtf/Homo_sapiens.GRCh38.90.gtf"
> print(txome)
[1] "reference/Homo_sapiens.GRCh38.cdna.ncrna.fa"
> print(outrds)
[1] "output/characterize_genes.rds"
> 
> suppressPackageStartupMessages(library(rtracklayer))
> suppressPackageStartupMessages(library(Biostrings))
> suppressPackageStartupMessages(library(dplyr))
> suppressPackageStartupMessages(library(ggplot2))
> 
> gtf <- rtracklayer::import(gtf, format = "gtf")
> txome <- readDNAStringSet(txome)
> 
> ## Number of exons per transcript, total exon length per transcript
> exons <- as.data.frame(gtf) %>% dplyr::filter(type == "exon") %>% 
+   dplyr::group_by(transcript_id) %>%
+   dplyr::summarize(nbr_exons = length(exon_id),
+                    tx_length = sum(width),
+                    gene_id = gene_id[1])
> 
> ## 3' UTRs per transcript
> utrs <- as.data.frame(gtf) %>% dplyr::filter(type == "three_prime_utr") %>%
+   dplyr::group_by(transcript_id) %>%
+   dplyr::summarize(start = min(start), end = max(end), width = sum(width), 
+                    seqnames = seqnames[1], gene_id = gene_id[1], strand = strand[1])
> 
> ## If a gene has multiple 3'UTRs starting in the same place but with different
> ## length, get the length difference
> tmp <- utrs %>% dplyr::select(-transcript_id)
> tmp <- split(tmp, tmp$gene_id)
> tmp2 <- sapply(tmp, function(w) {
+   if (all(w$strand == "-")) {
+     w %>% group_by(end) %>% summarize(widthdiff = max(width) - min(width)) %>% 
+       select(widthdiff) %>% max
+   } else if (all(w$strand == "+")) {
+     w %>% group_by(start) %>% summarize(widthdiff = max(width) - min(width)) %>% 
+       select(widthdiff) %>% max
+   } else {
+     0
+   }
+ })
> 
> ## Summarize on gene level
> gene_char <- dplyr::full_join(
+   exons %>% dplyr::group_by(gene_id) %>%
+     dplyr::summarize(nbr_transcripts_gtf = length(transcript_id),
+                      ave_transcript_length_gtf = mean(tx_length),
+                      min_transcript_length_gtf = min(tx_length),
+                      max_transcript_length_gtf = max(tx_length),
+                      median_transcript_length_gtf = median(tx_length),
+                      ave_nbr_exons = mean(nbr_exons),
+                      min_nbr_exons = min(nbr_exons),
+                      max_nbr_exons = max(nbr_exons),
+                      median_nbr_exons = median(nbr_exons)),
+   utrs %>% dplyr::select(-transcript_id) %>% dplyr::distinct() %>% 
+     dplyr::group_by(gene_id) %>% 
+     dplyr::summarize(nbr_distinct_3putrs = length(unique(paste0(start, ".", end))),
+                      max_3putr_length = max(width),
+                      min_3putr_length = min(width),
+                      ave_3putr_length = mean(width),
+                      median_3putr_length = median(width))
+ ) %>% dplyr::full_join(data.frame(gene_id = names(tmp2), length_diff_3putrs_samestart = tmp2,
+                                   stringsAsFactors = FALSE))
Joining, by = "gene_id"
Joining, by = "gene_id"
> 
> ## Add information about the genes that are not present in the gtf
> tx_info <- data.frame(width = width(txome), id = names(txome),
+                       stringsAsFactors = FALSE) %>%
+   dplyr::mutate(transcript_id = sapply(strsplit(id, " "), .subset, 1)) %>%
+   dplyr::mutate(gene_id = sapply(strsplit(id, " "), 
+                                  function(w) gsub("^gene:", "", w[grep("^gene:", w)]))) %>%
+   dplyr::select(transcript_id, gene_id, width) %>%
+   dplyr::mutate(transcript_id = gsub("\\.[0-9]+$", "", transcript_id),
+                 gene_id = gsub("\\.[0-9]+$", "", gene_id))
> gene_info <- tx_info %>% dplyr::group_by(gene_id) %>%
+   dplyr::summarize(nbr_transcripts_fasta = length(transcript_id),
+                    ave_transcript_length_fasta = mean(width),
+                    min_transcript_length_fasta = min(width),
+                    max_transcript_length_fasta = max(width),
+                    median_transcript_length_fasta = median(width))
> 
> ## Whenever a gene is present in both fasta and gtf, the information agrees.
> ## Generate new columns consolidating the information from both sources.
> gene_info <- dplyr::full_join(gene_char, gene_info) %>%
+   dplyr::mutate(nbr_transcripts = pmax(nbr_transcripts_gtf, nbr_transcripts_fasta, na.rm = TRUE),
+                 ave_transcript_length = pmax(ave_transcript_length_gtf,
+                                              ave_transcript_length_fasta, na.rm = TRUE),
+                 min_transcript_length = pmax(min_transcript_length_gtf,
+                                              min_transcript_length_fasta, na.rm = TRUE),
+                 max_transcript_length = pmax(max_transcript_length_gtf,
+                                              max_transcript_length_fasta, na.rm = TRUE),
+                 median_transcript_length = pmax(median_transcript_length_gtf,
+                                                 median_transcript_length_fasta, na.rm = TRUE))
Joining, by = "gene_id"
> 
> 
> pdf(gsub("rds$", "pdf", outrds))
> 
> ggplot(gene_info, aes(x = nbr_transcripts)) + geom_histogram(bins = 100) + 
+   theme_bw() + xlab("Number of transcripts per gene") + scale_x_sqrt()
> ggplot(gene_info, aes(x = ave_transcript_length)) + geom_histogram(bins = 100) + 
+   theme_bw() + xlab("Average transcript length per gene") + scale_x_sqrt()
> ggplot(gene_info, aes(x = ave_nbr_exons)) + geom_histogram(bins = 100) + 
+   theme_bw() + xlab("Average number of exons in a transcript per gene") + scale_x_sqrt()
Warning message:
Removed 5638 rows containing non-finite values (stat_bin). 
> ggplot(gene_info, aes(x = nbr_distinct_3putrs)) + geom_histogram(bins = 100) + 
+   theme_bw() + xlab("Number of distinct 3'UTRs per gene") + scale_x_sqrt()
Warning message:
Removed 44491 rows containing non-finite values (stat_bin). 
> ggplot(gene_info, aes(x = ave_3putr_length)) + geom_histogram(bins = 100) + 
+   theme_bw() + xlab("Average 3'UTR length per gene") + scale_x_sqrt()
Warning message:
Removed 44491 rows containing non-finite values (stat_bin). 
> ggplot(gene_info, aes(x = length_diff_3putrs_samestart)) + geom_histogram(bins = 100) + 
+   theme_bw() + xlab("Length difference between 3'UTRs with the same start position") + 
+   scale_x_sqrt()
Warning message:
Removed 44491 rows containing non-finite values (stat_bin). 
> 
> dev.off()
null device 
          1 
> 
> saveRDS(gene_info, file = outrds)
> sessionInfo()
R version 3.4.0 (2017-04-21)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 14.04.5 LTS

Matrix products: default
BLAS: /usr/local/R/R-3.4.0/lib/libRblas.so
LAPACK: /usr/local/R/R-3.4.0/lib/libRlapack.so

locale:
 [1] LC_CTYPE=en_CA.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_CA.UTF-8        LC_COLLATE=en_CA.UTF-8    
 [5] LC_MONETARY=en_CA.UTF-8    LC_MESSAGES=en_CA.UTF-8   
 [7] LC_PAPER=en_CA.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_CA.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] parallel  stats4    stats     graphics  grDevices utils     datasets 
[8] methods   base     

other attached packages:
 [1] bindrcpp_0.2         ggplot2_2.2.1        dplyr_0.7.4         
 [4] Biostrings_2.44.2    XVector_0.16.0       rtracklayer_1.36.4  
 [7] GenomicRanges_1.28.5 GenomeInfoDb_1.12.2  IRanges_2.10.3      
[10] S4Vectors_0.14.5     BiocGenerics_0.22.0 

loaded via a namespace (and not attached):
 [1] Rcpp_0.12.13               compiler_3.4.0            
 [3] plyr_1.8.4                 bindr_0.1                 
 [5] bitops_1.0-6               tools_3.4.0               
 [7] zlibbioc_1.22.0            tibble_1.3.4              
 [9] gtable_0.2.0               lattice_0.20-35           
[11] pkgconfig_2.0.1            rlang_0.1.2               
[13] Matrix_1.2-11              DelayedArray_0.2.7        
[15] GenomeInfoDbData_0.99.0    grid_3.4.0                
[17] glue_1.1.1                 Biobase_2.36.2            
[19] R6_2.2.2                   XML_3.98-1.9              
[21] BiocParallel_1.10.1        magrittr_1.5              
[23] Rsamtools_1.28.0           scales_0.5.0              
[25] matrixStats_0.52.2         GenomicAlignments_1.12.2  
[27] assertthat_0.2.0           SummarizedExperiment_1.6.5
[29] colorspace_1.3-2           labeling_0.3              
[31] lazyeval_0.2.0             RCurl_1.95-4.8            
[33] munsell_0.4.3             
> date()
[1] "Tue Nov 28 16:08:54 2017"
> 
> proc.time()
   user  system elapsed 
606.065  39.595 649.096 
