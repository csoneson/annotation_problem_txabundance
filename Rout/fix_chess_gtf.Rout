
R Under development (unstable) (2017-12-14 r73916) -- "Unsuffered Consequences"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ################################################################################
> ##                                                                            ##
> ## Fix CHESS gtf to be compatible with the analysis framework                 ##
> ##                                                                            ##
> ## Inputs:                                                                    ##
> ## * ingtf: input gtf from CHESS                                              ##
> ## * ingenes: list of genes present in CHESS gtf file, with Entrez IDs        ##
> ## * outgtf: output gtf file                                                  ##
> ## * outinfo: output file containing mapping between gene IDs and symbols     ##
> ##                                                                            ##
> ## Outputs:                                                                   ##
> ## * Modified gtf file                                                        ##
> ##                                                                            ##
> ################################################################################
> 
> args <- (commandArgs(trailingOnly = TRUE))
> for (i in 1:length(args)) {
+   eval(parse(text = args[[i]]))
+ }
> 
> print(ingtf)
[1] "reference_chess/chess2.0_assembly.gff"
> print(ingenes)
[1] "reference_chess/chess2.0.genes"
> print(outgtf)
[1] "reference_chess/chess2.0_assembly_fixed.gtf"
> print(outinfo)
[1] "reference_chess/gene_id_to_symbol.rds"
> 
> suppressPackageStartupMessages({
+   library(GenomeInfoDb)
+   library(rtracklayer)
+   library(readr)
+   library(org.Hs.eg.db)
+   library(dplyr)
+ })
> 
> ## Read list of genes and add Ensembl ID where it is available
> genes <- read.delim(ingenes, header = TRUE, as.is = TRUE)
> map <- AnnotationDbi::select(org.Hs.eg.db, keys = as.character(genes$RefSeq_GeneID), 
+                              keytype = "ENTREZID", columns = c("ENTREZID", "ENSEMBL"))
'select()' returned many:many mapping between keys and columns
> genes$ensembl_id <- map$ENSEMBL[match(genes$RefSeq_GeneID, map$ENTREZID)]
> 
> 
> ## Read original gtf file
> tmp <- read_tsv(ingtf, comment = "##", col_names = FALSE, col_types = "cccddcccc")
> tmp <- as.data.frame(tmp)
> 
> ## Convert all ranges to integers and write back to file
> tmp$X4 <- as.integer(tmp$X4)
> tmp$X5 <- as.integer(tmp$X5)
> rn <- round(1e6 * runif(1))
> write.table(tmp, file = paste0("tmp", rn, ".gff"), row.names = FALSE,
+             col.names = FALSE, quote = FALSE, sep = "\t")
> 
> ## Read back with rtracklayer and remove intermediate file
> gtf <- import(paste0("tmp", rn, ".gff"), format = "gff")
> unlink(paste0("tmp", rn, ".gff"))
> 
> ## Convert sequence names to Ensembl format
> seqlevelsStyle(gtf) <- "NCBI"
> 
> gtf$gene_id <- gtf$ID
> gtf$gene_id[gtf$type %in% c("transcript", "tRNA", "rRNA")] <- 
+   as.character(gtf$Parent[gtf$type %in% c("transcript", "tRNA", "rRNA")])
> gtf$gene_id[gtf$type %in% c("exon", "CDS")] <- 
+   as.character(gtf$Parent[as.numeric(match(gtf$Parent[gtf$type %in% c("exon", "CDS")], gtf$ID))])
> 
> gtf$gene_name <- genes$ensembl_id[match(gtf$gene_id, genes$GFF_ID)]
> 
> gtf$transcript_name <- gtf$transcript_id
> 
> gtf$transcript_id <- NA_character_
> gtf$transcript_id[gtf$type %in% c("transcript", "tRNA", "rRNA")] <- 
+   as.character(gtf$ID[gtf$type %in% c("transcript", "tRNA", "rRNA")])
> gtf$transcript_id[gtf$type %in% c("exon", "CDS")] <- 
+   as.character(gtf$Parent[gtf$type %in% c("exon", "CDS")])
> 
> gtf$exon_id <- NA_character_
> gtf$exon_id[gtf$type == "exon"] <- paste0("E", seq_len(length(which(gtf$type == "exon"))))
> 
> gtf$phase <- 0
> 
> mcols(gtf) <- mcols(gtf)[, c("source", "type", "score", "phase", "gene_id", 
+                              "transcript_id", "exon_id", "gene_name", "transcript_name")]
> 
> gtf <- subset(gtf, source != "tRNAscan-SE")
> 
> ## Save a file with the conversion between gene ID and "symbol" (here, Ensembl ID)
> saveRDS(as.data.frame(mcols(gtf)) %>% dplyr::select(gene_id, gene_name) %>%
+           dplyr::rename(gene = gene_id, symbol = gene_name),
+         file = outinfo)
> 
> rtracklayer::export(gtf, outgtf, format = "gtf")
> 
> date()
[1] "Wed May 30 14:00:52 2018"
> sessionInfo()
R Under development (unstable) (2017-12-14 r73916)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 16.04.4 LTS

Matrix products: default
BLAS: /usr/local/R/R-devel/lib/libRblas.so
LAPACK: /usr/local/R/R-devel/lib/libRlapack.so

locale:
 [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8       
 [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8   
 [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C          
[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C   

attached base packages:
[1] stats4    parallel  stats     graphics  grDevices utils     datasets 
[8] methods   base     

other attached packages:
 [1] dplyr_0.7.4           org.Hs.eg.db_3.6.0    AnnotationDbi_1.41.5 
 [4] Biobase_2.39.2        readr_1.1.1           rtracklayer_1.39.12  
 [7] GenomicRanges_1.31.23 GenomeInfoDb_1.15.5   IRanges_2.13.28      
[10] S4Vectors_0.17.42     BiocGenerics_0.26.0  

loaded via a namespace (and not attached):
 [1] Rcpp_0.12.16                bindr_0.1.1                
 [3] compiler_3.5.0              pillar_1.2.1               
 [5] XVector_0.20.0              bitops_1.0-6               
 [7] tools_3.5.0                 zlibbioc_1.26.0            
 [9] digest_0.6.15               bit_1.1-12                 
[11] RSQLite_2.1.0               memoise_1.1.0              
[13] tibble_1.4.2                lattice_0.20-35            
[15] pkgconfig_2.0.1             rlang_0.2.0                
[17] Matrix_1.2-14               DelayedArray_0.5.30        
[19] DBI_0.8                     bindrcpp_0.2.2             
[21] GenomeInfoDbData_1.1.0      Biostrings_2.47.12         
[23] hms_0.4.2                   bit64_0.9-7                
[25] grid_3.5.0                  glue_1.2.0                 
[27] R6_2.2.2                    XML_3.98-1.11              
[29] BiocParallel_1.13.3         magrittr_1.5               
[31] blob_1.1.1                  Rsamtools_1.31.3           
[33] matrixStats_0.53.1          GenomicAlignments_1.15.13  
[35] assertthat_0.2.0            SummarizedExperiment_1.9.16
[37] RCurl_1.95-4.10            
> 
> proc.time()
   user  system elapsed 
457.092   8.540 466.534 
