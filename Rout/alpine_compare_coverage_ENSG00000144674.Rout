
R version 3.4.0 (2017-04-21) -- "You Stupid Darkness"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> args <- (commandArgs(trailingOnly = TRUE))
> for (i in 1:length(args)) {
+   eval(parse(text = args[[i]]))
+ }
> 
> print(gene)  ## gene of interest, or file listing collection of genes (one per row)
[1] "ENSG00000144674"
> print(bam)  ## bam file
[1] "STAR/20151016.A-Cortex_RNA/20151016.A-Cortex_RNA_Aligned.sortedByCoord.out.bam"
> print(bigwig)  ## bigwig file for visualization
[1] "STARbigwig/20151016.A-Cortex_RNA_Aligned.sortedByCoord.out.bw"
> print(genemodels)  ## gene models etc (output of alpine_prepare_for_comparison.R)
[1] "alpine/alpine_genemodels.rds"
> print(biasmodels)  ## bias model object (output of alpine_fitbiasmodel.R)
[1] "alpine/alpine_fitbiasmodel.rds"
> print(ncores)  ## number of cores for parallel computations
[1] 1
> print(outdir)  ## output directory
[1] "alpine_out"
> print(checkdir)  ## directory to write (empty) rds files (time stamps)
[1] "alpine_check"
> 
> suppressPackageStartupMessages(library(dplyr))
> suppressPackageStartupMessages(library(alpine))
> suppressPackageStartupMessages(library(GenomicAlignments))
> suppressPackageStartupMessages(library(BSgenome.Hsapiens.NCBI.GRCh38))
> suppressPackageStartupMessages(library(ggplot2))
> suppressPackageStartupMessages(library(cowplot))
> suppressPackageStartupMessages(library(ggrepel))
> suppressPackageStartupMessages(library(parallel))
> suppressPackageStartupMessages(library(grid))
> suppressPackageStartupMessages(library(gridExtra))
> 
> source("Rscripts/plot_tracks.R")
> 
> calc_prop_p <- function(coverage, uniqreads, tot_coverage, tot_reads) {
+   sapply(seq_along(coverage), function(i) {
+     prop.test(x = c(coverage[i], uniqreads[i]), n = c(tot_coverage[i], tot_reads[i]),
+               alternative = "two.sided")$p.value
+   })
+ }
> 
> ## Read gene models for Gviz plot (pregenerated from gtf to save time) and
> ## Salmon quantifications
> genemodels <- readRDS(genemodels)
> 
> ## Read bias model parameters and exon-by-transcript objects
> biasmodels <- readRDS(biasmodels)
> fitpar <- biasmodels$fitpar
> ebt0 <- biasmodels$ebt0
> txps <- biasmodels$txps
> 
> ## Estimate average fragment length
> avefraglength <- sum(fitpar$`1`$fraglen.density$x * fitpar$`1`$fraglen.density$y/
+                        sum(fitpar$`1`$fraglen.density$y))
> 
> ## Load bam file 
> bam.files <- bam
> names(bam.files) <- "1"
> 
> ## Determine which gene(s) to investigate
> if (file.exists(gene)) {
+   genes <- unlist(read.delim(gene, as.is = TRUE, header = FALSE))
+ } else {
+   genes <- gene
+ }
> 
> ## Investigate each gene
> mclapply(genes, function(currgene) {
+   ## Get transcripts for gene of interest
+   txlist <- names(subset(txps, gene_id == currgene))
+   names(txlist) <- txlist
+ 
+     if (length(txlist) > 0) {
+     
+     ## Predict coverage for each transcript
+     pred.cov <- lapply(txlist, function(tx) {
+       message(tx)
+       ## Get transcript model
+       txmod <- ebt0[[tx]]
+       
+       pc <- tryCatch({
+         m <- predictCoverage(gene = txmod,
+                              bam.files = bam.files,
+                              fitpar = fitpar,
+                              genome = Hsapiens,
+                              model.names = "all")
+         ## Scale predicted coverage to agree with Salmon's estimated count
+         m$`1`$pred.cov$all <- m$`1`$pred.cov$all/sum(m$`1`$pred.cov$all) * 
+           genemodels$quantsf$NumReads[genemodels$quantsf$Name == tx] * avefraglength
+         m
+       }, error = function(e) NULL)
+       pc
+     })
+     
+     junctionlist <- lapply(txlist, function(tx) {
+       txmod <- sort(ebt0[[tx]])
+       junctions <- GenomicRanges::setdiff(range(txmod), txmod)
+       if (all(strand(txmod) == "+")) {
+         junctionpos <- cumsum(width(txmod))
+         junctionpos <- junctionpos[-length(junctionpos)]
+         junctioncov <- as.numeric(pred.cov[[tx]]$"1"$pred.cov$all)[junctionpos]
+       } else if (all(strand(txmod) == "-")) {
+         junctionpos <- cumsum(width(rev(txmod)))
+         junctionpos <- junctionpos[-length(junctionpos)]
+         junctioncov <- as.numeric(pred.cov[[tx]]$"1"$pred.cov$all)[junctionpos]
+         junctioncov <- rev(junctioncov)
+       } else {
+         stop("Unknown or mixed strand")
+       }
+       mcols(junctions)$coverage <- junctioncov
+       junctions
+     })
+     
+     
+     jl <- do.call(rbind, lapply(junctionlist, as.data.frame)) %>% 
+       dplyr::group_by(seqnames, start, end, width, strand) %>%
+       dplyr::summarize(coverage = sum(coverage, na.rm = TRUE)) %>% ungroup() %>%
+       dplyr::mutate(coverage = replace(coverage, is.na(coverage), 0))
+     
+     jl <- dplyr::left_join(jl, genemodels$jcov) %>%
+       dplyr::mutate(uniqreads = replace(uniqreads, is.na(uniqreads), 0),
+                     mmreads = replace(mmreads, is.na(mmreads), 0)) %>%
+       dplyr::mutate(scaledcoverage = coverage/sum(coverage, na.rm = TRUE) * sum(uniqreads, na.rm = TRUE)) %>%
+       dplyr::mutate(tot_coverage = sum(coverage, na.rm = TRUE),
+                     tot_reads = sum(uniqreads, na.rm = TRUE)) %>%
+       dplyr::mutate(prop_pval = calc_prop_p(coverage, uniqreads, tot_coverage, tot_reads)) %>%
+       dplyr::mutate(junctionid = paste0("J", seq_len(length(scaledcoverage)))) %>% 
+       dplyr::mutate(difference = uniqreads - scaledcoverage) %>%
+       dplyr::mutate(ranking = order(order(difference))) %>%
+       dplyr::select(junctionid, everything())
+     
+     pdf(paste0(outdir, "/", currgene, ".pdf"), width = 12, height = 10)
+     tryCatch({
+       plot_tracks(mygene = currgene, genemodels = genemodels$genemodels_exon, 
+                   genemodels2 = genemodels$genemodels_cds, 
+                   gtf_file = NULL, rnaseq_datafiles = structure(bigwig, names = "s1"), 
+                   rnaseq_condition = structure("g1", names = "s1"), show_chr = NULL, 
+                   min_coord = NULL, max_coord = NULL, 
+                   pdf_filename = NULL, pdf_width = 7, pdf_height = 7)
+     }, error = function(e) message(e))
+     
+     grid.newpage()
+     grid.table(genemodels$quantsf %>% dplyr::filter(Name %in% txlist))
+     
+     grid.newpage()
+     grid.table(jl %>% dplyr::select(junctionid, seqnames, start, end, width, strand, 
+                                     uniqreads, mmreads, scaledcoverage, prop_pval))
+     
+     print(ggplot(jl, aes(x = scaledcoverage, y = uniqreads, label = junctionid)) + 
+             geom_point(size = 4) + geom_label_repel() + 
+             geom_abline(intercept = 0, slope = 1) + 
+             ggtitle(paste0("score = ", round(sum(abs(jl$uniqreads - jl$scaledcoverage), 
+                                                  na.rm = TRUE)/sum(jl$uniqreads, na.rm = TRUE), 2))) + 
+             xlab("Scaled predicted coverage") + ylab("Number of uniquely mapped reads"))
+     dev.off()
+     
+     write.table(jl %>%
+                   dplyr::mutate(coverage = round(coverage, 2),
+                                 scaledcoverage = round(scaledcoverage, 2),
+                                 difference = round(difference, 2)), 
+                 file = paste0(outdir, "/", gene, ".txt"),
+                 quote = FALSE, row.names = FALSE, col.names = TRUE, sep = "\t")
+     print(as.data.frame(jl))
+     
+     saveRDS(NULL, paste0(checkdir, "/", currgene, ".rds"))
+   }
+ }, mc.preschedule = FALSE, mc.cores = ncores)
ENST00000361924
ENST00000435830
ENST00000444882
ENST00000356847
ENST00000450863
ENST00000617480
ENST00000429018
ENST00000431105
ENST00000419177
ENST00000437131
ENST00000497537
ENST00000498250
Joining, by = c("seqnames", "start", "end", "strand")
   junctionid seqnames    start      end width strand    coverage uniqreads
1          J1        3 37243623 37245302  1680      +   0.4405700         0
2          J2        3 37243623 37251394  7772      +  54.2026060        21
3          J3        3 37245422 37249700  4279      +   0.7712872         0
4          J4        3 37250608 37251394   787      +   0.8350508         0
5          J5        3 37251468 37282091 30624      +   0.9103717         0
6          J6        3 37251485 37266841 15357      +  15.5453488        14
7          J7        3 37251485 37273535 22051      +   5.1486885        14
8          J8        3 37251485 37281957 30473      +  55.7576389         4
9          J9        3 37266941 37273535  6595      +  12.0443001        23
10        J10        3 37273602 37281957  8356      +   7.1087705        33
11        J11        3 37273602 37321730 48129      +   0.2037023         0
12        J12        3 37282273 37286013  3741      +  67.3783545        44
13        J13        3 37282273 37289234  6962      +   2.6390993        11
14        J14        3 37282273 37366079 83807      +  45.4257779         0
15        J15        3 37286062 37287526  1465      +   0.9661452         0
16        J16        3 37286062 37289234  3173      +  70.9021888        36
17        J17        3 37287613 37289234  1622      +   1.0724573         0
18        J18        3 37289290 37294978  5689      +   0.0000000         0
19        J19        3 37289292 37294978  5687      +  92.7630792        45
20        J20        3 37289292 37294981  5690      +   0.0000000         0
21        J21        3 37295078 37296086  1009      + 114.7532366        61
22        J22        3 37296220 37298832  2613      + 131.6880299        61
23        J23        3 37299021 37299287   267      + 153.2793324        54
24        J24        3 37299372 37302184  2813      + 139.1184503        25
25        J25        3 37302333 37302755   423      +   0.0000000         0
26        J26        3 37302333 37313421 11089      +   1.4272231         0
27        J27        3 37302333 37315419 13087      + 147.5573409        64
28        J28        3 37313520 37315419  1900      +   1.2691564         0
29        J29        3 37315599 37319062  3464      + 151.7124590        54
30        J30        3 37319195 37321730  2536      + 147.4910447        61
31        J31        3 37321887 37323587  1701      + 131.2098113        51
32        J32        3 37327826 37328415   590      + 184.0749641       273
33        J33        3 37328538 37328962   425      + 176.5614597       233
34        J34        3 37329094 37335052  5959      + 157.7607228       256
35        J35        3 37335167 37337142  1976      + 146.3252895       225
36        J36        3 37335167 37337665  2499      +  14.1128020        15
37        J37        3 37337164 37337665   502      + 134.1288805       231
38        J38        3 37337735 37340123  2389      + 149.7120174       249
39        J39        3 37340200 37347192  6993      + 149.0905066       292
40        J40        3 37347297 37355100  7804      + 122.9844606       240
41        J41        3 37355188 37361242  6055      +  46.1424119       118
42        J42        3 37355188 37366079 10892      +  60.5711260       117
43        J43        3 37361306 37366079  4774      +  48.8083666       131
   mmreads scaledcoverage tot_coverage tot_reads    prop_pval   difference
1        0      0.4573472     2943.895      3056 1.000000e+00   -0.4573472
2        0     56.2666774     2943.895      3056 9.593279e-05  -35.2666774
3        0      0.8006584     2943.895      3056 1.000000e+00   -0.8006584
4        0      0.8668501     2943.895      3056 1.000000e+00   -0.8668501
5        0      0.9450393     2943.895      3056 1.000000e+00   -0.9450393
6        0     16.1373261     2943.895      3056 8.395843e-01   -2.1373261
7        0      5.3447539     2943.895      3056 8.625652e-02    8.6552461
8        0     57.8809270     2943.895      3056 1.526670e-11  -53.8809270
9        0     12.5029550     2943.895      3056 1.150187e-01   10.4970450
10       1      7.3794772     2943.895      3056 1.305334e-04   25.6205228
11       0      0.2114594     2943.895      3056 1.000000e+00   -0.2114594
12       0     69.9441673     2943.895      3056 1.929085e-02  -25.9441673
13       0      2.7395979     2943.895      3056 5.402149e-02    8.2604021
14       0     47.1556219     2943.895      3056 1.538966e-11  -47.1556219
15       0      1.0029366     2943.895      3056 1.000000e+00   -1.0029366
16       0     73.6021916     2943.895      3056 4.581583e-04  -37.6021916
17       0      1.1132972     2943.895      3056 9.288117e-01   -1.1132972
18       0      0.0000000     2943.895      3056          NaN    0.0000000
19       0     96.2955593     2943.895      3056 2.106316e-05  -51.2955593
20       0      0.0000000     2943.895      3056          NaN    0.0000000
21       0    119.1231165     2943.895      3056 1.778922e-05  -58.1231165
22       0    136.7027981     2943.895      3056 7.983900e-08  -75.7027981
23       0    159.1163118     2943.895      3056 5.108593e-13 -105.1163118
24       0    144.4161739     2943.895      3056 3.664006e-20 -119.4161739
25       0      0.0000000     2943.895      3056          NaN    0.0000000
26       0      1.4815727     2943.895      3056 7.039138e-01   -1.4815727
27       0    153.1764230     2943.895      3056 1.390879e-09  -89.1764230
28       0      1.3174867     2943.895      3056 7.948334e-01   -1.3174867
29       0    157.4897708     2943.895      3056 9.637479e-13 -103.4897708
30       0    153.1076022     2943.895      3056 2.936617e-10  -92.1076022
31       0    136.2063686     2943.895      3056 5.085483e-10  -85.2063686
32       0    191.0846618     2943.895      3056 1.115912e-04   81.9153382
33       0    183.2850381     2943.895      3056 1.441939e-02   49.7149619
34       0    163.7683566     2943.895      3056 5.085780e-06   92.2316434
35       0    151.8974543     2943.895      3056 1.502420e-04   73.1025457
36       0     14.6502270     2943.895      3056 1.000000e+00    0.3497730
37       0    139.2365979     2943.895      3056 1.511830e-06   91.7634021
38       0    155.4131511     2943.895      3056 2.486965e-06   93.5868489
39       0    154.7679727     2943.895      3056 3.757679e-11  137.2320273
40       0    127.6677910     2943.895      3056 3.295904e-09  112.3322090
41       0     47.8995457     2943.895      3056 8.045796e-08   70.1004543
42       0     62.8777150     2943.895      3056 7.172807e-05   54.1222850
43       0     50.6670218     2943.895      3056 3.761531e-09   80.3329782
   ranking
1       23
2       13
3       22
4       21
5       20
6       15
7       30
8        9
9       31
10      32
11      24
12      14
13      29
14      11
15      19
16      12
17      18
18      25
19      10
20      26
21       8
22       7
23       2
24       1
25      27
26      16
27       5
28      17
29       3
30       4
31       6
32      38
33      33
34      40
35      36
36      28
37      39
38      41
39      43
40      42
41      35
42      34
43      37
[[1]]
NULL

> 
> saveRDS(NULL, paste0(checkdir, "/", gene, ".rds"))
> sessionInfo()
R version 3.4.0 (2017-04-21)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 14.04.5 LTS

Matrix products: default
BLAS: /usr/local/R/R-3.4.0/lib/libRblas.so
LAPACK: /usr/local/R/R-3.4.0/lib/libRlapack.so

locale:
 [1] LC_CTYPE=en_CA.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_CA.UTF-8        LC_COLLATE=en_CA.UTF-8    
 [5] LC_MONETARY=en_CA.UTF-8    LC_MESSAGES=en_CA.UTF-8   
 [7] LC_PAPER=en_CA.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_CA.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
 [1] grid      stats4    parallel  stats     graphics  grDevices utils    
 [8] datasets  methods   base     

other attached packages:
 [1] Gviz_1.20.0                           
 [2] gridExtra_2.3                         
 [3] ggrepel_0.7.0                         
 [4] cowplot_0.8.0                         
 [5] ggplot2_2.2.1                         
 [6] BSgenome.Hsapiens.NCBI.GRCh38_1.3.1000
 [7] BSgenome_1.44.2                       
 [8] rtracklayer_1.36.4                    
 [9] GenomicAlignments_1.12.2              
[10] Rsamtools_1.28.0                      
[11] Biostrings_2.44.2                     
[12] XVector_0.16.0                        
[13] SummarizedExperiment_1.6.5            
[14] DelayedArray_0.2.7                    
[15] matrixStats_0.52.2                    
[16] Biobase_2.36.2                        
[17] GenomicRanges_1.28.5                  
[18] GenomeInfoDb_1.12.2                   
[19] IRanges_2.10.3                        
[20] S4Vectors_0.14.5                      
[21] BiocGenerics_0.22.0                   
[22] alpine_1.2.0                          
[23] dplyr_0.7.4                           

loaded via a namespace (and not attached):
 [1] ProtGenerics_1.8.0            bitops_1.0-6                 
 [3] bit64_0.9-7                   RColorBrewer_1.1-2           
 [5] httr_1.3.1                    tools_3.4.0                  
 [7] backports_1.1.1               R6_2.2.2                     
 [9] rpart_4.1-11                  Hmisc_4.0-3                  
[11] DBI_0.7                       lazyeval_0.2.0               
[13] colorspace_1.3-2              nnet_7.3-12                  
[15] curl_2.8.1                    bit_1.1-12                   
[17] compiler_3.4.0                graph_1.54.0                 
[19] htmlTable_1.9                 scales_0.5.0                 
[21] checkmate_1.8.4               RBGL_1.52.0                  
[23] speedglm_0.3-2                stringr_1.2.0                
[25] digest_0.6.12                 foreign_0.8-69               
[27] base64enc_0.1-3               dichromat_2.0-0              
[29] pkgconfig_2.0.1               htmltools_0.3.6              
[31] ensembldb_2.0.4               htmlwidgets_0.9              
[33] rlang_0.1.2                   RSQLite_2.0                  
[35] BiocInstaller_1.26.1          shiny_1.0.5                  
[37] bindr_0.1                     BiocParallel_1.10.1          
[39] acepack_1.4.1                 VariantAnnotation_1.22.3     
[41] RCurl_1.95-4.8                magrittr_1.5                 
[43] GenomeInfoDbData_0.99.0       Formula_1.2-2                
[45] Matrix_1.2-11                 Rcpp_0.12.13                 
[47] munsell_0.4.3                 stringi_1.1.5                
[49] yaml_2.1.14                   MASS_7.3-47                  
[51] zlibbioc_1.22.0               plyr_1.8.4                   
[53] AnnotationHub_2.8.2           blob_1.1.0                   
[55] lattice_0.20-35               splines_3.4.0                
[57] GenomicFeatures_1.28.5        knitr_1.17                   
[59] biomaRt_2.32.1                XML_3.98-1.9                 
[61] glue_1.1.1                    biovizBase_1.24.0            
[63] latticeExtra_0.6-28           data.table_1.10.4            
[65] httpuv_1.3.5                  gtable_0.2.0                 
[67] assertthat_0.2.0              mime_0.5                     
[69] xtable_1.8-2                  AnnotationFilter_1.0.0       
[71] survival_2.41-3               tibble_1.3.4                 
[73] AnnotationDbi_1.38.2          memoise_1.1.0                
[75] bindrcpp_0.2                  cluster_2.0.6                
[77] interactiveDisplayBase_1.14.0
> date()
[1] "Thu Nov  2 16:18:00 2017"
> 
> 
> proc.time()
   user  system elapsed 
 66.664  18.678 477.903 
