
R version 3.4.0 (2017-04-21) -- "You Stupid Darkness"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> args <- (commandArgs(trailingOnly = TRUE))
> for (i in 1:length(args)) {
+   eval(parse(text = args[[i]]))
+ }
> 
> print(gene)  ## gene of interest, or file listing collection of genes (one per row)
[1] "ENSG00000197183"
> print(bam)  ## bam file
[1] "STAR/20151016.A-Cortex_RNA/20151016.A-Cortex_RNA_Aligned.sortedByCoord.out.bam"
> print(bigwig)  ## bigwig file for visualization
[1] "STARbigwig/20151016.A-Cortex_RNA_Aligned.sortedByCoord.out.bw"
> print(genemodels)  ## gene models etc (output of alpine_prepare_for_comparison.R)
[1] "alpine/alpine_genemodels.rds"
> print(biasmodels)  ## bias model object (output of alpine_fitbiasmodel.R)
[1] "alpine/alpine_fitbiasmodel.rds"
> print(ncores)  ## number of cores for parallel computations
[1] 1
> print(outdir)  ## output directory
[1] "alpine_out"
> print(checkdir)  ## directory to write (empty) rds files (time stamps)
[1] "alpine_check"
> 
> suppressPackageStartupMessages(library(dplyr))
> suppressPackageStartupMessages(library(alpine))
> suppressPackageStartupMessages(library(GenomicAlignments))
> suppressPackageStartupMessages(library(BSgenome.Hsapiens.NCBI.GRCh38))
> suppressPackageStartupMessages(library(ggplot2))
> suppressPackageStartupMessages(library(cowplot))
> suppressPackageStartupMessages(library(ggrepel))
> suppressPackageStartupMessages(library(parallel))
> suppressPackageStartupMessages(library(grid))
> suppressPackageStartupMessages(library(gridExtra))
> 
> source("Rscripts/plot_tracks.R")
> 
> calc_prop_p <- function(coverage, uniqreads, tot_coverage, tot_reads) {
+   sapply(seq_along(coverage), function(i) {
+     prop.test(x = c(coverage[i], uniqreads[i]), n = c(tot_coverage[i], tot_reads[i]),
+               alternative = "two.sided")$p.value
+   })
+ }
> 
> ## Read gene models for Gviz plot (pregenerated from gtf to save time) and
> ## Salmon quantifications
> genemodels <- readRDS(genemodels)
> 
> ## Read bias model parameters and exon-by-transcript objects
> biasmodels <- readRDS(biasmodels)
> fitpar <- biasmodels$fitpar
> ebt0 <- biasmodels$ebt0
> txps <- biasmodels$txps
> 
> ## Estimate average fragment length
> avefraglength <- sum(fitpar$`1`$fraglen.density$x * fitpar$`1`$fraglen.density$y/
+                        sum(fitpar$`1`$fraglen.density$y))
> 
> ## Load bam file 
> bam.files <- bam
> names(bam.files) <- "1"
> 
> ## Determine which gene(s) to investigate
> if (file.exists(gene)) {
+   genes <- unlist(read.delim(gene, as.is = TRUE, header = FALSE))
+ } else {
+   genes <- gene
+ }
> 
> ## Investigate each gene
> mclapply(genes, function(currgene) {
+   ## Get transcripts for gene of interest
+   txlist <- names(subset(txps, gene_id == currgene))
+   names(txlist) <- txlist
+ 
+     if (length(txlist) > 0) {
+     
+     ## Predict coverage for each transcript
+     pred.cov <- lapply(txlist, function(tx) {
+       message(tx)
+       ## Get transcript model
+       txmod <- ebt0[[tx]]
+       
+       pc <- tryCatch({
+         m <- predictCoverage(gene = txmod,
+                              bam.files = bam.files,
+                              fitpar = fitpar,
+                              genome = Hsapiens,
+                              model.names = "all")
+         ## Scale predicted coverage to agree with Salmon's estimated count
+         m$`1`$pred.cov$all <- m$`1`$pred.cov$all/sum(m$`1`$pred.cov$all) * 
+           genemodels$quantsf$NumReads[genemodels$quantsf$Name == tx] * avefraglength
+         m
+       }, error = function(e) NULL)
+       pc
+     })
+     
+     junctionlist <- lapply(txlist, function(tx) {
+       txmod <- sort(ebt0[[tx]])
+       junctions <- GenomicRanges::setdiff(range(txmod), txmod)
+       if (all(strand(txmod) == "+")) {
+         junctionpos <- cumsum(width(txmod))
+         junctionpos <- junctionpos[-length(junctionpos)]
+         junctioncov <- as.numeric(pred.cov[[tx]]$"1"$pred.cov$all)[junctionpos]
+       } else if (all(strand(txmod) == "-")) {
+         junctionpos <- cumsum(width(rev(txmod)))
+         junctionpos <- junctionpos[-length(junctionpos)]
+         junctioncov <- as.numeric(pred.cov[[tx]]$"1"$pred.cov$all)[junctionpos]
+         junctioncov <- rev(junctioncov)
+       } else {
+         stop("Unknown or mixed strand")
+       }
+       mcols(junctions)$coverage <- junctioncov
+       junctions
+     })
+     
+     
+     jl <- do.call(rbind, lapply(junctionlist, as.data.frame)) %>% 
+       dplyr::group_by(seqnames, start, end, width, strand) %>%
+       dplyr::summarize(coverage = sum(coverage, na.rm = TRUE)) %>% ungroup() %>%
+       dplyr::mutate(coverage = replace(coverage, is.na(coverage), 0))
+     
+     jl <- dplyr::left_join(jl, genemodels$jcov) %>%
+       dplyr::mutate(uniqreads = replace(uniqreads, is.na(uniqreads), 0),
+                     mmreads = replace(mmreads, is.na(mmreads), 0)) %>%
+       dplyr::mutate(scaledcoverage = coverage/sum(coverage, na.rm = TRUE) * sum(uniqreads, na.rm = TRUE)) %>%
+       dplyr::mutate(tot_coverage = sum(coverage, na.rm = TRUE),
+                     tot_reads = sum(uniqreads, na.rm = TRUE)) %>%
+       dplyr::mutate(prop_pval = calc_prop_p(coverage, uniqreads, tot_coverage, tot_reads)) %>%
+       dplyr::mutate(junctionid = paste0("J", seq_len(length(scaledcoverage)))) %>% 
+       dplyr::mutate(difference = uniqreads - scaledcoverage) %>%
+       dplyr::mutate(ranking = order(order(difference))) %>%
+       dplyr::select(junctionid, everything())
+     
+     pdf(paste0(outdir, "/", currgene, ".pdf"), width = 12, height = 10)
+     tryCatch({
+       plot_tracks(mygene = currgene, genemodels = genemodels$genemodels_exon, 
+                   genemodels2 = genemodels$genemodels_cds, 
+                   gtf_file = NULL, rnaseq_datafiles = structure(bigwig, names = "s1"), 
+                   rnaseq_condition = structure("g1", names = "s1"), show_chr = NULL, 
+                   min_coord = NULL, max_coord = NULL, 
+                   pdf_filename = NULL, pdf_width = 7, pdf_height = 7)
+     }, error = function(e) message(e))
+     
+     grid.newpage()
+     grid.table(genemodels$quantsf %>% dplyr::filter(Name %in% txlist))
+     
+     grid.newpage()
+     grid.table(jl %>% dplyr::select(junctionid, seqnames, start, end, width, strand, 
+                                     uniqreads, mmreads, scaledcoverage, prop_pval))
+     
+     print(ggplot(jl, aes(x = scaledcoverage, y = uniqreads, label = junctionid)) + 
+             geom_point(size = 4) + geom_label_repel() + 
+             geom_abline(intercept = 0, slope = 1) + 
+             ggtitle(paste0("score = ", round(sum(abs(jl$uniqreads - jl$scaledcoverage), 
+                                                  na.rm = TRUE)/sum(jl$uniqreads, na.rm = TRUE), 2))) + 
+             xlab("Scaled predicted coverage") + ylab("Number of uniquely mapped reads"))
+     dev.off()
+     
+     write.table(jl %>%
+                   dplyr::mutate(coverage = round(coverage, 2),
+                                 scaledcoverage = round(scaledcoverage, 2),
+                                 difference = round(difference, 2)), 
+                 file = paste0(outdir, "/", gene, ".txt"),
+                 quote = FALSE, row.names = FALSE, col.names = TRUE, sep = "\t")
+     print(as.data.frame(jl))
+     
+     saveRDS(NULL, paste0(checkdir, "/", currgene, ".rds"))
+   }
+ }, mc.preschedule = FALSE, mc.cores = ncores)
ENST00000359676
ENST00000621426
ENST00000616976
ENST00000475781
ENST00000326071
ENST00000375677
ENST00000375678
ENST00000201961
ENST00000419612
ENST00000470428
ENST00000485364
Joining, by = c("seqnames", "start", "end", "strand")
   junctionid seqnames    start      end width strand   coverage uniqreads
1          J1       20 32447342 32447750   409      -  0.6222752         0
2          J2       20 32447817 32452235  4419      - 24.4678589        11
3          J3       20 32452438 32452883   446      - 72.1592723        65
4          J4       20 32453007 32453303   297      - 95.7868478        56
5          J5       20 32453496 32453575    80      - 98.6871679        51
6          J6       20 32453762 32454014   253      -  1.1645003         0
7          J7       20 32453762 32456117  2356      - 30.5508664        14
8          J8       20 32454085 32456117  2033      -  0.5334818         0
9          J9       20 32456396 32474600 18205      - 34.1771281        10
10        J10       20 32465118 32474600  9483      - 16.4330574         9
11        J11       20 32465135 32474600  9466      -  1.3633317         0
12        J12       20 32474743 32483361  8619      -  7.4168036         4
13        J13       20 32474743 32511346 36604      - 50.0546993        84
14        J14       20 32485765 32486695   931      - 11.8506766         1
15        J15       20 32486802 32511346 24545      - 12.3913281         0
16        J16       20 32509941 32511346  1406      -  1.0025129         0
17        J17       20 32511457 32520810  9354      - 73.7613133        94
18        J18       20 32520923 32527757  6835      - 64.0827630        68
19        J19       20 32527914 32532316  4403      -  2.1003390         0
20        J20       20 32527914 32535440  7527      -  1.1855810         0
21        J21       20 32527914 32584569 56656      - 19.4854198        14
22        J22       20 32532417 32533375   959      -  2.1133709         0
23        J23       20 32533486 32535440  1955      -  3.0316420         0
24        J24       20 32548887 32584569 35683      -  2.6897073         0
   mmreads scaledcoverage tot_coverage tot_reads    prop_pval  difference
1        0      0.4772902     627.1119       481 1.000000e+00  -0.4772902
2        0     18.7670482     627.1119       481 1.797903e-01  -7.7670482
3        1     55.3467531     627.1119       481 3.610255e-01   9.6532469
4        0     73.4692971     627.1119       481 9.799392e-02 -17.4692971
5        0     75.6938664     627.1119       481 1.687651e-02 -24.6938664
6        0      0.8931813     627.1119       481 9.918259e-01  -0.8931813
7        0     23.4327649     627.1119       481 1.354810e-01  -9.4327649
8        0      0.4091849     627.1119       481 1.000000e+00  -0.4091849
9        0     26.2141373     627.1119       481 7.192618e-03 -16.2141373
10       0     12.6042897     627.1119       481 5.331441e-01  -3.6042897
11       0      1.0456866     627.1119       481 8.739071e-01  -1.0456866
12       0      5.6887491     627.1119       481 7.844460e-01  -1.6887491
13       0     38.3923645     627.1119       481 2.546646e-06  45.6076355
14       0      9.0895661     627.1119       481 2.096010e-02  -8.0895661
15       0      9.5042502     627.1119       481 4.922211e-03  -9.5042502
16       0      0.7689356     627.1119       481 1.000000e+00  -0.7689356
17       0     56.5755317     627.1119       481 4.707297e-04  37.4244683
18       0     49.1520043     627.1119       481 5.720451e-02  18.8479957
19       0      1.6109772     627.1119       481 5.661714e-01  -1.6109772
20       0      0.9093504     627.1119       481 9.783653e-01  -0.9093504
21       0     14.9454766     627.1119       481 9.900925e-01  -0.9454766
22       0      1.6209728     627.1119       481 5.620566e-01  -1.6209728
23       0      2.3252942     627.1119       481 3.437410e-01  -2.3252942
24       0      2.0630275     627.1119       481 4.109584e-01  -2.0630275
   ranking
1       19
2        7
3       21
4        2
5        1
6       17
7        5
8       20
9        3
10       8
11      14
12      11
13      24
14       6
15       4
16      18
17      23
18      22
19      13
20      16
21      15
22      12
23       9
24      10
[[1]]
NULL

> 
> saveRDS(NULL, paste0(checkdir, "/", gene, ".rds"))
> sessionInfo()
R version 3.4.0 (2017-04-21)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 14.04.5 LTS

Matrix products: default
BLAS: /usr/local/R/R-3.4.0/lib/libRblas.so
LAPACK: /usr/local/R/R-3.4.0/lib/libRlapack.so

locale:
 [1] LC_CTYPE=en_CA.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_CA.UTF-8        LC_COLLATE=en_CA.UTF-8    
 [5] LC_MONETARY=en_CA.UTF-8    LC_MESSAGES=en_CA.UTF-8   
 [7] LC_PAPER=en_CA.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_CA.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
 [1] grid      stats4    parallel  stats     graphics  grDevices utils    
 [8] datasets  methods   base     

other attached packages:
 [1] Gviz_1.20.0                           
 [2] gridExtra_2.3                         
 [3] ggrepel_0.7.0                         
 [4] cowplot_0.8.0                         
 [5] ggplot2_2.2.1                         
 [6] BSgenome.Hsapiens.NCBI.GRCh38_1.3.1000
 [7] BSgenome_1.44.2                       
 [8] rtracklayer_1.36.4                    
 [9] GenomicAlignments_1.12.2              
[10] Rsamtools_1.28.0                      
[11] Biostrings_2.44.2                     
[12] XVector_0.16.0                        
[13] SummarizedExperiment_1.6.5            
[14] DelayedArray_0.2.7                    
[15] matrixStats_0.52.2                    
[16] Biobase_2.36.2                        
[17] GenomicRanges_1.28.5                  
[18] GenomeInfoDb_1.12.2                   
[19] IRanges_2.10.3                        
[20] S4Vectors_0.14.5                      
[21] BiocGenerics_0.22.0                   
[22] alpine_1.2.0                          
[23] dplyr_0.7.4                           

loaded via a namespace (and not attached):
 [1] ProtGenerics_1.8.0            bitops_1.0-6                 
 [3] bit64_0.9-7                   RColorBrewer_1.1-2           
 [5] httr_1.3.1                    tools_3.4.0                  
 [7] backports_1.1.1               R6_2.2.2                     
 [9] rpart_4.1-11                  Hmisc_4.0-3                  
[11] DBI_0.7                       lazyeval_0.2.0               
[13] colorspace_1.3-2              nnet_7.3-12                  
[15] curl_2.8.1                    bit_1.1-12                   
[17] compiler_3.4.0                graph_1.54.0                 
[19] htmlTable_1.9                 scales_0.5.0                 
[21] checkmate_1.8.4               RBGL_1.52.0                  
[23] speedglm_0.3-2                stringr_1.2.0                
[25] digest_0.6.12                 foreign_0.8-69               
[27] base64enc_0.1-3               dichromat_2.0-0              
[29] pkgconfig_2.0.1               htmltools_0.3.6              
[31] ensembldb_2.0.4               htmlwidgets_0.9              
[33] rlang_0.1.2                   RSQLite_2.0                  
[35] BiocInstaller_1.26.1          shiny_1.0.5                  
[37] bindr_0.1                     BiocParallel_1.10.1          
[39] acepack_1.4.1                 VariantAnnotation_1.22.3     
[41] RCurl_1.95-4.8                magrittr_1.5                 
[43] GenomeInfoDbData_0.99.0       Formula_1.2-2                
[45] Matrix_1.2-11                 Rcpp_0.12.13                 
[47] munsell_0.4.3                 stringi_1.1.5                
[49] yaml_2.1.14                   MASS_7.3-47                  
[51] zlibbioc_1.22.0               plyr_1.8.4                   
[53] AnnotationHub_2.8.2           blob_1.1.0                   
[55] lattice_0.20-35               splines_3.4.0                
[57] GenomicFeatures_1.28.5        knitr_1.17                   
[59] biomaRt_2.32.1                XML_3.98-1.9                 
[61] glue_1.1.1                    biovizBase_1.24.0            
[63] latticeExtra_0.6-28           data.table_1.10.4            
[65] httpuv_1.3.5                  gtable_0.2.0                 
[67] assertthat_0.2.0              mime_0.5                     
[69] xtable_1.8-2                  AnnotationFilter_1.0.0       
[71] survival_2.41-3               tibble_1.3.4                 
[73] AnnotationDbi_1.38.2          memoise_1.1.0                
[75] bindrcpp_0.2                  cluster_2.0.6                
[77] interactiveDisplayBase_1.14.0
> date()
[1] "Thu Nov  2 16:18:05 2017"
> 
> 
> proc.time()
   user  system elapsed 
 42.546   1.476 196.759 
