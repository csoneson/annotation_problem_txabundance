
R version 3.4.0 (2017-04-21) -- "You Stupid Darkness"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> args <- (commandArgs(trailingOnly = TRUE))
> for (i in 1:length(args)) {
+   eval(parse(text = args[[i]]))
+ }
> 
> print(gene)  ## gene of interest, or file listing collection of genes (one per row)
[1] "ENSG00000144550"
> print(bam)  ## bam file
[1] "STAR/20151016.A-Cortex_RNA/20151016.A-Cortex_RNA_Aligned.sortedByCoord.out.bam"
> print(bigwig)  ## bigwig file for visualization
[1] "STARbigwig/20151016.A-Cortex_RNA_Aligned.sortedByCoord.out.bw"
> print(genemodels)  ## gene models etc (output of alpine_prepare_for_comparison.R)
[1] "alpine/alpine_genemodels.rds"
> print(biasmodels)  ## bias model object (output of alpine_fitbiasmodel.R)
[1] "alpine/alpine_fitbiasmodel.rds"
> print(ncores)  ## number of cores for parallel computations
[1] 1
> print(outdir)  ## output directory
[1] "alpine_out"
> print(checkdir)  ## directory to write (empty) rds files (time stamps)
[1] "alpine_check"
> 
> suppressPackageStartupMessages(library(dplyr))
> suppressPackageStartupMessages(library(alpine))
> suppressPackageStartupMessages(library(GenomicAlignments))
> suppressPackageStartupMessages(library(BSgenome.Hsapiens.NCBI.GRCh38))
> suppressPackageStartupMessages(library(ggplot2))
> suppressPackageStartupMessages(library(cowplot))
> suppressPackageStartupMessages(library(ggrepel))
> suppressPackageStartupMessages(library(parallel))
> suppressPackageStartupMessages(library(grid))
> suppressPackageStartupMessages(library(gridExtra))
> 
> source("Rscripts/plot_tracks.R")
> 
> calc_prop_p <- function(coverage, uniqreads, tot_coverage, tot_reads) {
+   sapply(seq_along(coverage), function(i) {
+     prop.test(x = c(coverage[i], uniqreads[i]), n = c(tot_coverage[i], tot_reads[i]),
+               alternative = "two.sided")$p.value
+   })
+ }
> 
> ## Read gene models for Gviz plot (pregenerated from gtf to save time) and
> ## Salmon quantifications
> genemodels <- readRDS(genemodels)
> 
> ## Read bias model parameters and exon-by-transcript objects
> biasmodels <- readRDS(biasmodels)
> fitpar <- biasmodels$fitpar
> ebt0 <- biasmodels$ebt0
> txps <- biasmodels$txps
> 
> ## Estimate average fragment length
> avefraglength <- sum(fitpar$`1`$fraglen.density$x * fitpar$`1`$fraglen.density$y/
+                        sum(fitpar$`1`$fraglen.density$y))
> 
> ## Load bam file 
> bam.files <- bam
> names(bam.files) <- "1"
> 
> ## Determine which gene(s) to investigate
> if (file.exists(gene)) {
+   genes <- unlist(read.delim(gene, as.is = TRUE, header = FALSE))
+ } else {
+   genes <- gene
+ }
> 
> ## Investigate each gene
> mclapply(genes, function(currgene) {
+   ## Get transcripts for gene of interest
+   txlist <- names(subset(txps, gene_id == currgene))
+   names(txlist) <- txlist
+ 
+     if (length(txlist) > 0) {
+     
+     ## Predict coverage for each transcript
+     pred.cov <- lapply(txlist, function(tx) {
+       message(tx)
+       ## Get transcript model
+       txmod <- ebt0[[tx]]
+       
+       pc <- tryCatch({
+         m <- predictCoverage(gene = txmod,
+                              bam.files = bam.files,
+                              fitpar = fitpar,
+                              genome = Hsapiens,
+                              model.names = "all")
+         ## Scale predicted coverage to agree with Salmon's estimated count
+         m$`1`$pred.cov$all <- m$`1`$pred.cov$all/sum(m$`1`$pred.cov$all) * 
+           genemodels$quantsf$NumReads[genemodels$quantsf$Name == tx] * avefraglength
+         m
+       }, error = function(e) NULL)
+       pc
+     })
+     
+     junctionlist <- lapply(txlist, function(tx) {
+       txmod <- sort(ebt0[[tx]])
+       junctions <- GenomicRanges::setdiff(range(txmod), txmod)
+       if (all(strand(txmod) == "+")) {
+         junctionpos <- cumsum(width(txmod))
+         junctionpos <- junctionpos[-length(junctionpos)]
+         junctioncov <- as.numeric(pred.cov[[tx]]$"1"$pred.cov$all)[junctionpos]
+       } else if (all(strand(txmod) == "-")) {
+         junctionpos <- cumsum(width(rev(txmod)))
+         junctionpos <- junctionpos[-length(junctionpos)]
+         junctioncov <- as.numeric(pred.cov[[tx]]$"1"$pred.cov$all)[junctionpos]
+         junctioncov <- rev(junctioncov)
+       } else {
+         stop("Unknown or mixed strand")
+       }
+       mcols(junctions)$coverage <- junctioncov
+       junctions
+     })
+     
+     
+     jl <- do.call(rbind, lapply(junctionlist, as.data.frame)) %>% 
+       dplyr::group_by(seqnames, start, end, width, strand) %>%
+       dplyr::summarize(coverage = sum(coverage, na.rm = TRUE)) %>% ungroup() %>%
+       dplyr::mutate(coverage = replace(coverage, is.na(coverage), 0))
+     
+     jl <- dplyr::left_join(jl, genemodels$jcov) %>%
+       dplyr::mutate(uniqreads = replace(uniqreads, is.na(uniqreads), 0),
+                     mmreads = replace(mmreads, is.na(mmreads), 0)) %>%
+       dplyr::mutate(scaledcoverage = coverage/sum(coverage, na.rm = TRUE) * sum(uniqreads, na.rm = TRUE)) %>%
+       dplyr::mutate(tot_coverage = sum(coverage, na.rm = TRUE),
+                     tot_reads = sum(uniqreads, na.rm = TRUE)) %>%
+       dplyr::mutate(prop_pval = calc_prop_p(coverage, uniqreads, tot_coverage, tot_reads)) %>%
+       dplyr::mutate(junctionid = paste0("J", seq_len(length(scaledcoverage)))) %>% 
+       dplyr::mutate(difference = uniqreads - scaledcoverage) %>%
+       dplyr::mutate(ranking = order(order(difference))) %>%
+       dplyr::select(junctionid, everything())
+     
+     pdf(paste0(outdir, "/", currgene, ".pdf"), width = 12, height = 10)
+     tryCatch({
+       plot_tracks(mygene = currgene, genemodels = genemodels$genemodels_exon, 
+                   genemodels2 = genemodels$genemodels_cds, 
+                   gtf_file = NULL, rnaseq_datafiles = structure(bigwig, names = "s1"), 
+                   rnaseq_condition = structure("g1", names = "s1"), show_chr = NULL, 
+                   min_coord = NULL, max_coord = NULL, 
+                   pdf_filename = NULL, pdf_width = 7, pdf_height = 7)
+     }, error = function(e) message(e))
+     
+     grid.newpage()
+     grid.table(genemodels$quantsf %>% dplyr::filter(Name %in% txlist))
+     
+     grid.newpage()
+     grid.table(jl %>% dplyr::select(junctionid, seqnames, start, end, width, strand, 
+                                     uniqreads, mmreads, scaledcoverage, prop_pval))
+     
+     print(ggplot(jl, aes(x = scaledcoverage, y = uniqreads, label = junctionid)) + 
+             geom_point(size = 4) + geom_label_repel() + 
+             geom_abline(intercept = 0, slope = 1) + 
+             ggtitle(paste0("score = ", round(sum(abs(jl$uniqreads - jl$scaledcoverage), 
+                                                  na.rm = TRUE)/sum(jl$uniqreads, na.rm = TRUE), 2))) + 
+             xlab("Scaled predicted coverage") + ylab("Number of uniquely mapped reads"))
+     dev.off()
+     
+     write.table(jl %>%
+                   dplyr::mutate(coverage = round(coverage, 2),
+                                 scaledcoverage = round(scaledcoverage, 2),
+                                 difference = round(difference, 2)), 
+                 file = paste0(outdir, "/", gene, ".txt"),
+                 quote = FALSE, row.names = FALSE, col.names = TRUE, sep = "\t")
+     print(as.data.frame(jl))
+     
+     saveRDS(NULL, paste0(checkdir, "/", currgene, ".rds"))
+   }
+ }, mc.preschedule = FALSE, mc.cores = ncores)
ENST00000383832
ENST00000383831
ENST00000613455
ENST00000491802
ENST00000273027
Joining, by = c("seqnames", "start", "end", "strand")
   junctionid seqnames   start     end width strand  coverage uniqreads mmreads
1          J1        3 9704065 9704586   522      +  50.02918        28       0
2          J2        3 9704628 9704748   121      +  82.23394        40       0
3          J3        3 9704796 9704890    95      + 121.14131        77       0
4          J4        3 9704995 9705463   469      + 205.64103       120       0
5          J5        3 9705501 9705717   217      + 268.79114       131       0
6          J6        3 9705502 9705984   483      +  10.35558         0       0
7          J7        3 9705721 9705986   266      + 273.92761       142       0
8          J8        3 9706064 9712540  6477      + 333.85778       211       0
9          J9        3 9712605 9712724   120      + 279.83436       217       0
10        J10        3 9712829 9712974   146      + 274.37705       185       0
11        J11        3 9713080 9714913  1834      + 305.53923       240       1
12        J12        3 9714956 9715288   333      + 297.90013       255       4
13        J13        3 9715365 9715472   108      + 297.62926       243       5
14        J14        3 9715527 9715973   447      + 253.90066       224       5
15        J15        3 9715527 9717057  1531      +   1.69196         1       0
16        J16        3 9716036 9717057  1022      + 253.49676       221       0
17        J17        3 9717105 9718028   924      + 285.82446       235       0
18        J18        3 9718211 9718474   264      + 198.83779       196       0
19        J19        3 9718603 9725948  7346      + 171.45055       136       0
20        J20        3 9726052 9726664   613      + 166.13792       188       0
21        J21        3 9726723 9727112   390      + 139.02573       159       0
22        J22        3 9727187 9727346   160      +  13.38748         0       0
23        J23        3 9727187 9729506  2320      + 106.41113       102       0
   scaledcoverage tot_coverage tot_reads    prop_pval  difference ranking
1       38.176195     4391.422      3351 2.260284e-01 -10.1761948       9
2       62.750958     4391.422      3351 2.245938e-02 -22.7509577       6
3       92.440337     4391.422      3351 2.303522e-01 -15.4403369       7
4      156.920261     4391.422      3351 1.949880e-02 -36.9202611       4
5      205.108756     4391.422      3351 1.669055e-05 -74.1087560       1
6        7.902122     4391.422      3351 1.244924e-02  -7.9021222      10
7      209.028288     4391.422      3351 1.351652e-04 -67.0282883       2
8      254.759715     4391.422      3351 2.918339e-02 -43.7597146       3
9      213.535596     4391.422      3351 8.909329e-01   3.4644039      12
10     209.371246     4391.422      3351 1.958137e-01 -24.3712457       5
11     233.150433     4391.422      3351 7.615936e-01   6.8495672      14
12     227.321199     4391.422      3351 1.757839e-01  27.6788006      19
13     227.114506     4391.422      3351 4.437176e-01  15.8854941      15
14     193.746152     4391.422      3351 1.123119e-01  30.2538477      20
15       1.291098     4391.422      3351 1.000000e+00  -0.2910984      11
16     193.437944     4391.422      3351 1.478431e-01  27.5620564      18
17     218.106515     4391.422      3351 4.056120e-01  16.8934849      16
18     151.728855     4391.422      3351 1.028767e-02  44.2711454      21
19     130.830235     4391.422      3351 7.751110e-01   5.1697649      13
20     126.776285     4391.422      3351 1.715140e-04  61.2237154      23
21     106.087550     4391.422      3351 4.337812e-04  52.9124499      22
22      10.215702     4391.422      3351 3.467646e-03 -10.2157025       8
23      81.200052     4391.422      3351 1.093414e-01  20.7999479      17
[[1]]
NULL

> 
> saveRDS(NULL, paste0(checkdir, "/", gene, ".rds"))
> sessionInfo()
R version 3.4.0 (2017-04-21)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 14.04.5 LTS

Matrix products: default
BLAS: /usr/local/R/R-3.4.0/lib/libRblas.so
LAPACK: /usr/local/R/R-3.4.0/lib/libRlapack.so

locale:
 [1] LC_CTYPE=en_CA.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_CA.UTF-8        LC_COLLATE=en_CA.UTF-8    
 [5] LC_MONETARY=en_CA.UTF-8    LC_MESSAGES=en_CA.UTF-8   
 [7] LC_PAPER=en_CA.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_CA.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
 [1] grid      stats4    parallel  stats     graphics  grDevices utils    
 [8] datasets  methods   base     

other attached packages:
 [1] Gviz_1.20.0                           
 [2] gridExtra_2.3                         
 [3] ggrepel_0.7.0                         
 [4] cowplot_0.8.0                         
 [5] ggplot2_2.2.1                         
 [6] BSgenome.Hsapiens.NCBI.GRCh38_1.3.1000
 [7] BSgenome_1.44.2                       
 [8] rtracklayer_1.36.4                    
 [9] GenomicAlignments_1.12.2              
[10] Rsamtools_1.28.0                      
[11] Biostrings_2.44.2                     
[12] XVector_0.16.0                        
[13] SummarizedExperiment_1.6.5            
[14] DelayedArray_0.2.7                    
[15] matrixStats_0.52.2                    
[16] Biobase_2.36.2                        
[17] GenomicRanges_1.28.5                  
[18] GenomeInfoDb_1.12.2                   
[19] IRanges_2.10.3                        
[20] S4Vectors_0.14.5                      
[21] BiocGenerics_0.22.0                   
[22] alpine_1.2.0                          
[23] dplyr_0.7.4                           

loaded via a namespace (and not attached):
 [1] ProtGenerics_1.8.0            bitops_1.0-6                 
 [3] bit64_0.9-7                   RColorBrewer_1.1-2           
 [5] httr_1.3.1                    tools_3.4.0                  
 [7] backports_1.1.1               R6_2.2.2                     
 [9] rpart_4.1-11                  Hmisc_4.0-3                  
[11] DBI_0.7                       lazyeval_0.2.0               
[13] colorspace_1.3-2              nnet_7.3-12                  
[15] curl_2.8.1                    bit_1.1-12                   
[17] compiler_3.4.0                graph_1.54.0                 
[19] htmlTable_1.9                 scales_0.5.0                 
[21] checkmate_1.8.4               RBGL_1.52.0                  
[23] speedglm_0.3-2                stringr_1.2.0                
[25] digest_0.6.12                 foreign_0.8-69               
[27] base64enc_0.1-3               dichromat_2.0-0              
[29] pkgconfig_2.0.1               htmltools_0.3.6              
[31] ensembldb_2.0.4               htmlwidgets_0.9              
[33] rlang_0.1.2                   RSQLite_2.0                  
[35] BiocInstaller_1.26.1          shiny_1.0.5                  
[37] bindr_0.1                     BiocParallel_1.10.1          
[39] acepack_1.4.1                 VariantAnnotation_1.22.3     
[41] RCurl_1.95-4.8                magrittr_1.5                 
[43] GenomeInfoDbData_0.99.0       Formula_1.2-2                
[45] Matrix_1.2-11                 Rcpp_0.12.13                 
[47] munsell_0.4.3                 stringi_1.1.5                
[49] yaml_2.1.14                   MASS_7.3-47                  
[51] zlibbioc_1.22.0               plyr_1.8.4                   
[53] AnnotationHub_2.8.2           blob_1.1.0                   
[55] lattice_0.20-35               splines_3.4.0                
[57] GenomicFeatures_1.28.5        knitr_1.17                   
[59] biomaRt_2.32.1                XML_3.98-1.9                 
[61] glue_1.1.1                    biovizBase_1.24.0            
[63] latticeExtra_0.6-28           data.table_1.10.4            
[65] httpuv_1.3.5                  gtable_0.2.0                 
[67] assertthat_0.2.0              mime_0.5                     
[69] xtable_1.8-2                  AnnotationFilter_1.0.0       
[71] survival_2.41-3               tibble_1.3.4                 
[73] AnnotationDbi_1.38.2          memoise_1.1.0                
[75] bindrcpp_0.2                  cluster_2.0.6                
[77] interactiveDisplayBase_1.14.0
> date()
[1] "Thu Nov  2 16:16:37 2017"
> 
> 
> proc.time()
   user  system elapsed 
 48.241   1.869 117.101 
